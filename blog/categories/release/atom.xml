<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: release | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/release/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2019-10-10T21:16:40-06:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[npm Production Checklist]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/17/npm-production-checklist/"/>
    <updated>2015-10-17T18:33:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/17/npm-production-checklist</id>
    <content type="html"><![CDATA[<p>I recently read this post by RisingStack over the <a href="https://blog.risingstack.com/node-js-production-checklist">Node.js Production Checklist</a>.</p>

<p>Since this was aimed at releasing node.js applications for the most part, I wanted to touch base on a &lsquo;production checklist&rsquo; on releasing a npm module.</p>

<p>The <a href="https://docs.npmjs.com/misc/developers">npm-developers guide</a> does a <em>great</em> job of explaining much you need to know about publishing your npm module.</p>

<p>This post will mainly serve as a work in progress document to supplement the developers guide, as well as serving as a way to help me continue to keep learning best practices all the time.</p>

<p>Some of the methods I use in my npm release schedule are as follows:</p>

<ol>
<li>Keeping files out of your package</li>
<li>Locking versions</li>
<li>Continuous integration (tests, install, etc)</li>
<li>Alpha/beta pushes (user testing)</li>
<li><a href="https://github.com/tjunnone/npm-check-updates">npm-check-updates</a></li>
</ol>


<h2>Keeping files out of your package</h2>

<p>We want our users to only have to download what they need to use your module. This may mean removing any files that are not beneficial for the user. Much like <code>.gitignore</code> for files being checked into git, npm has <code>.npmignore</code>.</p>

<p>Straight from <a href="https://docs.npmjs.com/misc/developers#keeping-files-out-of-your-package">npm docs</a>:</p>

<blockquote><p>Use a .npmignore file to keep stuff out of your package. If there&rsquo;s no .npmignore file, but there is a .gitignore file, then npm will ignore the stuff matched by the .gitignore file. If you want to include something that is excluded by your .gitignore file, you can create an empty .npmignore file to override it. Like git, npm looks for .npmignore and .gitignore files in all subdirectories of your package, not only the root directory.</p></blockquote>

<p>We can also use a command in the npm CLI called <code>prune</code>.</p>

<p>Again, straight from the <a href="https://docs.npmjs.com/cli/prune">npm documentation</a>:</p>

<blockquote><p>This command removes &ldquo;extraneous&rdquo; packages. If a package name is provided, then only packages matching one of the supplied names are removed.
Extraneous packages are packages that are not listed on the parent package&rsquo;s dependencies list.
If the &mdash;production flag is specified or the NODE_ENV environment variable is set to production, this command will remove the packages specified in your devDependencies. Setting &mdash;production=false will negate NODE_ENV being set to production.</p></blockquote>

<p>This is a great way to ensure you dont have any extra packages you might have installed via <code>npm install</code> and either forgot to pass the <code>--save</code> flag or were just testing functionality.</p>

<p>You can also use this command inline with the <code>--production</code> flag when installing node modules to avoid having the extra cruft of the <code>devDependencies</code>, which are mainly used for developing the modules (think testing, etc).</p>

<h2>Locking versions</h2>

<p>Theres a few methods to use with npm to lock down your versions. You can use the <code>npm shrinkwrap</code> command or specify node modules to bundle in your module with <code>bundleDependencies</code>.</p>

<p>The strategy is, you can either pack those in with your tarball as they are in your <code>node_modules</code> folder, or you can lock down those exact versions by storing the exact tarball to download when the user <code>npm install</code>s your module.</p>

<p>Edit: I&rsquo;ve just learned on a new method to package bundle up node modules by using the <code>bundledDependencies</code> attribute in your projects <code>package.json</code> file.</p>

<h2>Bundling</h2>

<p>By specifying <code>bundleDependencies</code> in your package.json, you are telling npm on its publishing process to include those modules listed in the tarball it creates and pushes up to the npm registry. For example, if you go to any npm repo and download the tarball in the url there, unzip it and open it, you&rsquo;ll see those exact node modules in them as you&rsquo;ve got in your own <code>node_modules</code> folder.</p>

<p>This effectively locks down your modules versions, at the cost of a larger tarball size the user will download intially. Any modules that are not bundled, will then be downloaded and installed after the tarball is downloaded.</p>

<h2>Shrinkwrapping</h2>

<p>If you&rsquo;ve ever done any Rails, you&rsquo;ve probably seen the gemfile.lock. The equivalent in Node land is the <code>npm-shrinkwrap.json</code> file.</p>

<p>What the <code>npm shrinkwrap</code> command does is looks at your <code>node_modules</code> folder and looks at the packages installed there and compares those to what is in your <code>package.json</code> file.</p>

<p>Straight from <a href="https://docs.npmjs.com/cli/shrinkwrap">npm documentation</a>:</p>

<blockquote><p>The shrinkwrap command has locked down the dependencies based on what&rsquo;s currently installed in node_modules. The installation behavior is changed to:</p>

<p>The module tree described by the shrinkwrap is reproduced. This means reproducing the structure described in the file, using the specific files referenced in &ldquo;resolved&rdquo; if available, falling back to normal package resolution using &ldquo;version&rdquo; if one isn&rsquo;t.</p>

<p>The tree is walked and any missing dependencies are installed in the usual fasion.</p></blockquote>

<p>A huge misconception is that shrinkwrap locks down what versions are in your <code>package.json</code> file. This is incorrect. Just to reiterate, it will look in your <code>node_modules</code> and use that compared to your <code>package.json</code> file.</p>

<p>Edit: Another thing to note, if you take a look in your npm-shrinkwrap.json, you&rsquo;ll see the exact URL for that versions tarball to download, which npm cli will use to grab without taking a peep at anything else. This may cause issues for some users, as stated by <a href="https://github.com/driftyco/ionic-cli/issues/636">Forrest on this Ionic CLI issue</a>:</p>

<blockquote><p>Due to how shrinkwrap works, it ends up bypassing the npm cache and redownloading every package mentioned in the shrinkwrap each time npm install is run. If users have any issues with their network, or something gets sticky with npm&rsquo;s CDN, the whole install can fail, forcing them to start over again.</p></blockquote>

<p>Heed this warning, friends.</p>

<h2>Testing</h2>

<p>Try to avoid the old addage, &lsquo;it worked on my machine&rsquo;, by having a CI server pull your package, run some tests, and even sometimes install the module to make sure it works on other machines besides your own.</p>

<p>I really enjoy using <a href="https://circleci.com/">CircleCI</a>, as it is free for open source projects! You can normally specify a config file that says what version of node/npm to use and the rest is automated.</p>

<h2>Alpha/beta pushes</h2>

<p>I covered this in a <a href="http://jbavari.github.io/blog/2015/10/16/using-npm-tags">previous article about using npm tags</a>.</p>

<p>The idea is, before publishing your version to npm, try doing a alpha/beta push first (to save the version in npm you&rsquo;re about to publish, since there can only be <em>one</em> version) to let users <code>npm install</code> the module to run some tests before commiting that to the <code>latest</code> tag for everyone to install.</p>

<h2>npm Check Updates</h2>

<p>There&rsquo;s a nice module that looks at your <code>package.json</code> file and looks to see the latest tags on the modules you specify in your dependencies.</p>

<p>It will give you some heads up if there are latest packages, so you can update if you have too many out of date packages.</p>

<p>Hope this helps!</p>

<p>References:</p>

<ul>
<li><a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">Using npm as a build tool</a></li>
<li><a href="http://jbavari.github.io/blog/2015/10/16/using-npm-tags">Using npm tags</a></li>
<li><a href="https://docs.npmjs.com/cli/shrinkwrap">npm documentation</a></li>
<li><a href="https://docs.npmjs.com/misc/developers">npm-developers guide</a></li>
<li><a href="https://www.npmjs.com/package/module-best-practices#naming-conventions">npm &ndash; Module best practices</a></li>
<li><a href="https://blog.risingstack.com/node-js-production-checklist">Node.js Production Checklist</a></li>
<li><a href="http://blog.nchaulet.fr/publish-package-on-npm-best-practice/">Publish packages on npm &ndash; best practice</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasing Electron for Windows]]></title>
    <link href="http://jbavari.github.io/blog/2015/09/09/releasing-electron-for-windows/"/>
    <updated>2015-09-09T18:50:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/09/09/releasing-electron-for-windows</id>
    <content type="html"><![CDATA[<p>Releasing Electron applications on Windows can be a tricky issue. Especially if you mainly use a Mac (like me). And you have to think about that pesky <a href="https://msdn.microsoft.com/en-us/library/ms537361%28v=vs.85%29.aspx">code signing</a> thing you have to do to avoid the annoying &lsquo;SmartScreen&rsquo; filter users may get.</p>

<p>Thankfully, there&rsquo;s a great tool called Squirrel made by <a href="https://twitter.com/paulcbetts">Paul Betts</a> that does a ton of the heavy lifting for you. Codesigning and all.</p>

<p>I really got a ton of knowledge from the blog post, <a href="http://www.mylifeforthecode.com/creating-a-windows-distribution-of-an-electron-app-using-squirrel/">Creating a Windows Distribution of an Electron App using Squirrel</a> and <a href="http://www.mylifeforthecode.com/using-electron-packager-to-package-an-electron-app/">Using Electron Packager to Package an Electron App</a>.</p>

<p>I wanted to curate a ton of knowledge in one place, so here we go.</p>

<p>I use a few tools to get this done on my Mac:</p>

<ul>
<li><a href="https://github.com/maxogden/electron-packager">Electron Packager</a></li>
<li><a href="https://www.winehq.org/">Wine</a></li>
<li><a href="http://wiki.winehq.org/winetricks">Winetricks</a></li>
<li><a href="http://www.nuget.org/nuget.exe">nuget cli</a></li>
<li><a href="https://github.com/Squirrel/Squirrel.Windows/releases">Squirrel.Windows</a></li>
</ul>


<p>First, let&rsquo;s look at the project layout:</p>

<h2>Project Layout</h2>

<p>``` sh
/build # Installers go here
  /osx
  /resources # Icons, iconset, images, etc
  /win # Binaries to build, Package.nuspec file to specify configurations
  packager.json # File used by electron-builder to build OSX DMG file.
/dist # Distributions go here (.app, .exe, .dmg)
  /osx
  /win
/docs # Docs about project.
/node_modules # Modules used for building/packaging/testing
/scss # Sass for CSS compilation in www
/spec # Tests
  AppCtrl.spec.js
www # Source code for the application
  /css
  /data
  /img
  /js
  /lib
  /node_modules # Modules here used by the application itself.
  /templates</p>

<p>karma.conf.js # Configuration for tests.
livereload.js # Dev script to set up live reload in Electron
package.json # Main package.json with scripts/dependencies to package/build.
```</p>

<h2>Process</h2>

<p>First we&rsquo;ll need to make the exe and associated files to a <code>dist</code> folder. From there, we take the win <code>dist</code> files and pack them into the <code>Setup.exe</code> file, where Squirrel will do the heavy lifting to pack all this into a one step process.</p>

<h2>npm Scripts</h2>

<p>We&rsquo;ll use the npm script <code>pack:win</code> task to put all our <code>www</code> files into a nice package (resources, exe, etc) and output to the <code>dist</code> folder.</p>

<p><code>pack:win</code> step will just execute <code>electron-packager</code> with some relevant information. Please note the <code>asar=true</code>, this is recommended because sometimes <code>node_modules</code> can get nested a few times and the file paths will be too long for certain Windows platforms.</p>

<p>Script:</p>

<p>```js
{
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"pack:win": "electron-packager ./www \"Project\" --out=dist/win --platform=win32 --arch=ia32 --version=0.29.1 --icon=build/resources/icon.ico --version-string.CompanyName=\"My Company\" --version-string.ProductName=\"Project\" --version-string.FileDescription=\"Project\" --asar=true"
</code></pre>

<p>  }
```</p>

<h2>Electron Build script</h2>

<p>I used a simple build script in node to assist in some of the heavy lifting. I recommend getting an Extended Validation certificate from <a href="http://blogs.msdn.com/b/ie/archive/2012/08/14/microsoft-smartscreen-amp-extended-validation-ev-code-signing-certificates.aspx">this blog post</a>.</p>

<p>This will take the windows package in <code>dist/win</code> and create <code>dist/win/Setup.exe</code>.</p>

<p>```js</p>

<h1>!/usr/bin/env node</h1>

<p>// File is in root/build/win/build.js
// First call nuget pack Package.nuspec
// Then you&rsquo;ll have Project.<version>.nupkg
// Run Squirrel.exe &mdash;releaseify Project.<version>.nupkg &mdash;icon iconPath &mdash;loadingGif loadingGifPath
// resources in build/resources/</p>

<p>//Need to get around weird command line passes with windows paths
function addWindowsPathFix(path) {
  return [&lsquo;&ldquo;&rsquo;, path, &lsquo;&rdquo;&rsquo;].join(&lsquo;&rsquo;);
}</p>

<p>var childProcess = require(&lsquo;child_process&rsquo;),
  path = require(&lsquo;path&rsquo;),
  packageJsonPath = path.join(<strong>dirname, &lsquo;..&rsquo;, &lsquo;..&rsquo;, &lsquo;package.json&rsquo;),
  packageJson = require(packageJsonPath),
  loadingGifPath = path.join(</strong>dirname, &lsquo;..&rsquo;, &lsquo;resources&rsquo;, &lsquo;windows-loader.png&rsquo;),
  nugetPackageSpecPath = path.join(<strong>dirname, &lsquo;Package.nuspec&rsquo;),
  nugetPackageOutputPath = path.join(</strong>dirname),
  nugetPackageName = [&lsquo;Project&rsquo;, &lsquo;.1.0.0&rsquo;, &lsquo;.nupkg&rsquo;].join(&lsquo;&rsquo;),
  // nugetPackageName = [&lsquo;Project&rsquo;, packageJson.version, &lsquo;.nupkg&rsquo;].join(&lsquo;&rsquo;),
  nugetPackagePath = path.join(nugetPackageOutputPath, nugetPackageName),
  nugetExePath = path.join(<strong>dirname, &lsquo;nuget.exe&rsquo;),
  setupIconPath = path.join(</strong>dirname, &lsquo;..&rsquo;, &lsquo;resources&rsquo;, &lsquo;icon.ico&rsquo;),
  setupReleasePath = path.join(<strong>dirname, &lsquo;..&rsquo;, &lsquo;..&rsquo;, &lsquo;dist&rsquo;, &lsquo;win&rsquo;),
  signatureCertificatePath = path.join(</strong>dirname, &lsquo;Certificate.pfx&rsquo;),
  signParams = [&lsquo;&ldquo;/a /f &rdquo;&rsquo;, addWindowsPathFix(signatureCertificatePath), &lsquo;&ldquo; /p &rsquo;, process.env.PRIVATE_CERT_PASSWORD, &lsquo;&rdquo;&rsquo;].join(&lsquo;&rsquo;),
  squirrelExePath = path.join(__dirname, &lsquo;Squirrel.exe&rsquo;);</p>

<p>  console.log(&lsquo;sign params&rsquo;, signParams);</p>

<p>var createNugetPackageCommand = [addWindowsPathFix(nugetExePath), &lsquo;pack&rsquo;, addWindowsPathFix(nugetPackageSpecPath), &lsquo;-OutputDirectory&rsquo;, addWindowsPathFix(nugetPackageOutputPath)].join(&lsquo; &rsquo;);
var createSetupCommand = [</p>

<pre><code>          addWindowsPathFix(squirrelExePath), 
          '--releasify', addWindowsPathFix(nugetPackagePath), 
          '--loadingGif', addWindowsPathFix(loadingGifPath), 
          '--icon', addWindowsPathFix(setupIconPath), 
          '--releaseDir', addWindowsPathFix(setupReleasePath), 
          '--signWithParams', signParams
        ].join(' ');
</code></pre>

<p>console.log(&lsquo;Creating nuget package from nuget spec file:&rsquo;, nugetPackageSpecPath);
// console.log(createNugetPackageCommand);
childProcess.execSync(createNugetPackageCommand);
console.log(&lsquo;Created nuget package&rsquo;);</p>

<p>console.log(&lsquo;Building Setup.exe&rsquo;);
// console.log(createSetupCommand);
childProcess.execSync(createSetupCommand);
console.log(&lsquo;Built Setup.exe&rsquo;);
```</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codesigning Electron Applications]]></title>
    <link href="http://jbavari.github.io/blog/2015/08/14/codesigning-electron-applications/"/>
    <updated>2015-08-14T11:30:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/08/14/codesigning-electron-applications</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been busy at work creating and maintaining <a href="http://lab.ionic.io">Ionic Lab</a>. It&rsquo;s been a fun and challenging problem using HTML/CSS/JavaScript to create native OSX/Windows applications.</p>

<p>I&rsquo;m going to admit &ndash; I&rsquo;ve gotten a few hybrid projects on the App store. Honestly though I had a lot of help.</p>

<p>This time I was mostly on my own.</p>

<p>I&rsquo;m not great at the native dev and half the problems I occur are with the platform I am dealing with. In this I mean &ndash; Android I deal with how Google does signing and releasing and how Apple does signing and releasing.</p>

<p>I&rsquo;m going to cover mainly Apple policies to release an app on your own with or without the App store. With Electron, we&rsquo;re going to make a native build, so we&rsquo;ll need to know how to do this.</p>

<h2>Mac&rsquo;s Gatekeeper</h2>

<p>On Mac OSX, there&rsquo;s an application that checks all the applications you download and run to see if they are valid and trusted.</p>

<p>Certainly you&rsquo;ve seen the message from an app you&rsquo;ve downloaded: <code>"App can't be opened because it is from an unidentified developer."</code></p>

<p>If you create and app and do not codesign it with a valid Apple dev account, your users will see this. It&rsquo;s not a good thing.</p>

<h2>How to codesign</h2>

<p>The main tool of codesigning is the CLI tool <code>codesign</code>.</p>

<p>I really found a lot of help from <a href="https://developer.apple.com/library/mac/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-TNTAG400">OSX Code Signing in Depth</a>.</p>

<p>It&rsquo;s pretty clear right away what you need to run and how to verify what you need to run. I&rsquo;d like to go over how to do it with Electron, specifically.</p>

<p>I posted the script below. I want to highlight the issues I ran into as a result of my ignorance.</p>

<p>One issue I ran into &ndash; I was using the &ldquo;Mac Development&rdquo; certificate to sign &ndash; and when I ran the verify command (<code>codesign -vvvv -d "/path/to/MyApp.app"</code>) it gave me a good to go signal. When I ran the security CLI command (<code>spctl --assess -vvvv "/path/to/MyApp.app"</code>), it was rejected.</p>

<p>My error: I thought &ldquo;Mac Development&rdquo; was a &ldquo;Developer-ID application&rdquo;.</p>

<p>It&rsquo;s not. I was an account admin. In the Apple Member Center for Certificate Administration, I could only set up a &ldquo;Mac Development&rdquo; type certificate. Apple member center would not let met set up a &ldquo;Developer ID Application&rdquo; certificate. You need a &lsquo;team agent&rsquo; to set one up for you. (That or become a team agent)</p>

<p>That being said &ndash; ensure you sign with a certificate type of &ldquo;Developer ID Application&rdquo; to sign with, and you&rsquo;re good to go.</p>

<p>I set up my codesign script like <a href="https://github.com/nwjs/nw.js/issues/616#issuecomment-30844482">the following</a>. There&rsquo;s comments to help understand:</p>

<p>```sh</p>

<h1>Invoke this script with a relative <code>.app</code> path</h1>

<h1>EX:</h1>

<h1>codesign.sh &ldquo;dist/osx/MyApp-darwin-x64/MyApp.app&rdquo;</h1>

<h1>I had better luck using the iPhoneOS codesign_allocate</h1>

<p>export CODESIGN_ALLOCATE=&ldquo;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate&rdquo;</p>

<h1>Next two are specified in Apple docs:</h1>

<h1>export CODESIGN_ALLOCATE=&ldquo;/Applications/Xcode.app/Contents/Developer/usr/bin/codesign_allocate&rdquo;</h1>

<h1>export CODESIGN_ALLOCATE=&ldquo;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/codesign_allocate&rdquo;</h1>

<h1>However, neither worked, and gave error:</h1>

<h1>/Users/JoshBavari/Development/ionic-gui/dist/osx/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Electron Framework.framework/Electron Framework: cannot find code object on disk</h1>

<h1>Run the following to get a list of certs</h1>

<h1>security find-identity</h1>

<p>app=&ldquo;$PWD/$1&rdquo;
identity=&ldquo;&lt;ENTER_ID_OF_RESULT_FROM_SECURITY_FIND_IDENTITY_COMMAND>&rdquo;</p>

<p>echo &ldquo;### signing frameworks&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Framework.framework/Electron Framework&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Framework.framework/&rdquo;
/Versions/A"
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Framework.framework/Versions/Current/Electron Framework&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Helper EH.app/Contents/MacOS/Electron Helper EH&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS/Electron Helper NP&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS/Electron Helper NP&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/MyApp Helper.app/Contents/MacOS/MyApp Helper&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Mantle.framework/Mantle&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Mantle.framework/Versions/A&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/ReactiveCocoa.framework/ReactiveCocoa&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/ReactiveCocoa.framework/Versions/A&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Squirrel.framework/Squirrel&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Squirrel.framework/Versions/A&rdquo;</p>

<p>echo &ldquo;### signing app&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app&rdquo;</p>

<p>echo &ldquo;### Zipping app&rdquo;
ditto -c -k &mdash;sequesterRsrc &mdash;keepParent dist/osx/MyApp-darwin-x64/MyApp.app/ dist/osx/MyApp-Mac.zip</p>

<p>echo &ldquo;### verifying signature&rdquo;,
codesign -vvvv -d &ldquo;$app&rdquo;
sudo spctl -a -vvvv &ldquo;$app&rdquo;
```</p>

<h2>Pitfalls</h2>

<p>Since I wasn&rsquo;t very familiar with the Apple specifics I&rsquo;d like to high light a few pitfalls I ran into with my ignorance.</p>

<p>A &lsquo;Developer-ID signed app&rsquo; means setting up a certificate (private key + cert) with &ldquo;type&rdquo; as &ldquo;Developer ID Application&rdquo;. This does <em>NOT</em> mean a &ldquo;Mac Development&rdquo; certificate. From the OSX Codesigning guide:</p>

<blockquote><p>Like Gatekeeper, spctl will only accept Developer ID-signed apps and apps downloaded from the Mac App Store by default. It will reject apps signed with Mac App Store development or distribution certificates.</p></blockquote>

<h1>Issues</h1>

<p>Most users say to specify this environment variable:</p>

<p><code>export CODESIGN_ALLOCATE="/Applications/Xcode.app/Contents/Developer/usr/bin/codesign_allocate"</code></p>

<p>For some reason, I couldn&rsquo;t use the default codesign allocate as specified in the Github issue above. Instead, I had to go with this Environment variable for CODESIGN_ALLOCATE for <code>iPhoneOS.platform</code>:</p>

<p><code>export CODESIGN_ALLOCATE="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate"</code></p>

<h1>Hints</h1>

<p>Only include signed code in directories that should contain signed code.
Only include resources in directories that should contain
resources.
Do not use the &mdash;resource-rules flag or ResourceRules.plist. They have been obsoleted and will be rejected.</p>

<h2>A little note on signing frameworks [5]:</h2>

<h3>Signing Frameworks</h3>

<p>When you sign frameworks, you have to sign a specific version. So, let’s say your framework is called CSMail, you’d sign CSMail.framework/Versions/A. If you try and just sign the top level folder it will silently fail, as will CSMail.framework/Versions/Current (see “Symbolic Links” below).</p>

<h3>Symbolic Links</h3>

<p>Any symbolic links will be silently ignored and this extends to the path you give to the codesign command line utility. I think there’s actually a problem with symbolic links: you can add them to a Resources folder and it won’t invalidate the signature (whereas you cannot add normal files). I’ve reported this to Apple (rdar://problem/6050445).</p>

<h1>Helpful links</h1>

<ol>
<li><a href="https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/AboutCS/AboutCS.html">Apple Code Signing Overview</a></li>
<li><a href="https://developer.apple.com/library/mac/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-TNTAG205">Apple OS X Code Signing In Depth</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html">Apple Anatomy of Framework Bundles</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/codesign.1.html#//apple_ref/doc/man/1/codesign">Apple codesign Man Page</a></li>
<li><a href="http://sutes.co.uk/2008/07/code-signing.html">Chris Suter&rsquo;s Blog &ndash; Code signing</a></li>
<li><a href="http://stackoverflow.com/questions/27871099/creating-symlinks-in-osx-frameworks-inside-app-bundle">Stackoverflow &ndash; Creating Symlinks in OSX Frameworks</a></li>
<li><a href="http://successfulsoftware.net/2012/08/30/how-to-sign-your-mac-os-x-app-for-gatekeeper/">How to sign your Mac OSX app for Gatekeeper</a></li>
<li><a href="http://furbo.org/2013/10/17/code-signing-and-mavericks/">Codesigning and Mavericks</a>
9 <a href="http://www.pracucci.com/atom-electron-signing-mac-app.html">Atom Electron &ndash; Signing Mac App</a></li>
<li><a href="http://blog.hoachuck.biz/blog/2013/10/29/codesign-useful-info-in-xcode-5-dot-0-1/">Codesign &ndash; useful info in Xcode > 5.0</a></li>
<li><a href="http://www.saschawise.com/blog/2015/08/12/electron-for-the-mac-app-store.html">Electron for the Mac App Store</a></li>
<li><a href="https://github.com/nwjs/nw.js/issues/616#issuecomment-30844482">nw.js issue about code signing</a>.</li>
</ol>

]]></content>
  </entry>
  
</feed>
