<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Josh Bavari's Ramblings]]></title>
  <link href="http://jbavari.github.io/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2019-03-02T17:47:20-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Victim or the victor]]></title>
    <link href="http://jbavari.github.io/blog/2019/02/23/the-victim-or-the-victor/"/>
    <updated>2019-02-23T07:14:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/02/23/the-victim-or-the-victor</id>
    <content type="html"><![CDATA[<p>When I was a younger boy, my grandma would tell me stories of my grandfather going to war. Like most men during world war 2, he did not want to go to leave his new bride and head to where death is ever looming. One thing I remember her saying to me as a life lesson is that you&rsquo;re given a choice in life that most always boils down to your attitude. She said, &ldquo;just like your grandpa, you can chose to be a victim, or go get the courage to become a victor. The choice is always yours.&rdquo;</p>

<p>What does this mean? This means, when given any situation, your belief about the situation will in turn guide your thoughts and actions. This belief is so strong that even the way you think and address the situation happens whether or not your are conscious about it. The obvious choice would to be to see yourself as given a challenge that you must rise to and become a victor over.</p>

<p>The opposite is true &ndash; you could be given a challenge and say, &lsquo;why me&rsquo;. From this victim midset, you have now set yourself up for failure from the start. You&rsquo;ve seen the challenge become the burden.</p>

<p>That thought has always been on my mind throughout the years, but I have to admit I haven&rsquo;t always been as couragous as I could have been. You always assume when the time comes, you&rsquo;ll be ready. The fact is, it comes and hits you in the face right when you&rsquo;re planning for it. &ldquo;Everyone has a plan until you&rsquo;re punched in the face&rdquo;. The point is, the mindset of preparation is the key to success. My study of <a href="http://thedailystoic.com">stoicism</a> has lead me lately to living as if it has already happened, being unphased by things we should expect happen, and turning my &lsquo;have to&rsquo;s into &#8216;get to&rsquo;s.</p>

<p>How do you break this cycle? You start by examining your internal thoughts first. Now that you are conscious about your thoughts, you can then analyze how to course-correct. Until then, you might be in the default victim midset and not even know it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 years of Elixir: Reflections]]></title>
    <link href="http://jbavari.github.io/blog/2019/01/29/3-years-of-elixir-reflections/"/>
    <updated>2019-01-29T07:30:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/01/29/3-years-of-elixir-reflections</id>
    <content type="html"><![CDATA[<p>Back in 2015, I had just started at <a href="http://canvas.technology">CANVAS Technology</a> and my task was clear: to create a web application that can service many operations concurrently from users, robots, and other integration services. Prior to this new venture, I had spent my last few years doing Ruby on Rails, Node.js JavaScript, mobile applications (cordova, minimal Objective-C, Java/Android). Only a few months before joining CANVAS had I just started playing with Elixir and Phoenix. I was so excited and relieved to find something that was geared exactly for what we were embarking on.</p>

<p>What I want to outline in this post is the lessons I&rsquo;ve learned using Elixir these last 3+ years and help others learn quickly.</p>

<h2>Upgrade sooner than later</h2>

<p>Discuss pains of upgrading Elixir 1.3 &ndash;> 1.6, Ecto 1.0 &ndash;> 2.0, Phoenix 0.9 &ndash;> 1.3. It definitely hasn&rsquo;t been easy to update, this is mitigated by staying abreast of Elixir / phoenix changes and trying to implement early.</p>

<h2>GenServers are your friend &ndash; but use them only if you must</h2>

<p>Abstract away the API and the Server &ndash; link to post by <a href="https://pragdave.me/blog/2017/07/13/decoupling-interface-and-implementation-in-elixir.html">Dave Thomas explaining splitting the APIs, Servers, and Implementations in Elixir</a>.</p>

<h2>Testing pains with GenServers and Ecto&rsquo;s concurrency model</h2>

<p>Make sure to restart genservers / supervisors. Having a connection time out be longer for longer running genservers that aren&rsquo;t started every setup fixture.</p>

<h2>Using docker for team / testing scenarios</h2>

<p>Docker-compose for stack, testing with diff vars. Preload any databases by putting them in the postgres container root in <code>/tmp</code>.</p>

<h2>Testing browsers with Hound / ChromeDriver</h2>

<p>Use Hound and chromedriver.</p>

<h2>Do not code everything to the <code>Repo</code> itself</h2>

<p>It&rsquo;s not as easy to cut off your database addiction. Having an intermediate context API that cache is a good first step.</p>

<h2>PubSub is your friend, use structs to pass messages</h2>

<p>When using cast/gproc, pass the Structs, don&rsquo;t use tuples. Resist the simple solutiuons. Pass structs defined.</p>

<h2>Learn ETS</h2>

<p>Don&rsquo;t use a cache when the Erlang VM has one built in.</p>

<h2>Use behaviours</h2>

<p>Take a look how <a href="https://github.com/aaronrenner/crowdfundr">crowdfundr</a> app. Code to interfaces, not the implementations. Use the <code>impl</code> approach.</p>

<h2>Nginx as a front-end for SSL termination</h2>

<p>Links/discussion to the post, security wise, leave Nginx to handle the vulns and your app to handle the impl.</p>

<h2>Releases with Distillery</h2>

<p>Ship those tarballs, let it fly. Easier/safer than shiping your code. Should probably post about the replacing of ENV vars. Use a Config module for system set env variables instead of them getting baked into your <code>sys.config</code> file.</p>

<h2>Clustering &ndash; using epmd / GenServers for node communication message passing</h2>

<p>Link to swarm and libcluster &ndash; knowing that clustering comes out of the box with Erlang/Elixir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet: A Testing Handbook]]></title>
    <link href="http://jbavari.github.io/blog/2017/04/16/puppet-a-testing-handbook/"/>
    <updated>2017-04-16T13:09:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2017/04/16/puppet-a-testing-handbook</id>
    <content type="html"><![CDATA[<ul>
<li>Explain why the post &ndash; job required, growing pains, need for stability and health of the repo</li>
<li>Why to test</li>
<li>What to test</li>
<li>How to test
<strong> Lint &ndash; Rake file
</strong> Parser &ndash; rake file with globbing to run easier
<strong> Rspec &ndash; spec type tests to run on puppet code (syntax mainly)
</strong> Beaker &ndash; run tests on provisioned VM to ensure correct</li>
</ul>


<p>Cover:</p>

<p>puppet-lint
puppet parser validate &lt;manifest.pp>
puppet-rspec &ndash; A gem that runs rspec unit tests on a module (Based on compiled catalog)
Beaker</p>

<hr />

<p>Part of my role at work is managing a fleet of robots, servers, and other
infrastructure responsible for running our business. Due to the nature of our
business, we run within customer warehouses.</p>

<p>Being a one man operation, one of my main concerns is keeping all the systems
stable and proper working conditions. I am not the only developer touching our
puppet code, but I&rsquo;m the one responsible for the system(s).</p>

<p>As I embarked on the journey to add reliability to our infrastructure, something
very clear came up: there&rsquo;s a lot of information about testing puppet, but most
of it is fractured, out of date, or hard to understand. <a href="https://www.slideshare.net/PuppetLabs/puppetconf-2016-the-future-of-testing-puppet-code-gareth-rushgrove-puppet?qid=eee7d5c2-f52e-4ceb-8000-42e4fc174721&amp;v=&amp;b=&amp;from_search=2">See this slideshow from 2016 about the state of testing puppet</a>.</p>

<p>I&rsquo;m writing this post up to act as a handbook of sorts for testing puppet, as
well as a &lsquo;repository&rsquo; for testing puppet.</p>

<h1>Testing resources</h1>

<ul>
<li><a href="http://puppet-lint.com/">Puppet-lint</a> &ndash; Useful for linting your puppet code</li>
<li><a href="http://rspec-puppet.com/">Rspec Puppet</a> &ndash; Rspec tests for puppet code</li>
<li><a href="https://docs.puppet.com/puppet/4.10/tests_smoke.html">Puppet: module smoke testing</a></li>
<li><a href="http://www.example42.com/tutorials/PuppetTutorial/#slide-80">Slideshow about all things puppet</a></li>
<li><a href="https://www.safaribooksonline.com/library/view/extending-puppet-/9781785885686/">Extending Puppet &ndash; Second Edition</a></li>
<li><a href="https://github.com/puppetlabs/beaker/">Beaker</a></li>
<li><a href="http://www.xkyle.com/getting-started-puppet-acceptance-tests-with-beaker/">Getting Started Puppet Acceptance Tests With Beaker</a></li>
<li><a href="https://github.com/puppetlabs/puppetlabs-mysql/tree/master/spec">Great example of testing &ndash; Puppet MySQL module</a></li>
<li><a href="https://github.com/puppetlabs/puppetlabs_spec_helper">Puppetlabs Spec Helper</a></li>
<li><a href="https://www.puppetcookbook.com/posts/simple-syntax-check-manifests.html">Puppet Cookbook &ndash; Simple Syntax Check</a></li>
<li><a href="http://www.cakesolutions.net/teamblogs/testing-puppet">Testing Puppet</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Coverage Reports in Elixir]]></title>
    <link href="http://jbavari.github.io/blog/2017/03/13/test-coverage-reports-in-elixir/"/>
    <updated>2017-03-13T18:38:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2017/03/13/test-coverage-reports-in-elixir</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been learning a ton more about Elixir and really working towards refactoring and hardening the system.</p>

<p>On my current project, I&rsquo;ve got about 200 tests that exercise various parts of the system. Lately though, I&rsquo;ve been trying to analyze which parts of the system aren&rsquo;t being covered, and of course, theres tools to help with that.</p>

<p>The two I looked at were <a href="https://github.com/parroty/excoveralls">Coveralls</a> and <a href="https://github.com/alfert/coverex">Coverex</a>. I&rsquo;m going to be using <code>coverex</code> in this post.</p>

<p>Getting started is a breeze, check the readme for that. I&rsquo;ll cover it briefly for a bit here, my modifying our <code>mix.exs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="c1"># in `def project`, we add test_coverage</span>
</span><span class='line'>  <span class="ss">test_coverage:</span> <span class="p">[</span>
</span><span class='line'>    <span class="ss">tool:</span> <span class="no">Coverex</span><span class="o">.</span><span class="no">Task</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># in deps, add the depedency for only test environment</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:coverex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.4.10&quot;</span><span class="p">,</span> <span class="ss">only:</span> <span class="ss">:test</span><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>After setup, running <code>mix test --cover</code> generates some reports in your projects <code>./cover</code> folder &ndash; with <code>functions.html</code> and <code>modules.html</code>. These give you your standard coverage reports with lines covered / ratio covered.</p>

<p>For my project, I had quite a bit of generated files using <a href="https://github.com/bitwalker/exprotobuf">exprotobuf</a>. The coverage report was getting butchered from not using these many files in my tests.</p>

<p>According to the docs, we can add a keyword for <code>ignore_modules</code> in the keyword list <code>test_coverage</code> and the coverage reports will ignore those modules.</p>

<p>However, for my generated list of modules, I had quite the growing list to ignore and it quickly became unwieldy to put that list of modules in my <code>mix.exs</code> file.</p>

<p>Since we can&rsquo;t access other modules from our mix file, I had a quick solution. I created a <code>.coverignore</code> file in the project directory, lumped in all the modules I wanted to ignore (from the <code>modules.html</code> generated file) and put them all in the <code>.coverignore</code> file.</p>

<p>I ensured all the modules I wanted to ignore were all newline delimited (<code>\n</code>).</p>

<p>From there, I modified my <code>mix.exs</code> file as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="c1"># Near the top</span>
</span><span class='line'>  <span class="nv">@ignore_modules</span> <span class="no">File</span><span class="o">.</span><span class="n">read!</span><span class="p">(</span><span class="s2">&quot;./.coverignore&quot;</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="err">&amp;</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">to_atom</span><span class="p">(</span><span class="nv">&amp;1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># in def project</span>
</span><span class='line'>  <span class="ss">test_coverage:</span> <span class="p">[</span>
</span><span class='line'>    <span class="ss">tool:</span> <span class="no">Coverex</span><span class="o">.</span><span class="no">Task</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">ignore_modules:</span> <span class="nv">@ignore_modules</span>
</span><span class='line'>  <span class="p">],</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom, that does it! Now we&rsquo;ve got a manageable list of modules to ignore in a separate file so we can keep our mix file clean.</p>

<p>All in all, <code>coverex</code> is a great module, and I would suggest using it if you do not want to ship data to coveralls.</p>

<p>Hope this helps, happy coding. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multicast Service Discovery in Electron]]></title>
    <link href="http://jbavari.github.io/blog/2016/12/29/multicast-service-discovery-in-electron/"/>
    <updated>2016-12-29T14:01:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/12/29/multicast-service-discovery-in-electron</id>
    <content type="html"><![CDATA[<p>I’ve been playing around with mDNS lately for broadcasting some services for applications to auto-connect with.</p>

<p>The first experiment I had was setting up a server that broadcasts a TCP endpoint for an Electron application to discover and connect for the application data.</p>

<p>This was so easily done that I challenged myself to see how fast I can whip out a blog post.</p>

<p>First, get an Ubuntu server up (I used a Vagrant VM).</p>

<p>Run the commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install avahi-utils</span></code></pre></td></tr></table></div></figure>


<p>From here, the service for avahi (mdns) should be auto-started. Edit the configuration to enable broadcasting:</p>

<p><code>vim /etc/avahi/avahi-daemon.conf</code> – here’s a config that’s minimally broadcasting only the IPv4 address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[server]
</span><span class='line'>host-name=webserver
</span><span class='line'>domain-name=local
</span><span class='line'>use-ipv4=yes
</span><span class='line'>use-ipv6=no
</span><span class='line'>allow-interfaces=eth1
</span><span class='line'>deny-interfaces=eth0
</span><span class='line'>ratelimit-interval-usec=1000000
</span><span class='line'>ratelimit-burst=1000
</span><span class='line'>
</span><span class='line'>[wide-area]
</span><span class='line'>enable-wide-area=yes
</span><span class='line'>
</span><span class='line'>[publish]
</span><span class='line'>publish-addresses=yes
</span><span class='line'>publish-hinfo=yes
</span><span class='line'>publish-workstation=no
</span><span class='line'>publish-domain=yes</span></code></pre></td></tr></table></div></figure>


<p>Now, create a service configuration: <code>vim /etc/avahi/services/mywebserver.service</code>, with this contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;service-group&gt;
</span><span class='line'>  &lt;name&gt;Webserver&lt;/name&gt;
</span><span class='line'>  &lt;service&gt;
</span><span class='line'>    &lt;type&gt;_http._tcp&lt;/type&gt;
</span><span class='line'>    &lt;port&gt;80&lt;/port&gt;
</span><span class='line'>  &lt;/service&gt;
</span><span class='line'>&lt;/service-group&gt;</span></code></pre></td></tr></table></div></figure>


<p>Simple as that. Just restart the avahi-daemon – <code>sudo service avahi-daemon restart</code>.</p>

<p>This should now have your server broadcasting that it has a webserver running at port 80, named <code>Webserver</code>.</p>

<p>To check the service is broadcasting, run <code>avahi-browse _http._tcp -tr</code> – this should show your server as servername.local, with <code>Webserver</code>, pointing to its IP and port.</p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+   eth1 IPv4 webserver                              Web Site             local
</span><span class='line'>=   eth1 IPv4 webserver                              Web Site             local
</span><span class='line'>   hostname = [webserver.local]
</span><span class='line'>   address = [192.168.0.101]
</span><span class='line'>   port = [80]
</span><span class='line'>   txt = []</span></code></pre></td></tr></table></div></figure>


<p>Now for the electron portion, in your application, install the node mdns module: <code>npm install --save mdns</code>.</p>

<p>This will add the node module to your project, but since it has native compilation steps, you must build it with <code>electron-rebuild</code>. Do this: <code>npm install --save-dev electron-rebuild</code>.</p>

<p>Then run: <code>./node_modules/.bin/electron-rebuild</code> – this will rebuild the mdns module for your electron node version correctly.</p>

<p>To do the DNS lookups, simply run the steps from the node mdns <code>README</code>. Set the discovery type to <code>http</code> and it will find your service. From there, you can grab the address and then get the data from the web server (or html page redirection) as you so wish!</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Erlang Observer on a Remote Elixir Server]]></title>
    <link href="http://jbavari.github.io/blog/2016/03/11/using-erlang-observer-on-a-remote-elixir-server/"/>
    <updated>2016-03-11T14:01:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/03/11/using-erlang-observer-on-a-remote-elixir-server</id>
    <content type="html"><![CDATA[<p>I’ve been using Elixir a ton at work and in some fun side projects and I’m absolutely in love with it.</p>

<p>One tool I especially love is the Erlang Observer tool, that shows you IO, memory, and CPU usage used by your app and the Erlang VM.</p>

<p>Once I got some apps deployed, I wanted to observe them remotely. I found a few <a href="https://groups.google.com/forum/#!topic/elixir-lang-talk/312PlJLSgLw">google forum</a> posts and the <a href="http://elixir-lang.org/docs/stable/iex/IEx.html">IEx docs</a>, but I wanted to wrap up this knowledge for when I need it in the future.</p>

<p>I’m going to monitor a Phoenix app in this quick blog post.</p>

<p>First, fire up your Phoenix server on say, a VPS, giving it a node name:</p>

<p><code>iex --name server@64.16.134.61 --cookie jbavari -S mix phoenix.server</code></p>

<p>Then on your remote viewing machine, say your Mac, run the following:</p>

<p><code>iex --name josh@192.168.1.1 --cookie jbavari</code></p>

<p>Now we’re set up to do some remote observations!</p>

<p>Fire up <code>:observer.start</code> on your local machine, which should open up the Erlang observer.</p>

<p>Now from the menu, select ‘Nodes’, then you should see your node there. If not, click the connect to node button, type in your <code>server@64.16.134.61</code> node address and you should be able to view your node via the observer!</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom JSON encoding in Phoenix]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/24/custom-json-encoding-in-phoenix/"/>
    <updated>2016-01-24T19:30:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/24/custom-json-encoding-in-phoenix</id>
    <content type="html"><![CDATA[<p>I recently have been working a lot using Leaflet.js to do some mapping.</p>

<p>In some of my models, I use the lovely <code>Geo</code> package for Elixir point and geospatial usage. I needed to add support for Poison to encode my model.</p>

<p>I&rsquo;ve been serving geo json from my models, and I needed a way to use the JSON encoding way easier. I&rsquo;m sending some data out to a ZeroMQ socket so I need to encode it by transorming my Geo module in a way that I could encode it with Geo JSON.</p>

<p>I modified my model in two ways &ndash; one by putting the <code>@derive</code> directive to tell Poison to encode only certain fields. That is one way.</p>

<p>In another way, I needed to encode it everytime by calling the <code>Geo.JSON.encode</code> method without me having to do it. You can see that in the <code>defimpl</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Point</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="kn">use</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Web</span><span class="p">,</span> <span class="ss">:model</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Option 1 - specify exactly which fields to encode</span>
</span><span class='line'>  <span class="nv">@derive</span> <span class="p">{</span><span class="no">Poison</span><span class="o">.</span><span class="no">Encoder</span><span class="p">,</span> <span class="ss">only:</span> <span class="p">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:geo_json</span><span class="p">]}</span>
</span><span class='line'>  <span class="n">schema</span> <span class="s2">&quot;points&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:position</span><span class="p">,</span> <span class="no">Geo</span><span class="o">.</span><span class="no">Point</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:geo_json</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">virtual:</span> <span class="no">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">timestamps</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">encode_model</span><span class="p">(</span><span class="n">point</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="err">%</span><span class="no">MyApp</span><span class="o">.</span><span class="no">Point</span><span class="p">{</span><span class="n">point</span> <span class="o">|</span> <span class="ss">geo_json:</span> <span class="no">Geo</span><span class="o">.</span><span class="no">JSON</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">point</span><span class="o">.</span><span class="n">position</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defimpl</span> <span class="no">Poison</span><span class="o">.</span><span class="no">Encoder</span><span class="p">,</span> <span class="ss">for:</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Point</span> <span class="k">do</span>
</span><span class='line'><span class="k">    def</span> <span class="n">encode</span><span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="n">point</span> <span class="o">=</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Point</span><span class="o">.</span><span class="n">encode_model</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Poison</span><span class="o">.</span><span class="no">Encoder</span><span class="o">.</span><span class="no">Map</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="no">Map</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="p">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:geo_json</span><span class="p">]),</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Additional static paths in Phoenix]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/24/adding-additional-static-paths-in-phoenix/"/>
    <updated>2016-01-24T19:24:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/24/adding-additional-static-paths-in-phoenix</id>
    <content type="html"><![CDATA[<p>Phoenix is awesome.</p>

<p>A problem I ran into lately is how to add additional static paths to be served.</p>

<p>If you take a look in your <code>lib/endpoint.ex</code> file, you&rsquo;ll see the plug used for adding static paths:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">plug</span> <span class="no">Plug</span><span class="o">.</span><span class="no">Static</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">at:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="ss">from:</span> <span class="ss">:electronify</span><span class="p">,</span> <span class="ss">gzip:</span> <span class="no">false</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">only:</span> <span class="err">~</span><span class="n">w</span><span class="p">(</span><span class="n">css</span> <span class="n">fonts</span> <span class="n">images</span> <span class="n">js</span> <span class="n">favicon</span><span class="o">.</span><span class="n">ico</span> <span class="n">robots</span><span class="o">.</span><span class="n">txt</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wanted to add another folder to be served, &lsquo;zips&rsquo;, that I had to edit the <code>only:</code> line in the plug specification as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">plug</span> <span class="no">Plug</span><span class="o">.</span><span class="no">Static</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">at:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="ss">from:</span> <span class="ss">:electronify</span><span class="p">,</span> <span class="ss">gzip:</span> <span class="no">false</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">only:</span> <span class="err">~</span><span class="n">w</span><span class="p">(</span><span class="n">css</span> <span class="n">fonts</span> <span class="n">images</span> <span class="n">js</span> <span class="n">favicon</span><span class="o">.</span><span class="n">ico</span> <span class="n">robots</span><span class="o">.</span><span class="n">txt</span> <span class="n">zips</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There you have it, now I can access the files in the <code>zips</code> folder in <code>priv/static/zips</code> through the URL. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shipping data with Protocol Buffers in Elixir]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/16/shipping-data-with-protocol-buffers-in-elixir/"/>
    <updated>2016-01-16T22:49:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/16/shipping-data-with-protocol-buffers-in-elixir</id>
    <content type="html"><![CDATA[<p>Lately, I&rsquo;ve needed some data shipped across to various nodes to exchange data in a variety of places on a problem I was working on. There were a few ways to get that data shipped across, as the usual suspects are JSON, XML, or Google&rsquo;s <a href="https://developers.google.com/protocol-buffers/?hl=en">Protocol Buffers</a>.</p>

<p>For this specific problem, we were needing to get that data shared from C++ nodes to Elixir/Erlang.</p>

<p>Since the team was using Protocol buffers already, I decided to give them a run in Elixir using <a href="https://github.com/bitwalker/exprotobuf">exprotobuf</a>.</p>

<p>Note: <a href="https://github.com/jbavari/elixir-zeromq-protobuf-uploader">the client for this experiement is on github</a>.</p>

<h2>The idea</h2>

<p>The idea here is &ndash; we&rsquo;ll capture pieces of data from one node and ship it to the server for processing. We define the data structure by a <code>.proto</code> file, then turn our data into binary form by encoding it, and finally shipping it to it&rsquo;s destination. We could do the same thing with JSON, but we want the data as light as possible.</p>

<p>We&rsquo;ll use <a href="http://zeromq.org/">ZeroMQ</a> to ship the data and use the Elixir package <a href="https://github.com/zeromq/exzmq">exzmq</a> to encode in protocol buffers.</p>

<h2>The process</h2>

<p>First we define our protocol buffer format for an image message we want to send with data, its width, height, and bits per pixel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='protobuf'><span class='line'><span class="kd">message</span> <span class="nc">ImageMsg</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">optional</span> <span class="kt">bytes</span> <span class="na">data</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">optional</span> <span class="kt">int32</span> <span class="na">width</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">optional</span> <span class="kt">int32</span> <span class="na">height</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="k">optional</span> <span class="kt">int32</span> <span class="na">bpp</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We set up our application to use <code>exprotobuf</code> in our <code>mix.exs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">application</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="p">[</span><span class="ss">applications:</span> <span class="p">[</span><span class="ss">:logger</span><span class="p">,</span> <span class="ss">:exzmq</span><span class="p">,</span> <span class="ss">:exprotobuf</span><span class="p">],</span>
</span><span class='line'>     <span class="ss">mod:</span> <span class="p">{</span><span class="no">Zmq2</span><span class="p">,</span> <span class="p">[]}]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>as well as including it as a dependency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:exzmq</span><span class="p">,</span> <span class="ss">git:</span> <span class="s2">&quot;https://github.com/zeromq/exzmq&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:exprotobuf</span><span class="p">,</span> <span class="s2">&quot;1.0.0-rc1&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we create an Elixir struct from this <a href="https://github.com/jbavari/elixir-zeromq-protobuf-uploader/blob/master/lib/proto/imagemsg.proto">proto file</a> as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Zmq2</span><span class="o">.</span><span class="no">Protobuf</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="kn">use</span> <span class="no">Protobuf</span><span class="p">,</span> <span class="ss">from:</span> <span class="no">Path</span><span class="o">.</span><span class="n">wildcard</span><span class="p">(</span><span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">&quot;./proto/imagemsg.proto&quot;</span><span class="p">,</span> <span class="n">__DIR__</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have our protobuf file read in, let&rsquo;s get an images binary data, create an elixir structure from our protobuf file, and send that data over a Zero MQ socket (using <code>exzmq</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">check_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Sending image from file path: </span><span class="si">#{</span><span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">__DIR__</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="n">file_path</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="ss">:enoent</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;No file at the path: </span><span class="si">#{</span><span class="n">file_path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">img_data</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">send_image_data</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">img_data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">send_image_data</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">img_data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">img_message</span> <span class="o">=</span> <span class="no">Zmq2</span><span class="o">.</span><span class="no">Protobuf</span><span class="o">.</span><span class="no">ImageMsg</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">data:</span> <span class="n">img_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">encoded_data</span> <span class="o">=</span> <span class="no">Zmq2</span><span class="o">.</span><span class="no">Protobuf</span><span class="o">.</span><span class="no">ImageMsg</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">img_message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;The encoded data: </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">encoded_data</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Exzmq</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="p">[</span><span class="n">encoded_data</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Sent request - awaiting reply\n\n&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># {:ok, r} =</span>
</span><span class='line'>  <span class="k">case</span> <span class="no">Exzmq</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">r</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="s2">&quot;Received reply </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">r</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">_</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="s2">&quot;No Reply&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there we have it, a message sent serialized with protocol buffers. We can now apply this same strategy over any different protocol buffer messages we define, and ship them over any protocl we&rsquo;d like.</p>

<h3>Some inspiration</h3>

<p>Along the R&amp;D process, I came across <a href="http://dbeck.github.io">David Beck&rsquo;s blog</a>. David has an experiment where he was <a href="http://dbeck.github.io/Wrapping-up-my-Elixir-TCP-experiments/">sending several million messages in TCP</a> where he explores some ultra-efficient methods of sending messages, it&rsquo;s a great read. He also covers <a href="http://dbeck.github.io/5-lessons-learnt-from-choosing-zeromq-and-protobuf/">zeromq and protocol buffers</a> that goes more in depth into Protocol buffers and some lessons learned.</p>

<p>Alas, we move on!</p>

<p>Cheers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scoreboard forms in React and Angular 2]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/15/scoreboard-forms-in-react-and-angular-2/"/>
    <updated>2015-12-15T23:01:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/15/scoreboard-forms-in-react-and-angular-2</id>
    <content type="html"><![CDATA[<p>As a developer, you should be focused on spending some of your own time learning and staying up to date with technology that is always moving.</p>

<p>I wanted to find a reason to hop into some of the &lsquo;newer&rsquo; front-end frameworks, React and Angular 2, as well as some of the module bundlers <a href="http://browserify.org/">browserify</a> and <a href="https://webpack.github.io/">webpack</a>.</p>

<p>I had the opportunity to try out Angular 2 while it was still in alpha. With the recent announcement of Angular 2 going out in Beta, I wanted to build a Scoreboard form that went along with my Scoreboard project to evaluate the two frameworks.</p>

<p>This post will aim to build a simple scoreboard form in both frameworks, so you can see the same DOM interactions and the code it takes to form them.</p>

<p>Please also note, I&rsquo;m still very much learning, and some code may not be &lsquo;ideal&rsquo;.</p>

<p>We&rsquo;ll cover:</p>

<ul>
<li>The scoreboard form idea</li>
<li>Learning the ideas behind the frameworks</li>
<li>The bundling systems</li>
<li>Angular 2 implementation (TypeScript)</li>
<li>React implementation (ES6)</li>
<li>The differences between the two</li>
<li>Pros and Cons of each (in my eyes)</li>
</ul>


<p>All of the source code is available on my Github profile in the <a href="https://github.com/jbavari/scoreboard-form">scoreboard-form</a> repository.</p>

<h1>The Scoreboard Form</h1>

<p>A scoreboard is simple &ndash; you&rsquo;ll enter the two team names, then specify a touchdown or field goal for either team.</p>

<p>That means we will need a few components: a scoreboard and a team.</p>

<p>The idea will be to build these components in React and Angular2, having them use similar templates to render to the equivalent DOM structures.</p>

<h2>Learning the ideas behind the frameworks</h2>

<p>Both frameworks aim to contain all of the functionality and display into a component.</p>

<p>The idea will be to build a team component, that displays teams, and a scoreboard component, that will display both of those teams and have a submit method to post that data to our scoreboard API server.</p>

<p>The main difference we will see between the two frameworks is adapting to <a href="http://es6-features.org/">ES6</a> or <a href="http://www.typescriptlang.org/">TypeScript</a>.</p>

<p>In either framework, we will create a class for the component in ES6/TypeScript, and then connect the template to it, and finally attach it in the DOM.</p>

<h1>The bundling systems</h1>

<p>We will use Browserify to pack up React into a single module, while using webpack to bundle up Angular 2 into a single bundle.</p>

<p>What is bundling you say? It&rsquo;s taking all the source for our components and bundling them up with the framework code to have one JavaScript file to load the entire bundle. That way, we only need one JavaScript file instead of a whole load of <code>&lt;script&gt;</code> tags.</p>

<h1>Angular 2 implementation</h1>

<p>Angular 2 is built in TypeScript, which is a superset of JavaScript that allows types to have a &lsquo;stronger type&rsquo; to work with. We will build our component in TypeScript, and transpile it down to ES5 JavaScript.</p>

<h2>Building the Team component</h2>

<p>In Angular 2, we need to use a decorator (<a href="https://www.sitepen.com/blog/2015/10/20/typescript-decorators/">see this blog post about TypeScript decorators</a>) to specify a Team as a component that will render.</p>

<p>We will import the Decorator, <code>Component</code>, and then apply it to our class. The <code>Component</code> decorator specifies which DOM element it will attach to (in this case, <code>team</code>), any inputs our control may have, what template it will use (specified as the <code>template</code> key), and what other directives will be used to parse our template.</p>

<p>Then, we have our class that defines the component itself with a name and score, methods to increase score (<code>touchdown</code> and <code>fieldGoal</code>), a <code>toJson</code> method, and finally callbacks to update itself from the parent component.</p>

<p>The team component:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import {Component, EventEmitter, Output} from 'angular2/core';
</span><span class='line'>import {NgFor, NgIf, NgModel} from 'angular2/common';
</span><span class='line'>
</span><span class='line'>@Component({
</span><span class='line'>  directives: [NgFor, NgIf, NgModel],
</span><span class='line'>  selector: 'team',
</span><span class='line'>  template: `
</span><span class='line'>    &lt;div *ngIf="name == ''"&gt;
</span><span class='line'>      &lt;h3&gt;No team set&lt;/h3&gt;
</span><span class='line'>      &lt;input type="text" [(ngModel)]="nameInput" placeholder="Enter a name"/&gt;
</span><span class='line'>      &lt;button type="submit" (click)="setName()"&gt;Set name&lt;/button&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>    &lt;div *ngIf="name != ''"&gt;
</span><span class='line'>      &lt;h3&gt;&lt;/h3&gt;
</span><span class='line'>      &lt;button (click)="touchdown($event)"&gt;Touchdown&lt;/button&gt;
</span><span class='line'>      &lt;button (click)="fieldGoal($event)"&gt;Field Goal&lt;/button&gt;
</span><span class='line'>      &lt;h4&gt;Score: &lt;/h4&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>    `
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>export class Team {
</span><span class='line'>  @Output() updateTeam = new EventEmitter&lt;Team&gt;();
</span><span class='line'>  constructor() {
</span><span class='line'>    this.nameInput = '';
</span><span class='line'>    this.name = '';
</span><span class='line'>    this.score = 0;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  fieldGoal(e) {
</span><span class='line'>    e.preventDefault();
</span><span class='line'>    this.score += 3;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  touchdown(e) {
</span><span class='line'>    e.preventDefault();
</span><span class='line'>    this.score += 7;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  setName(nameInput) {
</span><span class='line'>    this.name = this.nameInput;
</span><span class='line'>    this.nameInput = '';
</span><span class='line'>    if(this.updateTeam) {
</span><span class='line'>      this.updateTeam.next(this);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  toJson() {
</span><span class='line'>    return { name: this.name, score: this.score };
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Defining the scoreboard component</h2>

<p>Now we need to displays these teams in a side by side manner, a callback to update information from the team component, and a method to submit the scores to the API.</p>

<p>We&rsquo;ll define the component as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import {Component} from 'angular2/core';
</span><span class='line'>import {Team} from '../team/team';
</span><span class='line'>
</span><span class='line'>@Component({
</span><span class='line'>  directives: [Team],
</span><span class='line'>  selector: 'scoreboard',
</span><span class='line'>  template: `
</span><span class='line'>    &lt;form (ngSubmit)="submitScore()"&gt;
</span><span class='line'>      &lt;div class="row"&gt;
</span><span class='line'>        &lt;div class="col-md-6"&gt;
</span><span class='line'>          &lt;h2&gt;Home Team&lt;/h2&gt;
</span><span class='line'>          &lt;team (updateTeam)="updateHomeTeam($event)" home="true"&gt;&lt;/team&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        &lt;div class="col-md-6"&gt;
</span><span class='line'>          &lt;h2&gt;Visitor Team&lt;/h2&gt;
</span><span class='line'>          &lt;team (updateTeam)="updateVisitorTeam($event)"&gt;&lt;/team&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>      &lt;div class="row"&gt;
</span><span class='line'>        &lt;button type="submit"&gt;Submit&lt;/button&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>      &lt;div *ngIf="submitted"&gt;
</span><span class='line'>        JSON payload: 
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/form&gt;  
</span><span class='line'>  `
</span><span class='line'>})
</span><span class='line'>export class Scoreboard {
</span><span class='line'>  homeTeam: Team = new Team();
</span><span class='line'>  visitorTeam: Team = new Team();
</span><span class='line'>  submitted: boolean = false;
</span><span class='line'>  jsonPayload: string = null;
</span><span class='line'>
</span><span class='line'>  constuctor() {
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  submitScore() {
</span><span class='line'>    this.submitted = true;
</span><span class='line'>    this.jsonPayload = JSON.stringify({ homeTeam: this.homeTeam.toJson(), visitorTeam: this.visitorTeam.toJson()});
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  updateHomeTeam(team: Team) {
</span><span class='line'>    this.homeTeam = team;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  updateVisitorTeam(team: Team) {
</span><span class='line'>    this.visitorTeam = team;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Pros and Cons</h2>

<h3>Pros</h3>

<h3>Cons</h3>

<ul>
<li>Angular 2 &ndash; docs are all over the place.</li>
<li>Main blogs that are linked from docs site are using old kabob style (e.g. <code>*ng-if</code> instead of <code>*ngIf</code>).</li>
<li>Webpack configuration &ndash; I didn&rsquo;t include zone.js in my entries, and I could not get any DOM updates coming from my components changing.</li>
<li>When to use two-way bindings, and one-way bindings was good enough.</li>
<li>No &lsquo;why&rsquo; to what im doing &ndash; it aims to just follow the same &lsquo;idea&rsquo; as Angular.js.</li>
<li>Plunkers aren&rsquo;t up to date.</li>
</ul>


<h1>React implementation (ES6)</h1>

<p>Now that we have the basic idea of the team and scoreboard, you&rsquo;ll see React is very similiar. Instead of having a decorator specify the template and DOM elements to attach to, we&rsquo;ll specify a class that extends <code>React.Component</code>, a method that will render the markup, and finally, some bootstrap code to attach our class to a DOM element.</p>

<h2>Defining the team component</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import React from 'react';
</span><span class='line'>
</span><span class='line'>export default class Team extends React.Component {
</span><span class='line'>  constructor(props) {
</span><span class='line'>    super(props);
</span><span class='line'>    this.props = props;
</span><span class='line'>    this.name = props.name;
</span><span class='line'>    this.score = props.score || 0;
</span><span class='line'>    this.setName = this.setName.bind(this);
</span><span class='line'>    // this.state = {name: this.name, score: this.score};
</span><span class='line'>    this.touchdown = this.touchdown.bind(this);
</span><span class='line'>    this.fieldGoal = this.fieldGoal.bind(this);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  fieldGoal(e) {
</span><span class='line'>    e.preventDefault();
</span><span class='line'>    this.score += 3;
</span><span class='line'>    this.setState(this);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  touchdown(e) {
</span><span class='line'>    e.preventDefault();
</span><span class='line'>    this.score += 7;
</span><span class='line'>    this.setState(this);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  setName(e) {
</span><span class='line'>    e.preventDefault();
</span><span class='line'>    this.name = this.refs.teamName.value;
</span><span class='line'>    this.setState(this);
</span><span class='line'>    this.props.update(this);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  toJson() {
</span><span class='line'>    return { name: this.name, score: this.score };
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  render() {
</span><span class='line'>    if (!this.name) {
</span><span class='line'>      return (
</span><span class='line'>        &lt;div&gt;
</span><span class='line'>          &lt;h3&gt;No team set&lt;/h3&gt;
</span><span class='line'>          &lt;input type="text" ref="teamName" placeholder="Enter a name.." value={this.props.name}/&gt;
</span><span class='line'>          &lt;button onClick={this.setName}&gt;Set Name&lt;/button&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      );
</span><span class='line'>    } else {
</span><span class='line'>      return (
</span><span class='line'>        &lt;div&gt;
</span><span class='line'>          &lt;h3&gt;{this.name}&lt;/h3&gt;
</span><span class='line'>          &lt;button onClick={this.touchdown}&gt;Touch Down&lt;/button&gt;
</span><span class='line'>          &lt;button onClick={this.fieldGoal}&gt;Field Goal&lt;/button&gt;
</span><span class='line'>          &lt;h4&gt;Score: {this.score}&lt;/h4&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      );
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Defining the Scoreboard component</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import Team from './team.jsx';
</span><span class='line'>import React from 'react';
</span><span class='line'>
</span><span class='line'>export default class Scoreboard extends React.Component {
</span><span class='line'>  constructor(props) {
</span><span class='line'>    super(props);
</span><span class='line'>    this.homeTeam = {};
</span><span class='line'>    this.visitorTeam = {};
</span><span class='line'>    this.url = this.props.url;
</span><span class='line'>    this.submit = this.submit.bind(this);
</span><span class='line'>    this.updateTeam = this.updateTeam.bind(this);
</span><span class='line'>    this.submitted = false;
</span><span class='line'>    this.jsonPayload = null;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  submit(event) {
</span><span class='line'>    event.preventDefault();
</span><span class='line'>    this.submitted = true;
</span><span class='line'>    this.setState(this);
</span><span class='line'>    this.jsonPayload = JSON.stringify({ homeTeam: this.homeTeam.toJson(), visitorTeam: this.visitorTeam.toJson()});
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  updateTeam(team) {
</span><span class='line'>    if (team.props.home) {
</span><span class='line'>      this.homeTeam = team;
</span><span class='line'>    } else {
</span><span class='line'>      this.visitorTeam = team;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  render() {
</span><span class='line'>    var jsonInformation = this.submitted ? (&lt;div&gt;JSON payload: {this.jsonPayload}&lt;/div&gt;) : null;
</span><span class='line'>    return (
</span><span class='line'>      &lt;form onSubmit={this.submit}&gt;
</span><span class='line'>        &lt;div className="row"&gt;
</span><span class='line'>          &lt;div className="col-md-6"&gt;
</span><span class='line'>            &lt;h2&gt;Home Team&lt;/h2&gt;
</span><span class='line'>            &lt;Team home="true" update={this.updateTeam}&gt;&lt;/Team&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>          &lt;div className="col-md-6"&gt;
</span><span class='line'>            &lt;h2&gt;Visitor Team&lt;/h2&gt;
</span><span class='line'>            &lt;Team update={this.updateTeam}&gt;&lt;/Team&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        &lt;div className="row"&gt;
</span><span class='line'>          &lt;button type="submit"&gt;Submit&lt;/button&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        {jsonInformation}
</span><span class='line'>      &lt;/form&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now you&rsquo;ll see, theres no way we tell React to attach to a DOM node to attach our components to the browser DOM.</p>

<p>This happens by the bootstrapping code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import React from 'react';
</span><span class='line'>import ReactDOM from 'react-dom';
</span><span class='line'>import Scoreboard from '../component/scoreboard.jsx';
</span><span class='line'>
</span><span class='line'>window.app = (function() {
</span><span class='line'>  return ReactDOM.render(&lt;Scoreboard/&gt;, document.getElementById('react-scoreboard'));
</span><span class='line'>})();</span></code></pre></td></tr></table></div></figure>


<p>Now, React knows to use our <code>Scoreboard</code> component (the one that was imported) to attach it to the <code>react-scoreboard</code> DOM element with an id of <code>react-scoreboard</code>. Internally for the Scoreboard, it specifies it&rsquo;s render method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import Team from './team.jsx';
</span><span class='line'>// .. snipped code ..
</span><span class='line'>render() {
</span><span class='line'>  var jsonInformation = this.submitted ? (&lt;div&gt;JSON payload: {this.jsonPayload}&lt;/div&gt;) : null;
</span><span class='line'>  return (
</span><span class='line'>    &lt;form onSubmit={this.submit}&gt;
</span><span class='line'>      &lt;div className="row"&gt;
</span><span class='line'>        &lt;div className="col-md-6"&gt;
</span><span class='line'>          &lt;h2&gt;Home Team&lt;/h2&gt;
</span><span class='line'>          &lt;Team home="true" update={this.updateTeam}&gt;&lt;/Team&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        &lt;div className="col-md-6"&gt;
</span><span class='line'>          &lt;h2&gt;Visitor Team&lt;/h2&gt;
</span><span class='line'>          &lt;Team update={this.updateTeam}&gt;&lt;/Team&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>      &lt;div className="row"&gt;
</span><span class='line'>        &lt;button type="submit"&gt;Submit&lt;/button&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>      {jsonInformation}
</span><span class='line'>    &lt;/form&gt;
</span><span class='line'>  )
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Pros and Cons</h2>

<h3>Pros</h3>

<p><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">React Dev tools</a> &ndash; inspect react components, super handy.
Dev docs talk about how to think in react &ndash; giving the why before the what, really helped understand the concepts.</p>

<h3>Cons</h3>

<p>Dev tooling is not straight forward &ndash; you have to decide yourself.
Figuring how to plug in rendering steps between state changes. <code>this.setState({})</code> with some state information.</p>

<h1>Differences between the two</h1>

<p>The main difference I can see if how Angular 2 specifies its <code>selector</code> to find out how it attaches to a DOM element you specify.</p>

<p>React just follows using JSX to specify the component, which you can pass in properties.</p>

<p>Angular 2 takes the approach of keeping state and doing stateful checks from its Virtual DOM diff&#8217;ing. However, the templating directives you can use, like <code>*ngIf</code> requires handling a template of some sort, where as React, you can just use JavaScript conditionals to render your DOM.</p>

<h1>Conclusions</h1>

<p>I really like the approach React takes. I also feel like it is a year early to the Virtual DOM party, and Angular 2 is really trying to keep up.</p>

<p>As far as intuition and ease of development goes, React was definitely easier. Even with my previous Angular 2 knowledge, it still took me longer to get up and going.</p>

<p>To give Angular 2 a fair shot, it is still in Beta. However, if I were to start a project today, it would be in React, due to the huge community that is building, the tooling available, and being backed by Facebook, one of the utmost leaders in User inface design and performance.</p>

<p>I hope this short write up helps! If you have any questions, please drop a comment and we&rsquo;ll clear things up!</p>

<p>As a reminder, <a href="https://github.com/jbavari/scoreboard-form">here is all of the code</a> is available on Github, feel free to open an issue.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using brew to install old versions]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/12/using-brew-to-install-old-versions/"/>
    <updated>2015-12-12T13:50:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/12/using-brew-to-install-old-versions</id>
    <content type="html"><![CDATA[<p>I just wanted to share a quick little tidbit on how to install older brew versions.</p>

<p>I was having some issues with an older version of Elixir failing tests (1.0.1), and the latest version (1.1.1) is working fine.</p>

<p>Just running <code>brew install elixir</code> gets latest.</p>

<p>To get 1.0.1 installed, I first went to the <a href="https://github.com/Homebrew/homebrew">homebrew github repo</a>, looked at the <code>Library/Formula</code> folder, found the <code>elixir.rb</code> formula to install elixir, looked in the history, found 1.0.1, and then executed the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install https://raw.githubusercontent.com/Homebrew/homebrew/8506ced146655c24920f3cc5b20e6bc9e6e703cc/Library/Formula/elixir.rb</span></code></pre></td></tr></table></div></figure>


<p>That did it, I easily got 1.0.1 installed, and going back to 1.1.1 was super easy.</p>

<p>Hope this helps, enjoy! Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding PostgreSQL geometric type support to Elixir]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/07/adding-postgresql-geometric-type-support-to-elixir/"/>
    <updated>2015-12-07T18:04:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/07/adding-postgresql-geometric-type-support-to-elixir</id>
    <content type="html"><![CDATA[<p>In the last week or so, I&rsquo;ve had a blast playing around with basic Postgres <a href="http://www.postgresql.org/docs/9.4/static/datatype-geometric.html">geometric types</a> to do basic earth distance queries.</p>

<p>From my favorite blog, <a href="http://datachomp.com/archives/radius-queries-in-postgres/">Datachomp shows how to use radius queries in postgres</a> to find the closest place to get a burrito fix. Since I&rsquo;ve been on an <a href="http://elixir-lang.org/">Elixir</a> kick lately, I figured it was time to contribute back to the open source world by adding first class burrito, err, geometric type support.</p>

<h2>Initial reaction</h2>

<p>I immediately made an Ecto model trying to use the point type in my model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">LocationPoint</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="kn">use</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Web</span><span class="p">,</span> <span class="ss">:model</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">schema</span> <span class="s2">&quot;location_point&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:date</span><span class="p">,</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">DateTime</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:location</span><span class="p">,</span> <span class="ss">:point</span>
</span><span class='line'>    <span class="n">timestamps</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">@required_fields</span> <span class="err">~</span><span class="n">w</span><span class="p">(</span><span class="n">name</span> <span class="n">date</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">@optional_fields</span> <span class="err">~</span><span class="n">w</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">@doc</span> <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">  Creates a changeset based on the `model` and `params`.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">  If no params are provided, an invalid changeset is returned</span>
</span><span class='line'><span class="sd">  with no validation performed.</span>
</span><span class='line'><span class="sd">  &quot;&quot;&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">changeset</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">params</span> <span class="p">\\</span> <span class="ss">:empty</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">model</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">cast</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="nv">@required_fields</span><span class="p">,</span> <span class="nv">@optional_fields</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right away, when I ran the commands to retrieve this location from <code>iex</code>, it gave me some errors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="err">$</span> <span class="n">iex</span> <span class="o">-</span><span class="no">S</span> <span class="n">mix</span>
</span><span class='line'><span class="err">$</span> <span class="n">alias</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Repo</span>
</span><span class='line'><span class="err">$</span> <span class="n">alias</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">LocationPoint</span>
</span><span class='line'><span class="err">$</span> <span class="no">Repo</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="no">LocationPoint</span><span class="p">)</span>
</span><span class='line'><span class="err">$</span> <span class="o">**</span> <span class="p">(</span><span class="no">ArgumentError</span><span class="p">)</span> <span class="n">no</span> <span class="n">extension</span> <span class="n">found</span> <span class="n">for</span> <span class="n">oid</span> <span class="err">`</span><span class="m">600</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right away, I knew this mission was up to me to get point support into Postgrex.</p>

<p>In this post, I&rsquo;ll outline how to add type support to Postgres via the Elixir package, <a href="https://github.com/ericmj/postgrex">postgrex</a>. We will walk through adding the <code>Point</code> data type in Postgres.</p>

<p>This post will cover:</p>

<ul>
<li>How to see how postgres stores its types (built in and composite)</li>
<li>How postgrex does its type lookups</li>
<li>Finding the source type &ndash; adding it to postgres senders</li>
<li>Looking up postgres source code for data mapping</li>
<li>Adding new type <code>Point</code> type</li>
<li>Adding built in <code>Type</code> structs</li>
<li>Adding encode method</li>
<li>Adding decode method</li>
</ul>


<h1>How Postgres stores its types</h1>

<p>Postgres stores its types in a special system table called <code>pg_type</code> (<a href="http://www.postgresql.org/docs/9.4/static/catalog-pg-type.html">docs</a>). It defines a few things about the type:</p>

<ul>
<li>Its <code>typelem</code> &ndash; how the type is stored &ndash; array, or otherwise</li>
<li>Its <code>typsend</code> &ndash; Output conversion function (binary format), or 0 if none</li>
<li>Its <code>typarray</code> &ndash; an oid to another array type that has its send method</li>
</ul>


<h1>How Postgrex does type lookups</h1>

<p>Postgrex at it&rsquo;s core is a simple data adapter into PostgreSQL from Elixir. It&rsquo;s an awesome library, and if you&rsquo;re using <a href="https://github.com/elixir-lang/ecto">Ecto</a>, you&rsquo;re already using it!</p>

<p>First, let&rsquo;s look at how they are loading most types, by looking them up in the <code>pg_type</code> table in postgres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="c1">### BOOTSTRAP TYPES AND EXTENSIONS ###</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">@doc</span> <span class="no">false</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">bootstrap_query</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="p">{</span><span class="n">rngsubtype</span><span class="p">,</span> <span class="n">join_range</span><span class="p">}</span> <span class="o">=</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">version</span> <span class="o">&gt;=</span> <span class="p">{</span><span class="m">9</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">0</span><span class="p">}</span> <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="p">{</span><span class="s2">&quot;coalesce(r.rngsubtype, 0)&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;LEFT JOIN pg_range AS r ON r.rngtypid = t.oid&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    SELECT t.oid, t.typname, t.typsend, t.typreceive, t.typoutput, t.typinput,</span>
</span><span class='line'><span class="sd">           t.typelem, #{rngsubtype}, ARRAY (</span>
</span><span class='line'><span class="sd">      SELECT a.atttypid</span>
</span><span class='line'><span class="sd">      FROM pg_attribute AS a</span>
</span><span class='line'><span class="sd">      WHERE a.attrelid = t.typrelid AND a.attnum &gt; 0 AND NOT a.attisdropped</span>
</span><span class='line'><span class="sd">      ORDER BY a.attnum</span>
</span><span class='line'><span class="sd">    )</span>
</span><span class='line'><span class="sd">    FROM pg_type AS t</span>
</span><span class='line'><span class="sd">    #{join_range}</span>
</span><span class='line'><span class="sd">    WHERE</span>
</span><span class='line'><span class="sd">      t.typname::text = ANY ((#{sql_array(m.type)})::text[]) OR</span>
</span><span class='line'><span class="sd">      t.typsend::text = ANY ((#{sql_array(m.send)})::text[]) OR</span>
</span><span class='line'><span class="sd">      t.typreceive::text = ANY ((#{sql_array(m.receive)})::text[]) OR</span>
</span><span class='line'><span class="sd">      t.typoutput::text = ANY ((#{sql_array(m.output)})::text[]) OR</span>
</span><span class='line'><span class="sd">      t.typinput::text = ANY ((#{sql_array(m.input)})::text[])</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that under the hood, we&rsquo;re querying Postgres and asking it for it&rsquo;s types, so we can do OID lookups and call the appropriate encoder/decoder methods. From here, we can match up our newly added types encoding/decoding methods.</p>

<h1>Finding the source type &ndash; adding it to postgres senders</h1>

<p>Find information about the geometrics category:</p>

<p><code>SELECT * from pg_type where typcategory = 'G';</code></p>

<p>We will see the point type has an oid of 600, which is using a send specification of <code>point_send</code>. Other notable send types for geometries: <code>point_send lseg_send path_send box_send poly_send line_send circle_send</code>.</p>

<p>Thus, we&rsquo;ll update the send types in postgrex, located in the <code>binary.ex</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="nv">@senders</span> <span class="err">~</span><span class="n">w</span><span class="p">(</span><span class="n">boolsend</span> <span class="n">bpcharsend</span> <span class="n">textsend</span> <span class="n">varcharsend</span> <span class="n">byteasend</span>
</span><span class='line'>            <span class="n">int2send</span> <span class="n">int4send</span> <span class="n">int8send</span> <span class="n">float4send</span> <span class="n">float8send</span> <span class="n">numeric_send</span>
</span><span class='line'>            <span class="n">uuid_send</span> <span class="n">date_send</span> <span class="n">time_send</span> <span class="n">timetz_send</span> <span class="n">timestamp_send</span>
</span><span class='line'>            <span class="n">timestamptz_send</span> <span class="n">interval_send</span> <span class="n">enum_send</span> <span class="n">tidsend</span> <span class="n">unknownsend</span>
</span><span class='line'>            <span class="n">inet_send</span> <span class="n">cidr_send</span> <span class="n">macaddr_send</span> <span class="n">point_send</span>
</span><span class='line'>            <span class="p">)</span> <span class="o">++</span> <span class="nv">@oid_senders</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom, that gets us the oid to encode/decode off of!</p>

<h1>Looking up postgres source code for data mapping</h1>

<p>I hopped into the Postgres source code and looked up the struct type for point, <a href="https://github.com/postgres/postgres/blob/master/src/include/utils/geo_decls.h#L58-L62">found here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">typedef</span> <span class="k">struct</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span>    <span class="n">x</span><span class="p">,</span>
</span><span class='line'>        <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">Point</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great, its just two floats, no big deal.</p>

<h1>Adding the point struct</h1>

<p>Let&rsquo;s craft our Postgrex stuct type in <code>builtins.ex</code> then!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">defmodule</span> <span class="n">Postgrex</span><span class="p">.</span><span class="n">Point</span> <span class="k">do</span>
</span><span class='line'>  <span class="err">@</span><span class="n">moduledoc</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">Struct</span> <span class="k">for</span> <span class="n">Postgres</span> <span class="n">point</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">##</span> <span class="n">Fields</span>
</span><span class='line'>    <span class="o">*</span> <span class="err">`</span><span class="n">x</span><span class="err">`</span>
</span><span class='line'>    <span class="o">*</span> <span class="err">`</span><span class="n">y</span><span class="err">`</span>
</span><span class='line'>  <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">require</span> <span class="n">Decimal</span>
</span><span class='line'>  <span class="err">@</span><span class="n">type</span> <span class="n">t</span> <span class="o">::</span> <span class="o">%</span><span class="n">__MODULE__</span><span class="p">{</span><span class="nl">x:</span> <span class="kt">float</span><span class="p">,</span> <span class="nl">y:</span> <span class="kt">float</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">defstruct</span> <span class="p">[</span>
</span><span class='line'>    <span class="nl">x:</span> <span class="n">nil</span><span class="p">,</span>
</span><span class='line'>    <span class="nl">y:</span> <span class="n">nil</span><span class="p">]</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Adding the encode method</h1>

<p>Now since we are sending PostgreSQL binary data, we need to take our data and map it to it&rsquo;s binary form, via an <code>encode</code> method.</p>

<p>However, postgrex is going to do a type look up, based on the types that we used in that query above.</p>

<p>We&rsquo;ll add the methods to encode, that does some pattern matching to decipher we are getting the correct sender value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">def</span> <span class="n">encode</span><span class="p">(</span><span class="o">%</span><span class="n">TypeInfo</span><span class="p">{</span><span class="nl">type:</span> <span class="s">&quot;point&quot;</span><span class="p">,</span> <span class="nl">send:</span> <span class="s">&quot;point_send&quot;</span><span class="p">},</span> <span class="o">%</span><span class="n">Postgrex</span><span class="p">.</span><span class="n">Point</span><span class="p">{}</span> <span class="o">=</span> <span class="n">point</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">),</span>
</span><span class='line'>  <span class="k">do</span><span class="o">:</span> <span class="n">encode_point</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we are encoding, when a <code>TypeInfo</code> tuple is passed with type <code>point</code> and <code>send</code> <code>point_send</code>! Great, we just pass that to this method to parse out the two floats passed in the binary object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">defp</span> <span class="n">encode_point</span><span class="p">(</span><span class="o">%</span><span class="n">Postgrex</span><span class="p">.</span><span class="n">Point</span><span class="p">{</span><span class="nl">x:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">y</span><span class="p">}),</span>
</span><span class='line'>  <span class="k">do</span><span class="o">:</span> <span class="o">&lt;&lt;</span><span class="n">x</span><span class="o">::</span><span class="n">float64</span><span class="p">,</span> <span class="n">y</span><span class="o">::</span><span class="n">float64</span><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It just takes those two values, and serializes them down to their binary counterparts.</p>

<p>That now handles the test we&rsquo;ve got to keep us honest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">test</span> <span class="s">&quot;encode point&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">assert</span> <span class="p">[[</span><span class="o">%</span><span class="n">Postgrex</span><span class="p">.</span><span class="n">Point</span><span class="p">{</span><span class="nl">x:</span> <span class="o">-</span><span class="mi">97</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">100</span><span class="p">}]]</span> <span class="o">==</span> <span class="n">query</span><span class="p">(</span><span class="s">&quot;SELECT $1::point&quot;</span><span class="p">,</span> <span class="p">[</span><span class="o">%</span><span class="n">Postgrex</span><span class="p">.</span><span class="n">Point</span><span class="p">{</span><span class="nl">x:</span> <span class="o">-</span><span class="mi">97</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">100</span><span class="p">}])</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test as promised, takes a <code>Postgrex.Point</code> type, and encodes it to the binary form, and sends it off to Postgres. How beautiful.</p>

<h1>Adding the decode method</h1>

<p>Now, when we get binary values from Postgres, we need to map that to our <code>Point</code> type we&rsquo;ve created.</p>

<p>Adding the functions to <code>decode</code> in <code>binary.ex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">def</span> <span class="n">decode</span><span class="p">(</span><span class="o">%</span><span class="n">TypeInfo</span><span class="p">{</span><span class="nl">type:</span> <span class="s">&quot;point&quot;</span><span class="p">},</span> <span class="n">binary</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">),</span>
</span><span class='line'>  <span class="k">do</span><span class="o">:</span> <span class="n">decode_point</span><span class="p">(</span><span class="n">binary</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># ..snip..</span>
</span><span class='line'>
</span><span class='line'><span class="n">defp</span> <span class="n">decode_point</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="n">x</span><span class="o">::</span><span class="n">float64</span><span class="p">,</span> <span class="n">y</span><span class="o">::</span><span class="n">float64</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">%</span><span class="n">Postgrex</span><span class="p">.</span><span class="n">Point</span><span class="p">{</span><span class="nl">x:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">y</span><span class="p">}</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The real meat and potatoes is, receiving our binary parameter, mapping its individual segmets as two floats, sized 8 bytes, and then with the pattern matching mapping those to our <code>Postgrex.Point</code> struct. QED.</p>

<p>And the test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">test</span> <span class="s">&quot;decode point&quot;</span><span class="p">,</span> <span class="n">context</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">assert</span> <span class="p">[[</span><span class="o">%</span><span class="n">Postgrex</span><span class="p">.</span><span class="n">Point</span><span class="p">{</span><span class="nl">x:</span> <span class="o">-</span><span class="mi">97</span><span class="p">,</span> <span class="nl">y:</span> <span class="mi">100</span><span class="p">}]]</span> <span class="o">==</span> <span class="n">query</span><span class="p">(</span><span class="s">&quot;SELECT point(-97, 100)::point&quot;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>  <span class="n">assert</span> <span class="p">[[</span><span class="o">%</span><span class="n">Postgrex</span><span class="p">.</span><span class="n">Point</span><span class="p">{</span><span class="nl">x:</span> <span class="o">-</span><span class="mf">97.5</span><span class="p">,</span> <span class="nl">y:</span> <span class="mf">100.1</span><span class="p">}]]</span> <span class="o">==</span> <span class="n">query</span><span class="p">(</span><span class="s">&quot;SELECT point(-97.5, 100.1)::point&quot;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>Once I finally figured out what pieces were what, I was able to run and create the point type, its mappings, and its senders it required, easily mapping to the struct in Elixir.</p>

<p>I plan to keep working on postgrex, to add first class support for Postgres geometric types.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Scoreboard Project]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/04/the-scoreboard-project/"/>
    <updated>2015-12-04T17:22:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/04/the-scoreboard-project</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been wanting to dig more into some technologies I&rsquo;ve been wanting to explore and gain more experience. Not only this, but I wanted to make sure my dev workflow was still improving, my tools were getting sharpened, and I was re-establishing the best practices as much as I could.</p>

<p>Those specific technologies I wanted to dig into was:</p>

<ul>
<li>Building a CLI in Ruby, using <a href="https://github.com/erikhuda/thor">Thor</a></li>
<li>A <a href="http://sinatrarb.com">Sinatra</a> Modular API</li>
<li>Solifying <a href="https://github.com/jeremyevans/sequel">Sequel</a> Model usage and JSON serialization</li>
<li>Building a dashboard using <a href="https://github.com/Shopify/dashing">Dashing</a></li>
<li>Diving more into <a href="https://github.com/bbatsov/rubocop">Rubocop</a> for Ruby static code analysis</li>
<li>Automated Code Review using <a href="http://codeclimate.com">CodeClimate</a></li>
</ul>


<p>I found a way to connect all the dots in what I&rsquo;m calling the scoreboard project. I chose these technologies because it would let me shine up my ruby/sql skills without a framework carrying me the way. (Although they mostly did anyway!)</p>

<p>This blog post will go over the idea of making an API around scoreboards. There will be a simple CLI tool to gather scores on &lsquo;games&rsquo;. Those scores will be sent to the API, to store in Postgres. The dashboard project will then pull these values from postgres and display them in an easy to view manner.</p>

<h2>This post</h2>

<p>With this post, i&rsquo;ll go over the individual pieces of the project, the interesting tidbits of each one, and finally go over a short retrospective over the entire project.</p>

<p>In entire time, the project took about a day and a half. It was fun, and I really enjoyed the experience over all.</p>

<h2>The pieces</h2>

<ul>
<li><a href="https://github.com/jbavari/scoreboard-cli">Scoreboard CLI</a></li>
<li><a href="https://github.com/jbavari/scoreboard-api">Scoreboard API</a></li>
<li><a href="https://github.com/jbavari/scoreboard-dashboard">Scoreboard Dashboard</a></li>
<li>Scoreboard Mobile App (coming soon)</li>
</ul>


<p>All of the projects are listed on my github profile. I&rsquo;ve been trying to keep most issues in the github repo&rsquo;s issue page for each respective project.</p>

<p>All of the projects are checked by CodeClimate, and I&rsquo;ve been trying to keep up with rubocop&rsquo;s rules on these as I go.</p>

<h2>Scoreboard CLI</h2>

<p>The idea for the CLI was to prompt the user for a home team and visitor team, then collect data about getting a touch down for the home team, for example: <code>h:td</code>.</p>

<p>It would keep prompting for more scoring plays until the user gives a SIGTERM or hits CTRL+D.</p>

<p>First I started by reading up on Thor, which was an absolute pleasure to work with. You can download it via <code>gem install scoreboard</code>.</p>

<p>To make it available via command line, I added this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">bindir</span>        <span class="o">=</span> <span class="s2">&quot;bin&quot;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">executables</span>   <span class="o">=</span> <span class="n">spec</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^bin/}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in <code>bin/scoreboard</code> <a href="https://github.com/jbavari/scoreboard-cli/blob/master/bin/scoreboard">link</a>, we just require in our CLI and run it with the arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;../lib/scoreboard/cli&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">cli</span> <span class="o">=</span> <span class="ss">Scoreboard</span><span class="p">:</span><span class="ss">:Cli</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">cli</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="no">ARGV</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="k">raise</span> <span class="n">e</span> <span class="k">if</span> <span class="vg">$DEBUG</span>
</span><span class='line'>  <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>  <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A note on the SIGTERM exception handling</h3>

<p>If you see in my <code>STDIN.each_line</code> loop where I read in scoring entries, <a href="https://github.com/jbavari/scoreboard-cli/blob/master/lib/scoreboard/cli.rb#L47">you will see</a> I rescue all Exception. This could be improved to find the exact SIGTERM exception is being thrown, but for simplicity, I left it catching the general exception.</p>

<h2>Scoreboard API</h2>

<p>The API has a few paths, based on the <code>/api/v1</code> namespace for requests.</p>

<p>You can access its teams or the entire scoreboard, via <code>GET /api/v1/teams</code> or <code>GET /api/v1/scores</code>. You can see the core <a href="https://github.com/jbavari/scoreboard-api/blob/master/application.rb">Sinatra Application</a> on github.</p>

<p>It was absolutely easy to set up the <a href="https://github.com/jbavari/scoreboard-api/tree/master/migrations">Sequel migrations</a> to define the team table and the scoreboard table in postgres.</p>

<p>The main tying point was getting the Sequel models to serialize, which was solved in another blog post.</p>

<h2>Scoreboard Dashboard</h2>

<p>Dashing was really easy to get started, a project set up, and out the gate.</p>

<p>First I had to include Sequel to get me my data, which I included an <code>Api</code> model to ease the SQL bridge for me.</p>

<p>The main point here was the <code>scoreboard.rb</code> file which was scheduled to run every 5 seconds, gather data from some crafty queries, and send that data to the dashboard. Other than the HTML markup, this was the chunky part of it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sequel&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">DB</span> <span class="o">=</span> <span class="no">Sequel</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;postgres://localhost/scoreboard&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">scoreboard</span> <span class="o">=</span> <span class="no">DB</span><span class="o">[</span><span class="ss">:scoreboard</span><span class="o">]</span>
</span><span class='line'><span class="n">team</span> <span class="o">=</span> <span class="no">DB</span><span class="o">[</span><span class="ss">:team</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">send_event</span><span class="p">(</span><span class="s1">&#39;games-played&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">value</span><span class="p">:</span> <span class="n">scoreboard</span><span class="o">.</span><span class="n">count</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">teams_played</span>
</span><span class='line'>  <span class="no">DB</span><span class="o">[&lt;&lt;-</span><span class="no">eos</span>
</span><span class='line'><span class="sh">      select</span>
</span><span class='line'><span class="sh">        sum(value)::int as value,</span>
</span><span class='line'><span class="sh">        label</span>
</span><span class='line'><span class="sh">      from (</span>
</span><span class='line'><span class="sh">        select count(home_id) as value, name as label from team inner join scoreboard on team.id = scoreboard.home_id group by scoreboard.home_id, team.name</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        UNION ALL</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        select count(visitor_id) as value, name as label from team inner join scoreboard on team.id = scoreboard.visitor_id group by scoreboard.visitor_id, team.name</span>
</span><span class='line'><span class="sh">      ) sub</span>
</span><span class='line'><span class="sh">      group by value, label</span>
</span><span class='line'><span class="sh">      order by value desc</span>
</span><span class='line'><span class="no">    eos</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">team_scoreboard</span>
</span><span class='line'>  <span class="no">DB</span><span class="o">[&lt;&lt;-</span><span class="no">eos</span>
</span><span class='line'><span class="sh">      select </span>
</span><span class='line'><span class="sh">        s.id,</span>
</span><span class='line'><span class="sh">        t.name as home_team, </span>
</span><span class='line'><span class="sh">        t2.name as visitor_team, </span>
</span><span class='line'><span class="sh">        home_score, </span>
</span><span class='line'><span class="sh">        visitor_score </span>
</span><span class='line'><span class="sh">      from team t </span>
</span><span class='line'><span class="sh">      inner join scoreboard s on s.home_id = t.id </span>
</span><span class='line'><span class="sh">      inner join team t2 on t2.id = s.visitor_id</span>
</span><span class='line'><span class="sh">      limit 10;</span>
</span><span class='line'><span class="no">    eos</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">SCHEDULER</span><span class="o">.</span><span class="n">every</span> <span class="s1">&#39;5s&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">teams</span> <span class="o">=</span> <span class="n">teams_played</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:label</span> <span class="o">=&gt;</span> <span class="n">item</span><span class="o">[</span><span class="ss">:label</span><span class="o">]</span><span class="p">,</span> <span class="ss">:value</span> <span class="o">=&gt;</span> <span class="n">item</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">send_event</span><span class="p">(</span><span class="s1">&#39;games-played&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">value</span><span class="p">:</span> <span class="n">scoreboard</span><span class="o">.</span><span class="n">count</span> <span class="p">})</span>
</span><span class='line'>  <span class="n">send_event</span><span class="p">(</span><span class="s1">&#39;teams&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">items</span><span class="p">:</span> <span class="n">teams</span> <span class="p">})</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Scoreboard: </span><span class="si">#{</span><span class="n">team_scoreboard</span><span class="o">.</span><span class="n">to_a</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">send_event</span><span class="p">(</span><span class="s1">&#39;scoreboard&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">items</span><span class="p">:</span> <span class="n">team_scoreboard</span><span class="o">.</span><span class="n">to_a</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Retrospective</h1>

<ul>
<li>What went right</li>
<li>What went wrong</li>
<li>What could be improved</li>
</ul>


<h2>What went right</h2>

<ul>
<li>The CLI came together smoothly. Thor was easy to get running.</li>
<li>Getting data to post to the API was a breeze</li>
<li>Sinatra and Sequel were easy to hoist up a simple API to take POST data and serve GET requests as JSON</li>
<li>Getting data into the dashboard was SUPER easy with Sequel, no need to do the ORM dance</li>
<li>Dashing was easy to create my own scoreboard component, using the <code>data-</code> type DOM attributes</li>
</ul>


<h2>What went wrong</h2>

<ul>
<li>Had some issues handling SIGTERM in CLI</li>
<li>CLI still doesnt validate input</li>
<li>API for Sinatra was a little difficult to get JSON serialization off the bat</li>
<li>Dashing is very &lsquo;opinionated&rsquo; and doesnt give you more room to fit into an existing app</li>
<li>No tests were made</li>
<li>Nothing is deployed to servers yet</li>
</ul>


<h2>What could be improved</h2>

<ul>
<li>Minitest suite for CLI, API, and the Dashboard</li>
<li>Dashboard process tasks could be broken out to be more DRY</li>
<li>CLI needs to check and validate input</li>
<li>API needs to add in rollbar, new relic, or other metrics to help find errors</li>
<li>Deploy all the things!</li>
</ul>


<h1>Future plans</h1>

<p>The plan is to keep working on this project and continue improving tooling and getting other best practices in place. Finally, ship it to digital ocean and enjoy the conveniences they provide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using JSON serializers in Sinatra]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/04/using-json-serializers-in-sinatra/"/>
    <updated>2015-12-04T11:17:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/04/using-json-serializers-in-sinatra</id>
    <content type="html"><![CDATA[<p>I ran into a quick little issue with serializing some of my <a href="https://github.com/jeremyevans/sequel">Sequel</a> models.</p>

<p>The <a href="http://sequel.jeremyevans.net/rdoc-plugins/classes/Sequel/Plugins/JsonSerializer.html">official JSON serializer docs</a> are great, I just wanted to shine more light on the issue.</p>

<p>If you&rsquo;re using Sequel models, just throw in the quick line of <code>plugin :json_serializer</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Get our database connection</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;./db&quot;</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ScoreboardApi</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Team</span> <span class="o">&lt;</span> <span class="ss">Sequel</span><span class="p">:</span><span class="ss">:Model</span><span class="p">(</span><span class="ss">:team</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plugin</span> <span class="ss">:json_serializer</span>
</span><span class='line'>    <span class="n">serialize_attributes</span> <span class="ss">:json</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, you just use the Sinatra contrib gem to have it json serializer attach:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Web framework</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;sinatra&quot;</span><span class="p">,</span> <span class="s2">&quot;1.4.6&quot;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="s2">&quot;sinatra/base&quot;</span>
</span><span class='line'><span class="c1"># Sinatra addons - JSON, Namespace</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;sinatra-contrib&quot;</span><span class="p">,</span> <span class="s2">&quot;1.4.6&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set up your API routes and spit out JSON:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;sinatra/base&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;sinatra/json&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;sinatra/namespace&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;./models/scoreboard&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;./models/team&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">ScoreboardApi</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">App</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class='line'>    <span class="n">register</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Namespace</span>
</span><span class='line'>    <span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">disable</span> <span class="ss">:method_override</span>
</span><span class='line'>      <span class="n">disable</span> <span class="ss">:static</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">set</span> <span class="ss">:sessions</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">:httponly</span>     <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">:secure</span>       <span class="o">=&gt;</span> <span class="n">production?</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">:expire_after</span> <span class="o">=&gt;</span> <span class="mi">31557600</span><span class="p">,</span> <span class="c1"># 1 year</span>
</span><span class='line'>          <span class="ss">:secret</span>       <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;SESSION_SECRET&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Deflater</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">namespace</span> <span class="s2">&quot;/api/v1&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="s2">&quot;/scores&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">json</span> <span class="ss">:scoreboard</span> <span class="o">=&gt;</span> <span class="no">Scoreboard</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">get</span> <span class="s2">&quot;/teams&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">json</span> <span class="ss">:teams</span> <span class="o">=&gt;</span> <span class="no">Team</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8221;s all folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Safari 9 Force Touch API]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/03/playing-with-safari-9-force-touch-api/"/>
    <updated>2015-12-03T10:46:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/03/playing-with-safari-9-force-touch-api</id>
    <content type="html"><![CDATA[<p>I just got the new Macbook Pro not too long ago and noticed they had this intimately named featured called Force Touch.</p>

<p>Force touch, as it sounds, lets you touch things more <em>intimately</em>. The gist is this &ndash; there are sensors on the new touch pad that let you determine how hard the touch pad is touched, and has some API into that.</p>

<p>I admit, the API is kinda just for fun since only Safari 9 and new Macbooks have the feature. Still, I wanted to play more with ES6 and create a little API wrapper to make it easier and let this feature name to be a little less creepy.</p>

<p>After a little googling, I found an awesome <a href="http://www.joshuakehn.com/2015/10/22/using-new-force-touch-apis-in-javascript.html">blog post by Joshua Kehn</a> that detailed more about using Force touch. I wanted to make a quick wrapper around it to do some fun effects and animations.</p>

<p>The idea is &ndash; we&rsquo;ll have an API called <code>TheForce</code> that we can attach handlers to for fun visual effects.</p>

<p>Joshua&rsquo;s demo had a box that when tapped and applying pressure, padding would be increased. I took <a href="https://gist.github.com/joshkehn/3ed6b535408162fe94ae">his gist</a> and turned it into an ES6 module. (See the <a href="http://www.joshuakehn.com/2015/10/22/using-new-force-touch-apis-in-javascript.html#demo">demo</a>)</p>

<h2>The API</h2>

<p>I wrote it up last night in a quick hurry. The gist is this:</p>

<ul>
<li>Attach to a DOM element</li>
<li>Apply a glow to the element based applied pressure to touchpad</li>
</ul>


<p>Code to attach a button named <code>you</code>, and trigger it automatically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">luke</span> <span class="o">=</span> <span class="nx">TheForce</span><span class="p">.</span><span class="nx">beWith</span><span class="p">(</span><span class="s1">&#39;you&#39;</span><span class="p">).</span><span class="nx">alter</span><span class="p">({</span><span class="s1">&#39;boxShadow&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!--</span> <span class="nx">luke</span><span class="p">.</span><span class="nx">alter</span><span class="p">(</span><span class="s1">&#39;boxShadow&#39;</span><span class="p">);</span> <span class="o">--&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Respect yourself]]></title>
    <link href="http://jbavari.github.io/blog/2015/11/27/respect-yourself/"/>
    <updated>2015-11-27T21:58:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/11/27/respect-yourself</id>
    <content type="html"><![CDATA[<p>I&rsquo;m writing this post as a memoir for myself, a retrospect of sorts. I read <a href="http://sethgodin.typepad.com/seths_blog/2015/11/unconscious-consumption.html">Seth Godins blog about Unconscious consumption</a> and that post inspired me to write this post.</p>

<p>In the last 3 years, amazing events have unfolded. I helped create a start up, <a href="http://raisemore.com">RaiseMore</a>. I moved to Boulder, Colorado. I got a job at Ionic. I met a strong, amazing, beautiful woman who is my girlfriend.</p>

<p>I trained jiu-jitsu 4-5 times a week, I kept working on my strength, and trying to inspire others to do the same. I was striving to always read self-help books, watching informational videos, TED talks, ignite talks, challenging and pushing myself, and helping others grow.</p>

<p>All these new and exciting things kept happening to me. Many times before, I&rsquo;ve asked myself, &lsquo;how did I get so lucky?&rsquo;. Things just had a snowball effect and kept getting better and better!</p>

<p>I&rsquo;d like to think what attracted all these amazing things into my life was from these advancements.</p>

<p>However, something happened during these last 4 months that really threw me in a rut. I developed a poor attitude. I started thinking I was a victim. I no longer work for the company that I had looked up to for so long.</p>

<p>As I sit here now and reflect on the last few months, I know I&rsquo;ve made my fair share of mistakes. I take full responsibility for that. And due to some of those mistakes, I&rsquo;m unemployed (and looking for opportunities!) and I know it&rsquo;s my own fault.</p>

<p>I&rsquo;d like to stop and take a minute to deep dive and retrospect on what happened. I know, deep in my heart, that it all changed when <em>I stopped respecting myself and making my personal growth a priority</em>.</p>

<p>I&rsquo;m realizing that while all these good things were occurring, one thing remained constant &ndash; <em>I put myself and my personal growth first</em>.</p>

<p>I&rsquo;d like to deep dive into what really happened, and discover the why.</p>

<h2>Deep diving</h2>

<p>Questions to ask:</p>

<ul>
<li>What did you do right?</li>
<li>What did you do wrong?</li>
<li>What can you do better?</li>
</ul>


<h3>What did I do right?</h3>

<p>In January, I was jumping head first into the Ionic CLI. I was familiar with Node.js, but wasn&rsquo;t nearly at the level I wanted to be at. So I jumped head first into blogs, training courses, books, and more.</p>

<p>I learned a ton by failing forward, bouncing ideas off of others, and most importantly, <em>maintaining a healthy work life balance</em>.</p>

<p>In March, I came up with the crazy idea to make the Ionic CLI easier to consume by almost any user by just point/clicking. In my free time after working on the Ionic CLI, I started cranking out <a href="http://lab.ionic.io">Ionic Lab</a> &ndash; that would do just that.</p>

<p>It was so freeing to use my creative side and use my intuition, listening to myself as I craved to learn more about Node.js and <a href="http://electron.github.io">Electron</a>!</p>

<p>After demoing Ionic Lab to the Ionic team, they were convinced this was a tool that could open the door to more developers and really improve the tooling. Thus, I was instructed to work on it full time. Such a joy!</p>

<p>Then it hit, this thing had to ship. I had to really buckle down and work out the final kinks in integrating Cordova fully into Ionic Lab, which took me down rabbit holes into discovering more about Electron than I wanted to know, fixing stdio errors and things that occurred deep in Cordova library code.</p>

<p>Once we shipped out Ionic Lab in July, I was told to focus on Ionic 2. The rest of the team had been heads down working on the codebase since March, I was the new guy, so I had to really step it up and put in the time to learn Angular 2, TypeScript, ES6, Webpack, and all the other new ground to cover.</p>

<p>It was exciting once again to jump head first into learning and exploration. But something happened that I did not expect.. I became a cynic.</p>

<h4>What did I do wrong?</h4>

<p>I think it wasn&rsquo;t until after July that things started to slow down and my personal happiness started to decline. I started working more hours (60 hours was the minimum). I stayed up late working most every night. I slept less. I started working out less (I gained 10-20 lbs). I started putting myself <em>and my personal growth</em> last.</p>

<p>I stopped calling my friends. I stopped reaching out to my support group as much. I wasn&rsquo;t maintaining my happy upbeat attitude I&rsquo;ve been told has been so inspiring.</p>

<p>I started putting work first. I started accepting others views of myself. I stopped valuing my work, my time, and my efforts to put that towards a company that at the end of the day, only wanted more and more. We all know what this leads to, <em>burn out</em>.</p>

<p>This all was boiling down to the AngularConnect conference, where we planned to unveil Ionic 2 to the European crowds. I was given a hefty task of learning all that was Ionic 2, adding cross platform functionality in Ionic 2, adjusting the Ionic CLI for v2, helping curate content for a workshop at the conference, as well as building the first Ionic v2 app, <a href="http://github.com/driftyco/ionic-conference-app">the Ionic conference app</a>.</p>

<p>All this was going down and other life issues arise, as they do. My older (15y old) dog was getting worse by the day. My girlfriend was not happy that I was putting her second to work. My friends stopped calling me. My shoulder got injured. I lost confidence in my work because I was burning out.</p>

<p>Then, a personal goal I had set didn&rsquo;t get delivered to a group of users I was really wanted to, the Windows Ionic CLI users.</p>

<p>This hurt. Failure when placed heavy, can hurt. It hurt even more when I was putting work first, and myself last.</p>

<p>Looking more hopefully at the situation..</p>

<h4>What can I do better?</h4>

<p>First off &ndash; be honest with myself. Tell others I need a helping hand when needed. Going forward, I will look out for myself better (we all know employers want employees that can look out for themselves).</p>

<p>Don&rsquo;t accept others views of myself unless I first believe them!</p>

<p>Most importantly, respecting myself. I should always take the time to have a 1 on 1 with myself and really get a sense of where I&rsquo;m at. If I need a break, use that vacation that we are so lucky to have!</p>

<p>We tend to forget that if we dont build ourselves up, the world surely wont. (Unless you are lucky enough to have awesome friends that stick through it thick and thin). Burnout happens when you don&rsquo;t let your support structure help put out of the flame before you become a pile of ash.</p>

<p>So please, take this time to evaluate yourself and your needs. Be honest with yourself. Focus on caring for yourself. Be compassionate to yourself. Let yourself make mistakes, but learn from them.</p>

<p>Focus on the positive. Surround yourself with upbeat people, ditch the negativity, and remind yourself that your future is in your hands. Take it.</p>

<p>Don&rsquo;t forget that the only difference between a victor and a victim, is their mindset.</p>

<p>Remember, there is no luck, only the work you put in and the effect you see afterwards.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic 2.0 Generators - Services]]></title>
    <link href="http://jbavari.github.io/blog/2015/11/06/ionic-2-dot-0-generators-services/"/>
    <updated>2015-11-06T01:23:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/11/06/ionic-2-dot-0-generators-services</id>
    <content type="html"><![CDATA[<p>This is the second post in a series covering the new Ionic Generators in Ionic 2.0. In the <a href="http://jbavari.github.io/blog/2015/11/05/using-ionic-2-dot-0-generators/">first post</a>, we discussed generating pages, let&rsquo;s focus now on generating some services to consume some JSON data via an http request.</p>

<h2>Get the tools</h2>

<p>Run this to get started:</p>

<figure class='code'><figcaption><span>Install Ionic CLI and start an Ionic application</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g ionic@alpha
</span><span class='line'>ionic start MyIonic2App tabs --v2
</span><span class='line'><span class="nb">cd </span>MyIonic2App
</span></code></pre></td></tr></table></div></figure>


<h2>Generate the service</h2>

<p><code>ionic g injectable MyDataService</code></p>

<p>You should see the service:</p>

<figure class='code'><figcaption><span>Run generate command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Development/testing/MyIonic2App<span class="nv">$ </span>ionic g injectable MyDataService
</span><span class='line'>√ Create www/app/my-data-service/my-data-service.js
</span></code></pre></td></tr></table></div></figure>


<p>The basic blueprint of the generated service is as follows:</p>

<figure class='code'><figcaption><span>Generated Data Service</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">Injectable</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;angular2/angular2&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">Http</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;angular2/http&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">MyDataService</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">http</span><span class="o">:</span> <span class="nx">Http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">http</span> <span class="o">=</span> <span class="nx">http</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">retrieveData</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Here, we&#39;re going to get a JSON data file, use the `map` call to parse json</span>
</span><span class='line'>    <span class="c1">// and finally subscribe to the observable and set our data</span>
</span><span class='line'>    <span class="c1">//to the value it provides once the http request is complete.</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;path/to/data.json&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span> <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error with http.get: &#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wiring it in to be used</h2>

<p>Adjust <code>www/app/app.js</code> to import the data service, as well as provide it for all of its components:</p>

<figure class='code'><figcaption><span>www/app/app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">MyDataService</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./my-data-service/my-data-service&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">App</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;ion-nav [root]=&quot;root&quot;&gt;&lt;/ion-nav&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">providers</span><span class="o">:</span> <span class="p">[</span><span class="nx">Friends</span><span class="p">,</span> <span class="nx">MyDataService</span><span class="p">]</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use the service</h2>

<p>We&rsquo;ll use the tabs starter dashboard page to pull data.</p>

<p>Let&rsquo;s modify <code>www/app/dash/dash.ts</code> &ndash; adding an import for <code>MyDataService</code>, adding <code>MyDataService</code> to the constructore as an injected dependency, and finally adding the call to <code>retrieveData</code> in the constructore method.</p>

<figure class='code'><figcaption><span>www/app/dash/dash.ts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">Page</span><span class="p">,</span> <span class="nx">NavController</span><span class="p">,</span> <span class="nx">ViewController</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ionic/ionic&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">MyDataService</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../my-data-service/my-data-service&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">About</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../about/about&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">Page</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;app/dash/dash.html&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">Dash</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">nav</span><span class="o">:</span> <span class="nx">NavController</span><span class="p">,</span> <span class="nx">view</span><span class="o">:</span> <span class="nx">ViewController</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">MyDataService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">nav</span> <span class="o">=</span> <span class="nx">nav</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">view</span> <span class="o">=</span> <span class="nx">view</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">data</span><span class="p">.</span><span class="nx">retrieveData</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">goToAboutPage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">nav</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">About</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Additional information</h2>

<p>If you&rsquo;ve used Angular 1, you&rsquo;re probably familiar with promises to return your data from http requests.</p>

<p>Under the hood of Angular 2 lies <a href="https://github.com/Reactive-Extensions/RxJS">RxJs</a> that builds on promises, focusing on being repeatable.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ionic 2.0 Generators]]></title>
    <link href="http://jbavari.github.io/blog/2015/11/05/using-ionic-2-dot-0-generators/"/>
    <updated>2015-11-05T21:49:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/11/05/using-ionic-2-dot-0-generators</id>
    <content type="html"><![CDATA[<p>At the time of writing this, Ionic 2.0 is still in alpha.</p>

<p>Ionic 2.0 builds on a ton of new technologies, such as Angular v2, TypeScript (with decorators), and ES6. If you&rsquo;ve never dabbled in these technologies, you can use the generators available in the <a href="http://npmjs.org/package/ionic"><code>ionic-cli</code></a> to get ramped up quickly!</p>

<h2>Getting started</h2>

<p>First, install the <code>alpha</code> version of the Ionic CLI: <code>npm install -g ionic@alpha</code>, currently version 2.0.0-alpha.19.</p>

<p>Start an app with the tabs template: <code>ionic start MyIonic2App tabs --v2</code>.</p>

<p>Change directories and serve the app in the browser: <code>cd MyIonic2App &amp;&amp; ionic serve</code>.</p>

<p>You&rsquo;ll see, we&rsquo;ve got a basic tabs starter now avilable at <code>MyIonic2App</code> directory.</p>

<h2>Generating a few pages</h2>

<p>Let&rsquo;s say we want to link to a new page, &lsquo;About&rsquo;, from one of the tabs. First, let&rsquo;s generate our page with this command: <code>ionic generate page About</code>. NOTE: You can also use the generate alias, <code>ionic g</code>.</p>

<p>You&rsquo;ll see a few files added:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Development/testing/MyIonic2App<span class="nv">$ </span>ionic g page About
</span><span class='line'>√ Create www/app/about/about.html
</span><span class='line'>√ Create www/app/about/about.js
</span><span class='line'>√ Create www/app/about/about.scss
</span></code></pre></td></tr></table></div></figure>


<h2>Adding link on view to the About page</h2>

<p>Let&rsquo;s add the link to the main tab page in <code>www/app/dash/dash.html</code>, via the <code>(click)</code> handler on an anchor, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;ion-card&gt;
</span><span class='line'>  &lt;ion-card-header&gt;
</span><span class='line'>    Go to about page
</span><span class='line'>  &lt;/ion-card-header&gt;
</span><span class='line'>  &lt;ion-card-content&gt;
</span><span class='line'>    &lt;button <span class="o">(</span>click<span class="o">)=</span><span class="s2">&quot;goToAboutPage()&quot;</span>&gt;About this&lt;/button&gt;
</span><span class='line'>  &lt;/ion-card-content&gt;
</span><span class='line'>&lt;/ion-card&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Navigating to the page</h2>

<p>Modify the Dashboard TypeScript file (<code>www/app/dash/dash.ts</code>) to import our new about page, add the click event handler, and push the page on the nav controller, all like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">Page</span><span class="p">,</span> <span class="nx">NavController</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ionic/ionic&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">About</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../about/about&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">Page</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;app/dash/dash.html&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">Dash</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">nav</span><span class="o">:</span> <span class="nx">NavController</span><span class="p">,</span> <span class="nx">view</span><span class="o">:</span> <span class="nx">ViewController</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">nav</span> <span class="o">=</span> <span class="nx">nav</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">view</span> <span class="o">=</span> <span class="nx">view</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">goToAboutPage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">nav</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">About</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Try it out!</h2>

<p>Look in your browser, you should have an anchor available to click/tap that will then navigate you to the About page, fresh for you to get working!</p>

<p>Here&rsquo;s a GIF of what it looks like:</p>

<p><img class="[pic]" src="http://jbavari.github.io/images/IonicV2Generators.gif" title="[250] [250] [Ionic 2.0- Page generator example]" ></p>

<p>I&rsquo;d like to also note, Ionic 2 is much smoother than a GIF would allow.</p>

<h2>Wiring up sass</h2>

<p>If you want to use the custom sass styles on the about page, first wire in the <code>about.scss</code> page in your <code>www/app/app.scss</code> sass file, like so: <code>@import 'about/about';</code>.</p>

<h2>A quick note on naming conventions</h2>

<p>For Ionic 2.0, we&rsquo;ve contributed to a <a href="https://en.wikipedia.org/wiki/Naming_convention_%28programming%29#Multiple-word_identifiers">naming convention</a> of kabob-casing for file names (my-about-page.html) and css classes (.my-about-page), and using PascalCasing for JavaScript classes in ES6 / TypeScript (MyAboutPage).</p>

<h2>Other generators</h2>

<p>Check out all the generators available: <code>ionic g --list</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Development/testing/MyIonic2App<span class="nv">$ </span>ionic g --list
</span><span class='line'>Available generators:
</span><span class='line'> * component
</span><span class='line'> * directive
</span><span class='line'> * injectable
</span><span class='line'> * page
</span><span class='line'> * page-login
</span><span class='line'> * page-sidemenu
</span><span class='line'> * page-signup
</span><span class='line'> * pipe
</span><span class='line'> * tabs
</span></code></pre></td></tr></table></div></figure>


<h1>Final words</h1>

<p>We hope you find the generators help you get started with ramping up quickly and building some awesome Ionic applications! Enjoy.</p>

<p>We&rsquo;d love your feedback, drop us a line at <a href="https://github.com/driftyco/ionic2/issues">Ionic v2 Github Issues</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular 2 and ng-model]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/21/angular-2-and-ng-model/"/>
    <updated>2015-10-21T23:00:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/21/angular-2-and-ng-model</id>
    <content type="html"><![CDATA[<p>Angular 2 introduces <code>ng-model</code> from Angular 1 in a completely different manner. Due to this, I wanted to make a quick post on how to use Angular 2&rsquo;s <code>ng-model</code> to build components that alert its parents app/component of changes.</p>

<p>I&rsquo;m going to use the <a href="https://github.com/driftyco/ionic-conference-app">Ionic 2 conference app</a> as an example.</p>

<p>In this post, we&rsquo;ll look at the schedule page in the app and see how it uses the <code>ion-search-bar</code> to update its <code>searchQuery</code> to filter out sessions from the schedule when the user changes the search input.</p>

<h2>The set up</h2>

<p>On the <a href="https://github.com/driftyco/ionic-conference-app/blob/master/www/app/schedule/schedule.js#L24">schedule component</a>, we set up the search query as a simple string, as such: <code>this.searchQuery = '';</code>.</p>

<p>Then in our <a href="https://github.com/driftyco/ionic-conference-app/blob/master/www/app/schedule/schedule.html#L21">schedule page template</a>, we tell the <code>ion-search-bar</code> to use the <code>ng-model</code> directive and tell it to two-way bind using the schedule component&rsquo;s <code>searchQuery</code> variable.</p>

<p>The template is like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ion</span><span class="na">-search-bar</span> <span class="err">[(</span><span class="na">ng-model</span><span class="err">)]=&quot;</span><span class="na">searchQuery</span><span class="err">&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Search&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ion-search-bar&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now, in the search bar, we need to take that <code>searchQuery</code> as an ngModel, and ensure the search-bar has a <a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/ng_control.ts#L14">value accessor</a> implemented, so that we may tell the schedule component of when things change to update its shadow DOM if need be.</p>

<p>The <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L46-L62">ion-search-bar</a> will take an <code>ngControl</code> as part of it&rsquo;s injection, and sets up the <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L61">value accessor</a> to itself, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">elementRef</span><span class="o">:</span> <span class="nx">ElementRef</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">config</span><span class="o">:</span> <span class="nx">Config</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">ngControl</span><span class="o">:</span> <span class="nx">NgControl</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">renderer</span><span class="o">:</span> <span class="nx">Renderer</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">super</span><span class="p">(</span><span class="nx">elementRef</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">renderer</span> <span class="o">=</span> <span class="nx">renderer</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">elementRef</span> <span class="o">=</span> <span class="nx">elementRef</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">ngControl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// They don&#39;t want to do anything that works, so we won&#39;t do anything that breaks</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">ngControl</span> <span class="o">=</span> <span class="nx">ngControl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">ngControl</span><span class="p">.</span><span class="nx">valueAccessor</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NOTE: <code>ngModel</code> extends the <code>ngControl</code> class in angular (<a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/ng_model.ts#L44">source code</a>). The <a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/ng_control.ts#L14"><code>valueAccessor</code></a> is a <a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/control_value_accessor.ts">ControlValueAccessor</a> is an interface that provides certain methods, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="kr">interface</span> <span class="nx">ControlValueAccessor</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">writeValue</span><span class="p">(</span><span class="nx">obj</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">registerOnChange</span><span class="p">(</span><span class="nx">fn</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">registerOnTouched</span><span class="p">(</span><span class="nx">fn</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ControlValueAccessor</code> gives us a method to write the new value, a method to register to listen to the changes, and the register on touched function to allow components to use.</p>

<p>Those are implemented in the search-bar, as seen <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L82-L92">here</a>.</p>

<p>You can see that the <code>writeValue</code> method on <code>search-bar</code> updates it&rsquo;s local <code>value</code>, so that it&rsquo;s internal <code>&lt;input&gt;</code> element can update its value it shows. When that internal input is changed, it calls the <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L94-L98">inputChanged</a> event on the <code>search-bar</code>, which alerts other components that it has changed, as well as updating its current value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">inputChanged</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">writeValue</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Filtering out sessions</h3>

<p>Since the <code>onChange</code> event is called, the <code>schedule</code> component will see this and cause re-evaluation on its <code>searchQuery</code> variable, and filters the code.</p>

<p>That makes our filtering method super easy, <a href="https://github.com/driftyco/ionic-conference-app/blob/master/www/app/schedule/schedule.js#L54">as seen here</a>, copied below for convenience:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">getSessionsForTheDay</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">searchQuery</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">searchQuery</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">sessionsForTheDay</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">talks</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sessionsForTheDay</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">session</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">matched</span> <span class="o">=</span> <span class="nx">session</span><span class="p">.</span><span class="nx">talks</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">searchQuery</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">())</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">matched</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">session</span><span class="p">.</span><span class="nx">talks</span> <span class="o">=</span> <span class="nx">matched</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">talks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">session</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">talks</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the schedule component&rsquo;s variable for <code>searchQuery</code> is updated, this method will be auto-magically re-evaluated, which causes the list to update.</p>

<p>Hope this helps you understand Angular 2 and ng-models better! Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows and Webpack with TypeScript and Babel]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/20/windows-and-webpack-with-typescript-and-babel/"/>
    <updated>2015-10-20T21:46:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/20/windows-and-webpack-with-typescript-and-babel</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been diving into the land of <a href="https://webpack.github.io">Webpack</a> to handle all the heavy lifting of using <a href="https://babeljs.io">Babel</a> to compile my <a href="www.typescriptlang.org">TypeScript</a> and <a href="http://es6-features.org">ES6</a> into ES5 JavaScript to be used in <a href="http://ionic.io/2">Ionic 2</a>.</p>

<p>The current set up I&rsquo;m working with involves having Webpack use the <a href="https://github.com/s-panferov/awesome-typescript-loader">awesome-typescript-loader</a> to load up TypeScript and compile the TypeScript files, as well as load up Babel and compile the ES6 JavaScript using Babel.</p>

<h2>The set up</h2>

<p>The file structure looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./
</span><span class='line'>  ./www
</span><span class='line'>    ./app
</span><span class='line'>      ./components
</span><span class='line'>        ./datepipe.js
</span><span class='line'>        ./app.ts</span></code></pre></td></tr></table></div></figure>


<p>This worked great on my Mac. However, one thing I ran into on my Windows machine was this particular error:</p>

<p><code>Cannot find module "./www/app/app.js"</code></p>

<p>Take a look at the <a href="https://github.com/driftyco/ionic-conference-app/blob/master/webpack.config.js">webpack.config.js</a> in the <a href="https://github.com/driftyco/ionic-conference-app/">ionic-conference-app</a>, with a portion of it below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* snipped */</span>
</span><span class='line'>  <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">loaders</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.js$/</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">loader</span><span class="o">:</span> <span class="s2">&quot;awesome-typescript-loader?doTypeCheck=false&amp;useBabel=true&amp;useWebpackText=true&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">include</span><span class="o">:</span> <span class="sr">/www\/app\//</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.ts$/</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">loader</span><span class="o">:</span> <span class="s2">&quot;awesome-typescript-loader&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">include</span><span class="o">:</span> <span class="sr">/www\/app\//</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="cm">/* snipped */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Webpack uses loaders to take the files and add them to the final build output. It knows where to get these files from the webpack config module loaders array, where each loader specifies the <code>include</code> paths, as per the <a href="https://webpack.github.io/docs/configuration.html#module-loaders">webpack docs</a>:</p>

<blockquote><p>include: A condition that must be met</p>

<p>A condition may be a RegExp, a string containing the absolute path, a function(absPath): bool, or an array of one of these combined with “and”.</p></blockquote>

<p>Take note of the include line we had at first: <code>include: /www\/app\//,</code>, line 7 and 13 in the pasted snipped above.</p>

<p>Sure this will work in a Unix based runtime. If you&rsquo;re running on a Windows machine, these paths may be a problem. As it doesn&rsquo;t understand the <code>/</code>. This tip came from Edward McLeod-Jones, who pointed out <a href="https://github.com/RisingStack/react-way-getting-started/issues/8#issue-94592829">this issue</a>.</p>

<p>You might want to try to make RegEx fun, by doing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">include</span><span class="o">:</span> <span class="sr">/www(\/|\\)app(\/|\\)/</span><span class="p">,</span>  <span class="c1">// &lt;--- Change the regex to support either type of folder separator`</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, since we&rsquo;re doing Node.js, it provides APIs to help us out with cross-platform changes like this with the <code>path</code> module.</p>

<p>Do this instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">wwwPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;www&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">outputPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">wwwPath</span><span class="p">,</span> <span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="s1">&#39;js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">wwwPath</span><span class="p">,</span> <span class="s1">&#39;app&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appJsPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">appPath</span><span class="p">,</span> <span class="s1">&#39;app.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* snip */</span>
</span><span class='line'>  <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">loaders</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.js$/</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">loader</span><span class="o">:</span> <span class="s2">&quot;awesome-typescript-loader?doTypeCheck=false&amp;useBabel=true&amp;useWebpackText=true&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">include</span><span class="o">:</span> <span class="p">[</span><span class="nx">wwwPath</span><span class="p">],</span>
</span><span class='line'>        <span class="c1">// include: /www(\/|\\)app(\/|\\)/,</span>
</span><span class='line'>        <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.ts$/</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">loader</span><span class="o">:</span> <span class="s2">&quot;awesome-typescript-loader&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// include: /www(\/|\\)app(\/|\\)/,</span>
</span><span class='line'>        <span class="nx">include</span><span class="o">:</span> <span class="p">[</span><span class="nx">wwwPath</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="cm">/* snip */</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
