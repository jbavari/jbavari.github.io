<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: registry | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/registry/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2019-12-12T21:32:46-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using npm tags]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/16/using-npm-tags/"/>
    <updated>2015-10-16T15:16:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/16/using-npm-tags</id>
    <content type="html"><![CDATA[<p>If you do any kind of deployments to npm, you&rsquo;ll probably find learning more about npm tags very helpful.</p>

<p>Just as git tags mark commits in your repository history, npm tags mark a specific version in the npm registry of your published versions.</p>

<p>If you didn&rsquo;t know, npm manages a tag &lsquo;latest&rsquo; that points to the last version you put out with <code>npm publish</code>.</p>

<p>The syntax to publish a new version and tag that version with the name beta, use: <code>npm publish --tag beta</code>.</p>

<h2>Installing from tags</h2>

<p>To have your users install your node module, they just type <code>npm install</code>. What that does is looks at npm&rsquo;s latest tag for your repository, and installs that version.</p>

<p>They can also specify a version by passing it after the <code>@</code> character after the module name: <code>npm install module@1.7.3</code>.</p>

<p>Lets say you have some beta users and always want them to grab the beta, without having to remember the latest version you&rsquo;ve pushed.</p>

<p>You just run <code>npm publish --tag beta</code>, then have them run <code>npm install module@beta</code>.</p>

<p>At any time, they can still specify the beta version <code>npm install module@1.7.3-beta.1</code> if they want to hop down or up a version, for example.</p>

<h2>Looking up npm tags</h2>

<p>Using the npm CLI, you can easily see the versions by running <code>npm view ionic dist-tags</code>. Just replace <code>ionic</code> with whatever module you&rsquo;d want to see.</p>

<p>You can also look up the entire list of versions npm maintains at the url, <a href="http://registry.npmjs.org/ionic">registry.npmjs.org/ionic</a>.</p>

<p>As a fun fact, npm uses tags on its own tool, npm, to mark the <code>latest</code>, <code>latest-2</code>, <code>next</code>, <code>next-2</code>, as well as their next versions in their current major/minor versions, for example:</p>

<p><code>latest =&gt; 3.3.8 next =&gt; 3.3.9 latest-2 =&gt; 2.14.7 next-2 =&gt; 2.14.8 v3.x-latest =&gt; 3.3.8 3.x-latest =&gt; 3.3.8 3.x-next =&gt; 3.3.9 v3.x-next =&gt; 3.3.9</code></p>

<p>Also, I made a <a href="http://jbavari.github.io/registry">quick tool</a> to look up tags for you npm version.</p>

<h2>Assigning a tag</h2>

<p>Let&rsquo;s say you have a blessed version you now want to promote. It&rsquo;s super simple to set up that tag to the previous version.</p>

<p>Just run <code>npm dist-tags add ionic-app-lib@0.6.5 latest</code> and you&rsquo;ll have the <code>latest</code> tag point at <code>0.6.5</code>.</p>

<h3>Whoops, I accidently published without a tag!</h3>

<p>This has happened to me thousands of times. I&rsquo;ve run <code>npm publish</code> without specifying a tag, and now, my <code>latest</code> points at an alpha version. How embarassing.</p>

<p>The scenario is this &ndash; my module <code>ionic-app-lib</code> currently has its latest tag at <code>0.6.4</code>, i&rsquo;m working on <code>2.0.0-alpha.18</code>, and I type in <code>npm publish</code>. I wanted to tag this as <code>alpha</code>, but because of my haste, now all my users will grab this version blindly without wanting it.</p>

<p>Thankfully, this is easily fixed &ndash; we just have to point <code>latest</code> tag back to its version.</p>

<p>First, just put latest back to 0.6.4, like so: <code>npm dist-tags add ionic-app-lib@0.6.4 latest</code>.</p>

<p>Now we put alpha to what we wanted originally, like so: <code>npm dist-tags add ionic-app-lib@2.0.0-alpha.18 alpha</code>.</p>

<p>Bam! Now everything is back to how we want it!</p>

<h2>Removing tags</h2>

<p>This is super simple: <code>npm dist-tags rm alpha</code> &ndash; this wipes it out.</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
</feed>
