<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2020-02-17T07:42:04-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scoreboard forms in React and Angular 2]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/15/scoreboard-forms-in-react-and-angular-2/"/>
    <updated>2015-12-15T23:01:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/15/scoreboard-forms-in-react-and-angular-2</id>
    <content type="html"><![CDATA[<p>As a developer, you should be focused on spending some of your own time learning and staying up to date with technology that is always moving.</p>

<p>I wanted to find a reason to hop into some of the &lsquo;newer&rsquo; front-end frameworks, React and Angular 2, as well as some of the module bundlers <a href="http://browserify.org/">browserify</a> and <a href="https://webpack.github.io/">webpack</a>.</p>

<p>I had the opportunity to try out Angular 2 while it was still in alpha. With the recent announcement of Angular 2 going out in Beta, I wanted to build a Scoreboard form that went along with my Scoreboard project to evaluate the two frameworks.</p>

<p>This post will aim to build a simple scoreboard form in both frameworks, so you can see the same DOM interactions and the code it takes to form them.</p>

<p>Please also note, I&rsquo;m still very much learning, and some code may not be &lsquo;ideal&rsquo;.</p>

<p>We&rsquo;ll cover:</p>

<ul>
<li>The scoreboard form idea</li>
<li>Learning the ideas behind the frameworks</li>
<li>The bundling systems</li>
<li>Angular 2 implementation (TypeScript)</li>
<li>React implementation (ES6)</li>
<li>The differences between the two</li>
<li>Pros and Cons of each (in my eyes)</li>
</ul>


<p>All of the source code is available on my Github profile in the <a href="https://github.com/jbavari/scoreboard-form">scoreboard-form</a> repository.</p>

<h1>The Scoreboard Form</h1>

<p>A scoreboard is simple &ndash; you&rsquo;ll enter the two team names, then specify a touchdown or field goal for either team.</p>

<p>That means we will need a few components: a scoreboard and a team.</p>

<p>The idea will be to build these components in React and Angular2, having them use similar templates to render to the equivalent DOM structures.</p>

<h2>Learning the ideas behind the frameworks</h2>

<p>Both frameworks aim to contain all of the functionality and display into a component.</p>

<p>The idea will be to build a team component, that displays teams, and a scoreboard component, that will display both of those teams and have a submit method to post that data to our scoreboard API server.</p>

<p>The main difference we will see between the two frameworks is adapting to <a href="http://es6-features.org/">ES6</a> or <a href="http://www.typescriptlang.org/">TypeScript</a>.</p>

<p>In either framework, we will create a class for the component in ES6/TypeScript, and then connect the template to it, and finally attach it in the DOM.</p>

<h1>The bundling systems</h1>

<p>We will use Browserify to pack up React into a single module, while using webpack to bundle up Angular 2 into a single bundle.</p>

<p>What is bundling you say? It&rsquo;s taking all the source for our components and bundling them up with the framework code to have one JavaScript file to load the entire bundle. That way, we only need one JavaScript file instead of a whole load of <code>&lt;script&gt;</code> tags.</p>

<h1>Angular 2 implementation</h1>

<p>Angular 2 is built in TypeScript, which is a superset of JavaScript that allows types to have a &lsquo;stronger type&rsquo; to work with. We will build our component in TypeScript, and transpile it down to ES5 JavaScript.</p>

<h2>Building the Team component</h2>

<p>In Angular 2, we need to use a decorator (<a href="https://www.sitepen.com/blog/2015/10/20/typescript-decorators/">see this blog post about TypeScript decorators</a>) to specify a Team as a component that will render.</p>

<p>We will import the Decorator, <code>Component</code>, and then apply it to our class. The <code>Component</code> decorator specifies which DOM element it will attach to (in this case, <code>team</code>), any inputs our control may have, what template it will use (specified as the <code>template</code> key), and what other directives will be used to parse our template.</p>

<p>Then, we have our class that defines the component itself with a name and score, methods to increase score (<code>touchdown</code> and <code>fieldGoal</code>), a <code>toJson</code> method, and finally callbacks to update itself from the parent component.</p>

<p>The team component:</p>

<p>```
import {Component, EventEmitter, Output} from &lsquo;angular2/core&rsquo;;
import {NgFor, NgIf, NgModel} from &lsquo;angular2/common&rsquo;;</p>

<p>@Component({
  directives: [NgFor, NgIf, NgModel],
  selector: &lsquo;team&rsquo;,
  template: `</p>

<pre><code>&lt;div *ngIf="name == ''"&gt;
  &lt;h3&gt;No team set&lt;/h3&gt;
  &lt;input type="text" [(ngModel)]="nameInput" placeholder="Enter a name"/&gt;
  &lt;button type="submit" (click)="setName()"&gt;Set name&lt;/button&gt;
&lt;/div&gt;
&lt;div *ngIf="name != ''"&gt;
  &lt;h3&gt;&lt;/h3&gt;
  &lt;button (click)="touchdown($event)"&gt;Touchdown&lt;/button&gt;
  &lt;button (click)="fieldGoal($event)"&gt;Field Goal&lt;/button&gt;
  &lt;h4&gt;Score: &lt;/h4&gt;
&lt;/div&gt;
`
}
</code></pre>

<p>})
export class Team {
  @Output() updateTeam = new EventEmitter<Team>();
  constructor() {</p>

<pre><code>this.nameInput = '';
this.name = '';
this.score = 0;
</code></pre>

<p>  }</p>

<p>  fieldGoal(e) {</p>

<pre><code>e.preventDefault();
this.score += 3;
</code></pre>

<p>  }</p>

<p>  touchdown(e) {</p>

<pre><code>e.preventDefault();
this.score += 7;
</code></pre>

<p>  }</p>

<p>  setName(nameInput) {</p>

<pre><code>this.name = this.nameInput;
this.nameInput = '';
if(this.updateTeam) {
  this.updateTeam.next(this);
}
</code></pre>

<p>  }</p>

<p>  toJson() {</p>

<pre><code>return { name: this.name, score: this.score };
</code></pre>

<p>  }
}</p>

<p>```</p>

<h2>Defining the scoreboard component</h2>

<p>Now we need to displays these teams in a side by side manner, a callback to update information from the team component, and a method to submit the scores to the API.</p>

<p>We&rsquo;ll define the component as follows:</p>

<p>```
import {Component} from &lsquo;angular2/core&rsquo;;
import {Team} from &lsquo;../team/team&rsquo;;</p>

<p>@Component({
  directives: [Team],
  selector: &lsquo;scoreboard&rsquo;,
  template: `</p>

<pre><code>&lt;form (ngSubmit)="submitScore()"&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-md-6"&gt;
      &lt;h2&gt;Home Team&lt;/h2&gt;
      &lt;team (updateTeam)="updateHomeTeam($event)" home="true"&gt;&lt;/team&gt;
    &lt;/div&gt;
    &lt;div class="col-md-6"&gt;
      &lt;h2&gt;Visitor Team&lt;/h2&gt;
      &lt;team (updateTeam)="updateVisitorTeam($event)"&gt;&lt;/team&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="row"&gt;
    &lt;button type="submit"&gt;Submit&lt;/button&gt;
  &lt;/div&gt;
  &lt;div *ngIf="submitted"&gt;
    JSON payload: 
  &lt;/div&gt;
&lt;/form&gt;  
</code></pre>

<p>  `
})
export class Scoreboard {
  homeTeam: Team = new Team();
  visitorTeam: Team = new Team();
  submitted: boolean = false;
  jsonPayload: string = null;</p>

<p>  constuctor() {
  }</p>

<p>  submitScore() {</p>

<pre><code>this.submitted = true;
this.jsonPayload = JSON.stringify({ homeTeam: this.homeTeam.toJson(), visitorTeam: this.visitorTeam.toJson()});
</code></pre>

<p>  }</p>

<p>  updateHomeTeam(team: Team) {</p>

<pre><code>this.homeTeam = team;
</code></pre>

<p>  }</p>

<p>  updateVisitorTeam(team: Team) {</p>

<pre><code>this.visitorTeam = team;
</code></pre>

<p>  }
}</p>

<p>```</p>

<h2>Pros and Cons</h2>

<h3>Pros</h3>

<h3>Cons</h3>

<ul>
<li>Angular 2 &ndash; docs are all over the place.</li>
<li>Main blogs that are linked from docs site are using old kabob style (e.g. <code>*ng-if</code> instead of <code>*ngIf</code>).</li>
<li>Webpack configuration &ndash; I didn&rsquo;t include zone.js in my entries, and I could not get any DOM updates coming from my components changing.</li>
<li>When to use two-way bindings, and one-way bindings was good enough.</li>
<li>No &lsquo;why&rsquo; to what im doing &ndash; it aims to just follow the same &lsquo;idea&rsquo; as Angular.js.</li>
<li>Plunkers aren&rsquo;t up to date.</li>
</ul>


<h1>React implementation (ES6)</h1>

<p>Now that we have the basic idea of the team and scoreboard, you&rsquo;ll see React is very similiar. Instead of having a decorator specify the template and DOM elements to attach to, we&rsquo;ll specify a class that extends <code>React.Component</code>, a method that will render the markup, and finally, some bootstrap code to attach our class to a DOM element.</p>

<h2>Defining the team component</h2>

<p>```
import React from &lsquo;react&rsquo;;</p>

<p>export default class Team extends React.Component {
  constructor(props) {</p>

<pre><code>super(props);
this.props = props;
this.name = props.name;
this.score = props.score || 0;
this.setName = this.setName.bind(this);
// this.state = {name: this.name, score: this.score};
this.touchdown = this.touchdown.bind(this);
this.fieldGoal = this.fieldGoal.bind(this);
</code></pre>

<p>  }</p>

<p>  fieldGoal(e) {</p>

<pre><code>e.preventDefault();
this.score += 3;
this.setState(this);
</code></pre>

<p>  }</p>

<p>  touchdown(e) {</p>

<pre><code>e.preventDefault();
this.score += 7;
this.setState(this);
</code></pre>

<p>  }</p>

<p>  setName(e) {</p>

<pre><code>e.preventDefault();
this.name = this.refs.teamName.value;
this.setState(this);
this.props.update(this);
</code></pre>

<p>  }</p>

<p>  toJson() {</p>

<pre><code>return { name: this.name, score: this.score };
</code></pre>

<p>  }</p>

<p>  render() {</p>

<pre><code>if (!this.name) {
  return (
    &lt;div&gt;
      &lt;h3&gt;No team set&lt;/h3&gt;
      &lt;input type="text" ref="teamName" placeholder="Enter a name.." value={this.props.name}/&gt;
      &lt;button onClick={this.setName}&gt;Set Name&lt;/button&gt;
    &lt;/div&gt;
  );
} else {
  return (
    &lt;div&gt;
      &lt;h3&gt;{this.name}&lt;/h3&gt;
      &lt;button onClick={this.touchdown}&gt;Touch Down&lt;/button&gt;
      &lt;button onClick={this.fieldGoal}&gt;Field Goal&lt;/button&gt;
      &lt;h4&gt;Score: {this.score}&lt;/h4&gt;
    &lt;/div&gt;
  );
}
</code></pre>

<p>  }
}
```</p>

<h2>Defining the Scoreboard component</h2>

<p>```
import Team from &lsquo;./team.jsx&rsquo;;
import React from &lsquo;react&rsquo;;</p>

<p>export default class Scoreboard extends React.Component {
  constructor(props) {</p>

<pre><code>super(props);
this.homeTeam = {};
this.visitorTeam = {};
this.url = this.props.url;
this.submit = this.submit.bind(this);
this.updateTeam = this.updateTeam.bind(this);
this.submitted = false;
this.jsonPayload = null;
</code></pre>

<p>  }</p>

<p>  submit(event) {</p>

<pre><code>event.preventDefault();
this.submitted = true;
this.setState(this);
this.jsonPayload = JSON.stringify({ homeTeam: this.homeTeam.toJson(), visitorTeam: this.visitorTeam.toJson()});
</code></pre>

<p>  }</p>

<p>  updateTeam(team) {</p>

<pre><code>if (team.props.home) {
  this.homeTeam = team;
} else {
  this.visitorTeam = team;
}
</code></pre>

<p>  }</p>

<p>  render() {</p>

<pre><code>var jsonInformation = this.submitted ? (&lt;div&gt;JSON payload: {this.jsonPayload}&lt;/div&gt;) : null;
return (
  &lt;form onSubmit={this.submit}&gt;
    &lt;div className="row"&gt;
      &lt;div className="col-md-6"&gt;
        &lt;h2&gt;Home Team&lt;/h2&gt;
        &lt;Team home="true" update={this.updateTeam}&gt;&lt;/Team&gt;
      &lt;/div&gt;
      &lt;div className="col-md-6"&gt;
        &lt;h2&gt;Visitor Team&lt;/h2&gt;
        &lt;Team update={this.updateTeam}&gt;&lt;/Team&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div className="row"&gt;
      &lt;button type="submit"&gt;Submit&lt;/button&gt;
    &lt;/div&gt;
    {jsonInformation}
  &lt;/form&gt;
)
</code></pre>

<p>  }
}
```</p>

<p>Now you&rsquo;ll see, theres no way we tell React to attach to a DOM node to attach our components to the browser DOM.</p>

<p>This happens by the bootstrapping code:</p>

<p>```
import React from &lsquo;react&rsquo;;
import ReactDOM from &lsquo;react-dom&rsquo;;
import Scoreboard from &lsquo;../component/scoreboard.jsx&rsquo;;</p>

<p>window.app = (function() {
  return ReactDOM.render(<Scoreboard/>, document.getElementById(&lsquo;react-scoreboard&rsquo;));
})();
```</p>

<p>Now, React knows to use our <code>Scoreboard</code> component (the one that was imported) to attach it to the <code>react-scoreboard</code> DOM element with an id of <code>react-scoreboard</code>. Internally for the Scoreboard, it specifies it&rsquo;s render method:</p>

<p>```
import Team from &lsquo;./team.jsx&rsquo;;
// .. snipped code ..
render() {
  var jsonInformation = this.submitted ? (<div>JSON payload: {this.jsonPayload}</div>) : null;
  return (</p>

<pre><code>&lt;form onSubmit={this.submit}&gt;
  &lt;div className="row"&gt;
    &lt;div className="col-md-6"&gt;
      &lt;h2&gt;Home Team&lt;/h2&gt;
      &lt;Team home="true" update={this.updateTeam}&gt;&lt;/Team&gt;
    &lt;/div&gt;
    &lt;div className="col-md-6"&gt;
      &lt;h2&gt;Visitor Team&lt;/h2&gt;
      &lt;Team update={this.updateTeam}&gt;&lt;/Team&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div className="row"&gt;
    &lt;button type="submit"&gt;Submit&lt;/button&gt;
  &lt;/div&gt;
  {jsonInformation}
&lt;/form&gt;
</code></pre>

<p>  )
}
```</p>

<h2>Pros and Cons</h2>

<h3>Pros</h3>

<p><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">React Dev tools</a> &ndash; inspect react components, super handy.
Dev docs talk about how to think in react &ndash; giving the why before the what, really helped understand the concepts.</p>

<h3>Cons</h3>

<p>Dev tooling is not straight forward &ndash; you have to decide yourself.
Figuring how to plug in rendering steps between state changes. <code>this.setState({})</code> with some state information.</p>

<h1>Differences between the two</h1>

<p>The main difference I can see if how Angular 2 specifies its <code>selector</code> to find out how it attaches to a DOM element you specify.</p>

<p>React just follows using JSX to specify the component, which you can pass in properties.</p>

<p>Angular 2 takes the approach of keeping state and doing stateful checks from its Virtual DOM diff'ing. However, the templating directives you can use, like <code>*ngIf</code> requires handling a template of some sort, where as React, you can just use JavaScript conditionals to render your DOM.</p>

<h1>Conclusions</h1>

<p>I really like the approach React takes. I also feel like it is a year early to the Virtual DOM party, and Angular 2 is really trying to keep up.</p>

<p>As far as intuition and ease of development goes, React was definitely easier. Even with my previous Angular 2 knowledge, it still took me longer to get up and going.</p>

<p>To give Angular 2 a fair shot, it is still in Beta. However, if I were to start a project today, it would be in React, due to the huge community that is building, the tooling available, and being backed by Facebook, one of the utmost leaders in User inface design and performance.</p>

<p>I hope this short write up helps! If you have any questions, please drop a comment and we&rsquo;ll clear things up!</p>

<p>As a reminder, <a href="https://github.com/jbavari/scoreboard-form">here is all of the code</a> is available on Github, feel free to open an issue.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Scoreboard Project]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/04/the-scoreboard-project/"/>
    <updated>2015-12-04T17:22:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/04/the-scoreboard-project</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been wanting to dig more into some technologies I&rsquo;ve been wanting to explore and gain more experience. Not only this, but I wanted to make sure my dev workflow was still improving, my tools were getting sharpened, and I was re-establishing the best practices as much as I could.</p>

<p>Those specific technologies I wanted to dig into was:</p>

<ul>
<li>Building a CLI in Ruby, using <a href="https://github.com/erikhuda/thor">Thor</a></li>
<li>A <a href="http://sinatrarb.com">Sinatra</a> Modular API</li>
<li>Solifying <a href="https://github.com/jeremyevans/sequel">Sequel</a> Model usage and JSON serialization</li>
<li>Building a dashboard using <a href="https://github.com/Shopify/dashing">Dashing</a></li>
<li>Diving more into <a href="https://github.com/bbatsov/rubocop">Rubocop</a> for Ruby static code analysis</li>
<li>Automated Code Review using <a href="http://codeclimate.com">CodeClimate</a></li>
</ul>


<p>I found a way to connect all the dots in what I&rsquo;m calling the scoreboard project. I chose these technologies because it would let me shine up my ruby/sql skills without a framework carrying me the way. (Although they mostly did anyway!)</p>

<p>This blog post will go over the idea of making an API around scoreboards. There will be a simple CLI tool to gather scores on &lsquo;games&rsquo;. Those scores will be sent to the API, to store in Postgres. The dashboard project will then pull these values from postgres and display them in an easy to view manner.</p>

<h2>This post</h2>

<p>With this post, i&rsquo;ll go over the individual pieces of the project, the interesting tidbits of each one, and finally go over a short retrospective over the entire project.</p>

<p>In entire time, the project took about a day and a half. It was fun, and I really enjoyed the experience over all.</p>

<h2>The pieces</h2>

<ul>
<li><a href="https://github.com/jbavari/scoreboard-cli">Scoreboard CLI</a></li>
<li><a href="https://github.com/jbavari/scoreboard-api">Scoreboard API</a></li>
<li><a href="https://github.com/jbavari/scoreboard-dashboard">Scoreboard Dashboard</a></li>
<li>Scoreboard Mobile App (coming soon)</li>
</ul>


<p>All of the projects are listed on my github profile. I&rsquo;ve been trying to keep most issues in the github repo&rsquo;s issue page for each respective project.</p>

<p>All of the projects are checked by CodeClimate, and I&rsquo;ve been trying to keep up with rubocop&rsquo;s rules on these as I go.</p>

<h2>Scoreboard CLI</h2>

<p>The idea for the CLI was to prompt the user for a home team and visitor team, then collect data about getting a touch down for the home team, for example: <code>h:td</code>.</p>

<p>It would keep prompting for more scoring plays until the user gives a SIGTERM or hits CTRL+D.</p>

<p>First I started by reading up on Thor, which was an absolute pleasure to work with. You can download it via <code>gem install scoreboard</code>.</p>

<p>To make it available via command line, I added this:</p>

<p><code>ruby
  spec.bindir        = "bin"
  spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }
</code></p>

<p>Then in <code>bin/scoreboard</code> <a href="https://github.com/jbavari/scoreboard-cli/blob/master/bin/scoreboard">link</a>, we just require in our CLI and run it with the arguments:</p>

<p>``` ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>require_relative &ldquo;../lib/scoreboard/cli&rdquo;</p>

<p>begin
  cli = Scoreboard::Cli.new
  cli.start(ARGV)
rescue => e
  raise e if $DEBUG
  STDERR.puts e.message
  STDERR.puts e.backtrace.join(&ldquo;\n&rdquo;)
  exit 1
end
```</p>

<h3>A note on the SIGTERM exception handling</h3>

<p>If you see in my <code>STDIN.each_line</code> loop where I read in scoring entries, <a href="https://github.com/jbavari/scoreboard-cli/blob/master/lib/scoreboard/cli.rb#L47">you will see</a> I rescue all Exception. This could be improved to find the exact SIGTERM exception is being thrown, but for simplicity, I left it catching the general exception.</p>

<h2>Scoreboard API</h2>

<p>The API has a few paths, based on the <code>/api/v1</code> namespace for requests.</p>

<p>You can access its teams or the entire scoreboard, via <code>GET /api/v1/teams</code> or <code>GET /api/v1/scores</code>. You can see the core <a href="https://github.com/jbavari/scoreboard-api/blob/master/application.rb">Sinatra Application</a> on github.</p>

<p>It was absolutely easy to set up the <a href="https://github.com/jbavari/scoreboard-api/tree/master/migrations">Sequel migrations</a> to define the team table and the scoreboard table in postgres.</p>

<p>The main tying point was getting the Sequel models to serialize, which was solved in another blog post.</p>

<h2>Scoreboard Dashboard</h2>

<p>Dashing was really easy to get started, a project set up, and out the gate.</p>

<p>First I had to include Sequel to get me my data, which I included an <code>Api</code> model to ease the SQL bridge for me.</p>

<p>The main point here was the <code>scoreboard.rb</code> file which was scheduled to run every 5 seconds, gather data from some crafty queries, and send that data to the dashboard. Other than the HTML markup, this was the chunky part of it:</p>

<p>``` ruby
require &lsquo;sequel&rsquo;</p>

<p>DB = Sequel.connect(&lsquo;postgres://localhost/scoreboard&rsquo;)
scoreboard = DB[:scoreboard]
team = DB[:team]</p>

<p>send_event(&lsquo;games-played&rsquo;, { value: scoreboard.count })</p>

<p>def teams_played
  DB[&lt;&lt;-eos</p>

<pre><code>  select
    sum(value)::int as value,
    label
  from (
    select count(home_id) as value, name as label from team inner join scoreboard on team.id = scoreboard.home_id group by scoreboard.home_id, team.name

    UNION ALL

    select count(visitor_id) as value, name as label from team inner join scoreboard on team.id = scoreboard.visitor_id group by scoreboard.visitor_id, team.name
  ) sub
  group by value, label
  order by value desc
eos
</code></pre>

<p>  ]</p>

<p>end</p>

<p>def team_scoreboard
  DB[&lt;&lt;-eos</p>

<pre><code>  select 
    s.id,
    t.name as home_team, 
    t2.name as visitor_team, 
    home_score, 
    visitor_score 
  from team t 
  inner join scoreboard s on s.home_id = t.id 
  inner join team t2 on t2.id = s.visitor_id
  limit 10;
eos
</code></pre>

<p>  ]
end</p>

<p>SCHEDULER.every &lsquo;5s&rsquo; do
  teams = teams_played.map do |item|</p>

<pre><code>{:label =&gt; item[:label], :value =&gt; item[:value]}
</code></pre>

<p>  end
  send_event(&lsquo;games-played&rsquo;, { value: scoreboard.count })
  send_event(&lsquo;teams&rsquo;, { items: teams })
  puts &ldquo;Scoreboard: #{team_scoreboard.to_a}&rdquo;</p>

<p>  send_event(&lsquo;scoreboard&rsquo;, { items: team_scoreboard.to_a })
end
```</p>

<h1>Retrospective</h1>

<ul>
<li>What went right</li>
<li>What went wrong</li>
<li>What could be improved</li>
</ul>


<h2>What went right</h2>

<ul>
<li>The CLI came together smoothly. Thor was easy to get running.</li>
<li>Getting data to post to the API was a breeze</li>
<li>Sinatra and Sequel were easy to hoist up a simple API to take POST data and serve GET requests as JSON</li>
<li>Getting data into the dashboard was SUPER easy with Sequel, no need to do the ORM dance</li>
<li>Dashing was easy to create my own scoreboard component, using the <code>data-</code> type DOM attributes</li>
</ul>


<h2>What went wrong</h2>

<ul>
<li>Had some issues handling SIGTERM in CLI</li>
<li>CLI still doesnt validate input</li>
<li>API for Sinatra was a little difficult to get JSON serialization off the bat</li>
<li>Dashing is very &lsquo;opinionated&rsquo; and doesnt give you more room to fit into an existing app</li>
<li>No tests were made</li>
<li>Nothing is deployed to servers yet</li>
</ul>


<h2>What could be improved</h2>

<ul>
<li>Minitest suite for CLI, API, and the Dashboard</li>
<li>Dashboard process tasks could be broken out to be more DRY</li>
<li>CLI needs to check and validate input</li>
<li>API needs to add in rollbar, new relic, or other metrics to help find errors</li>
<li>Deploy all the things!</li>
</ul>


<h1>Future plans</h1>

<p>The plan is to keep working on this project and continue improving tooling and getting other best practices in place. Finally, ship it to digital ocean and enjoy the conveniences they provide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic 2.0 Generators - Services]]></title>
    <link href="http://jbavari.github.io/blog/2015/11/06/ionic-2-dot-0-generators-services/"/>
    <updated>2015-11-06T01:23:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/11/06/ionic-2-dot-0-generators-services</id>
    <content type="html"><![CDATA[<p>This is the second post in a series covering the new Ionic Generators in Ionic 2.0. In the <a href="http://jbavari.github.io/blog/2015/11/05/using-ionic-2-dot-0-generators/">first post</a>, we discussed generating pages, let&rsquo;s focus now on generating some services to consume some JSON data via an http request.</p>

<h2>Get the tools</h2>

<p>Run this to get started:</p>

<p><code>bash Install Ionic CLI and start an Ionic application
npm install -g ionic@alpha
ionic start MyIonic2App tabs --v2
cd MyIonic2App
</code></p>

<h2>Generate the service</h2>

<p><code>ionic g injectable MyDataService</code></p>

<p>You should see the service:</p>

<p><code>bash Run generate command
~/Development/testing/MyIonic2App$ ionic g injectable MyDataService
√ Create www/app/my-data-service/my-data-service.js
</code></p>

<p>The basic blueprint of the generated service is as follows:</p>

<p>``` javascript Generated Data Service
import {Injectable} from &lsquo;angular2/angular2&rsquo;;
import {Http} from &lsquo;angular2/http&rsquo;;</p>

<p>@Injectable()
export class MyDataService {
  constructor(<a href="http:">http:</a> Http) {</p>

<pre><code>this.http = http;
this.data = null;
</code></pre>

<p>  }</p>

<p>  retrieveData() {</p>

<pre><code>//Here, we're going to get a JSON data file, use the `map` call to parse json
// and finally subscribe to the observable and set our data
//to the value it provides once the http request is complete.
this.http.get('path/to/data.json')
  .map(res =&gt; res.json())
  .subscribe(data =&gt; {
    this.data = data;
  }, error =&gt; {
    console.log('Error with http.get: ', error);
  });
</code></pre>

<p>  }
}</p>

<p>```</p>

<h2>Wiring it in to be used</h2>

<p>Adjust <code>www/app/app.js</code> to import the data service, as well as provide it for all of its components:</p>

<p>```js www/app/app.js
import {MyDataService} from &lsquo;./my-data-service/my-data-service&rsquo;;</p>

<p>@App({
  template: &lsquo;&lt;ion-nav [root]=&ldquo;root&rdquo;>&lt;/ion-nav>&rsquo;,
  providers: [Friends, MyDataService]
})
```</p>

<h2>Use the service</h2>

<p>We&rsquo;ll use the tabs starter dashboard page to pull data.</p>

<p>Let&rsquo;s modify <code>www/app/dash/dash.ts</code> &ndash; adding an import for <code>MyDataService</code>, adding <code>MyDataService</code> to the constructore as an injected dependency, and finally adding the call to <code>retrieveData</code> in the constructore method.</p>

<p>``` js www/app/dash/dash.ts
import {Page, NavController, ViewController} from &lsquo;ionic/ionic&rsquo;;
import {MyDataService} from &lsquo;../my-data-service/my-data-service&rsquo;;
import {About} from &lsquo;../about/about&rsquo;;</p>

<p>@Page({
  templateUrl: &lsquo;app/dash/dash.html&rsquo;,
})
export class Dash {
  constructor(nav: NavController, view: ViewController, data: MyDataService) {</p>

<pre><code>this.nav = nav;
this.view = view;
data.retrieveData();
</code></pre>

<p>  }</p>

<p>  goToAboutPage() {</p>

<pre><code>this.nav.push(About);
</code></pre>

<p>  }</p>

<p>}
```</p>

<h2>Additional information</h2>

<p>If you&rsquo;ve used Angular 1, you&rsquo;re probably familiar with promises to return your data from http requests.</p>

<p>Under the hood of Angular 2 lies <a href="https://github.com/Reactive-Extensions/RxJS">RxJs</a> that builds on promises, focusing on being repeatable.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ionic 2.0 Generators]]></title>
    <link href="http://jbavari.github.io/blog/2015/11/05/using-ionic-2-dot-0-generators/"/>
    <updated>2015-11-05T21:49:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/11/05/using-ionic-2-dot-0-generators</id>
    <content type="html"><![CDATA[<p>At the time of writing this, Ionic 2.0 is still in alpha.</p>

<p>Ionic 2.0 builds on a ton of new technologies, such as Angular v2, TypeScript (with decorators), and ES6. If you&rsquo;ve never dabbled in these technologies, you can use the generators available in the <a href="http://npmjs.org/package/ionic"><code>ionic-cli</code></a> to get ramped up quickly!</p>

<h2>Getting started</h2>

<p>First, install the <code>alpha</code> version of the Ionic CLI: <code>npm install -g ionic@alpha</code>, currently version 2.0.0-alpha.19.</p>

<p>Start an app with the tabs template: <code>ionic start MyIonic2App tabs --v2</code>.</p>

<p>Change directories and serve the app in the browser: <code>cd MyIonic2App &amp;&amp; ionic serve</code>.</p>

<p>You&rsquo;ll see, we&rsquo;ve got a basic tabs starter now avilable at <code>MyIonic2App</code> directory.</p>

<h2>Generating a few pages</h2>

<p>Let&rsquo;s say we want to link to a new page, &lsquo;About&rsquo;, from one of the tabs. First, let&rsquo;s generate our page with this command: <code>ionic generate page About</code>. NOTE: You can also use the generate alias, <code>ionic g</code>.</p>

<p>You&rsquo;ll see a few files added:</p>

<p><code>bash
~/Development/testing/MyIonic2App$ ionic g page About
√ Create www/app/about/about.html
√ Create www/app/about/about.js
√ Create www/app/about/about.scss
</code></p>

<h2>Adding link on view to the About page</h2>

<p>Let&rsquo;s add the link to the main tab page in <code>www/app/dash/dash.html</code>, via the <code>(click)</code> handler on an anchor, like so:</p>

<p>```
&lt;ion-card>
  &lt;ion-card-header></p>

<pre><code>Go to about page
</code></pre>

<p>  &lt;/ion-card-header>
  &lt;ion-card-content></p>

<pre><code>&lt;button (click)="goToAboutPage()"&gt;About this&lt;/button&gt;
</code></pre>

<p>  &lt;/ion-card-content>
&lt;/ion-card>
```</p>

<h2>Navigating to the page</h2>

<p>Modify the Dashboard TypeScript file (<code>www/app/dash/dash.ts</code>) to import our new about page, add the click event handler, and push the page on the nav controller, all like so:</p>

<p>```js
import {Page, NavController} from &lsquo;ionic/ionic&rsquo;;
import {About} from &lsquo;../about/about&rsquo;;</p>

<p>@Page({
  templateUrl: &lsquo;app/dash/dash.html&rsquo;,
})
export class Dash {
  constructor(nav: NavController, view: ViewController) {</p>

<pre><code>this.nav = nav;
this.view = view;
</code></pre>

<p>  }</p>

<p>  goToAboutPage() {</p>

<pre><code>this.nav.push(About);
</code></pre>

<p>  }</p>

<p>}
```</p>

<h2>Try it out!</h2>

<p>Look in your browser, you should have an anchor available to click/tap that will then navigate you to the About page, fresh for you to get working!</p>

<p>Here&rsquo;s a GIF of what it looks like:</p>

<p><img class="[pic]" src="/images/IonicV2Generators.gif" title="[250] [250] [Ionic 2.0- Page generator example]" ></p>

<p>I&rsquo;d like to also note, Ionic 2 is much smoother than a GIF would allow.</p>

<h2>Wiring up sass</h2>

<p>If you want to use the custom sass styles on the about page, first wire in the <code>about.scss</code> page in your <code>www/app/app.scss</code> sass file, like so: <code>@import 'about/about';</code>.</p>

<h2>A quick note on naming conventions</h2>

<p>For Ionic 2.0, we&rsquo;ve contributed to a <a href="https://en.wikipedia.org/wiki/Naming_convention_%28programming%29#Multiple-word_identifiers">naming convention</a> of kabob-casing for file names (my-about-page.html) and css classes (.my-about-page), and using PascalCasing for JavaScript classes in ES6 / TypeScript (MyAboutPage).</p>

<h2>Other generators</h2>

<p>Check out all the generators available: <code>ionic g --list</code></p>

<p><code>bash
~/Development/testing/MyIonic2App$ ionic g --list
Available generators:
 * component
 * directive
 * injectable
 * page
 * page-login
 * page-sidemenu
 * page-signup
 * pipe
 * tabs
</code></p>

<h1>Final words</h1>

<p>We hope you find the generators help you get started with ramping up quickly and building some awesome Ionic applications! Enjoy.</p>

<p>We&rsquo;d love your feedback, drop us a line at <a href="https://github.com/driftyco/ionic2/issues">Ionic v2 Github Issues</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular 2 and ng-model]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/21/angular-2-and-ng-model/"/>
    <updated>2015-10-21T23:00:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/21/angular-2-and-ng-model</id>
    <content type="html"><![CDATA[<p>Angular 2 introduces <code>ng-model</code> from Angular 1 in a completely different manner. Due to this, I wanted to make a quick post on how to use Angular 2&rsquo;s <code>ng-model</code> to build components that alert its parents app/component of changes.</p>

<p>I&rsquo;m going to use the <a href="https://github.com/driftyco/ionic-conference-app">Ionic 2 conference app</a> as an example.</p>

<p>In this post, we&rsquo;ll look at the schedule page in the app and see how it uses the <code>ion-search-bar</code> to update its <code>searchQuery</code> to filter out sessions from the schedule when the user changes the search input.</p>

<h2>The set up</h2>

<p>On the <a href="https://github.com/driftyco/ionic-conference-app/blob/master/www/app/schedule/schedule.js#L24">schedule component</a>, we set up the search query as a simple string, as such: <code>this.searchQuery = '';</code>.</p>

<p>Then in our <a href="https://github.com/driftyco/ionic-conference-app/blob/master/www/app/schedule/schedule.html#L21">schedule page template</a>, we tell the <code>ion-search-bar</code> to use the <code>ng-model</code> directive and tell it to two-way bind using the schedule component&rsquo;s <code>searchQuery</code> variable.</p>

<p>The template is like this:</p>

<p><code>html
&lt;ion-search-bar [(ng-model)]="searchQuery" placeholder="Search"&gt;&lt;/ion-search-bar&gt;
</code></p>

<p>Now, in the search bar, we need to take that <code>searchQuery</code> as an ngModel, and ensure the search-bar has a <a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/ng_control.ts#L14">value accessor</a> implemented, so that we may tell the schedule component of when things change to update its shadow DOM if need be.</p>

<p>The <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L46-L62">ion-search-bar</a> will take an <code>ngControl</code> as part of it&rsquo;s injection, and sets up the <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L61">value accessor</a> to itself, like so:</p>

<p>```js
constructor(
  elementRef: ElementRef,
  config: Config,
  ngControl: NgControl,
  renderer: Renderer
) {
  super(elementRef, config);
  this.renderer = renderer;
  this.elementRef = elementRef;
  if(!ngControl) {</p>

<pre><code>// They don't want to do anything that works, so we won't do anything that breaks
return;
</code></pre>

<p>  }</p>

<p>  this.ngControl = ngControl;
  this.ngControl.valueAccessor = this;
}
```</p>

<p>NOTE: <code>ngModel</code> extends the <code>ngControl</code> class in angular (<a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/ng_model.ts#L44">source code</a>). The <a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/ng_control.ts#L14"><code>valueAccessor</code></a> is a <a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/control_value_accessor.ts">ControlValueAccessor</a> is an interface that provides certain methods, like so:</p>

<p><code>js
export interface ControlValueAccessor {
  writeValue(obj: any): void;
  registerOnChange(fn: any): void;
  registerOnTouched(fn: any): void;
}
</code></p>

<p>The <code>ControlValueAccessor</code> gives us a method to write the new value, a method to register to listen to the changes, and the register on touched function to allow components to use.</p>

<p>Those are implemented in the search-bar, as seen <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L82-L92">here</a>.</p>

<p>You can see that the <code>writeValue</code> method on <code>search-bar</code> updates it&rsquo;s local <code>value</code>, so that it&rsquo;s internal <code>&lt;input&gt;</code> element can update its value it shows. When that internal input is changed, it calls the <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L94-L98">inputChanged</a> event on the <code>search-bar</code>, which alerts other components that it has changed, as well as updating its current value.</p>

<p>```js
  inputChanged(event) {</p>

<pre><code>this.writeValue(event.target.value);
this.onChange(event.target.value);
</code></pre>

<p>  }
```</p>

<h3>Filtering out sessions</h3>

<p>Since the <code>onChange</code> event is called, the <code>schedule</code> component will see this and cause re-evaluation on its <code>searchQuery</code> variable, and filters the code.</p>

<p>That makes our filtering method super easy, <a href="https://github.com/driftyco/ionic-conference-app/blob/master/www/app/schedule/schedule.js#L54">as seen here</a>, copied below for convenience:</p>

<p>`&ldquo;js
getSessionsForTheDay() {
  if (!this.searchQuery || this.searchQuery.trim() == &rdquo;) {</p>

<pre><code>return this.sessionsForTheDay;
</code></pre>

<p>  }
  var talks = [];
  this.sessionsForTheDay.forEach((session) => {</p>

<pre><code>var matched = session.talks.filter((v) =&gt; {
  if(v.name.toLowerCase().indexOf(this.searchQuery.toLowerCase()) &gt;= 0) {
    return true;
  }
  return false;
});
if (matched.length &gt; 0) {
  session.talks = matched;
  talks.push(session);
}
</code></pre>

<p>  });
  return talks;
}
```</p>

<p>When the schedule component&rsquo;s variable for <code>searchQuery</code> is updated, this method will be auto-magically re-evaluated, which causes the list to update.</p>

<p>Hope this helps you understand Angular 2 and ng-models better! Enjoy!</p>
]]></content>
  </entry>
  
</feed>
