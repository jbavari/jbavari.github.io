<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: phonegap | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/phonegap/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2019-12-12T21:32:46-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a chat client with Ionic / Socket.io / Redis / Node.js]]></title>
    <link href="http://jbavari.github.io/blog/2014/06/17/building-a-chat-client-with-ionic/"/>
    <updated>2014-06-17T00:09:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/06/17/building-a-chat-client-with-ionic</id>
    <content type="html"><![CDATA[<p>I wanted a fun challenge to push myself and cross a few things off my ever so growing <code>I want to play with this</code> type of lists. I love learning, and there are so many awesome tools / utilities / libraries out there to evaluate its hard to justify incorporating them into every project at work without having some knowledge of the tools.</p>

<p>DISCLAIMER: I may use some tools incorrectly, but the main purpose of this fun little project was to learn and have fun.</p>

<p>The list was this:</p>

<ul>
<li><a href="http://ionicframework.com">Ionic Framework</a></li>
<li><a href="http://socket.io">Socket.io</a></li>
<li><a href="http://redis.io">Redis</a></li>
<li><a href="https://github.com/mranney/node_redis">Node.js Redis client</a></li>
</ul>


<h2>The Idea</h2>

<p>I wanted to build a chat client that would have messages that disappear after a certain time, much like SnapChat. The idea also included the ability to create channels that also disappear after a certain time like messages.</p>

<p>In future versions, I&rsquo;d love to include location to join channels that are near you.</p>

<p>Users can join existing channels, or create their own. All users can see channels, and join any.</p>

<h2>Tech details &ndash; using Redis / Node.js</h2>

<p>At first, I wanted to create messages some how and have them each have <code>expire</code> times. After failing miserably, I got the amazing chance to pair up with <a href="https://twitter.com/michaelgorsuch">Michael Gorsuch</a> to give me some alternative ideas. (Shameless plug &ndash; if you need to do some server monitoring, check out his project <a href="http://canary.io/">Canary.io</a>, it&rsquo;s AWESOME).</p>

<p>The concept is &ndash; instead of using separate keys with ezxpire times &ndash; use Redis' sorted sets with scores of the times in UNIX format and the member being a JSON encoded string. I had my channels keys in the format of <code>messages:ChannelName</code>.</p>

<p>Something like:</p>

<p><code>
//ZADD key score member [score member ...]
zadd messages:RedisChat 10581098019 '{"name": "Josh", "id": "5"}'
</code></p>

<p>Now, when we want to get all messages for a channel, its simply:</p>

<p><code>
//ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]
zrangebyscore messages:RedisChat 0 10924019840
</code></p>

<p>Since I was using Node.js &ndash; I simply used <code>setInterval</code> to have a function be run that removes all old posts named <code>removeKeys</code>, and looked as such:</p>

<p>``` js
//NOTE: Using Moment.js, as well as having channelWatchList being populated
var channelWatchList = [&lsquo;Lobby&rsquo;, &lsquo;RedisChat&rsquo;];</p>

<p>function removeKeys() {
  console.log(&lsquo;We are removing old messages&rsquo;);</p>

<p>  for(var channelIndex in channelWatchList) {</p>

<pre><code>var channel = channelWatchList[channelIndex];
var messageChannel = 'messages:' + channel;
console.log('message channel', messageChannel)
var timeToRemove = moment().subtract('m', 1).unix(); //Remove messages before min ago

redisClient.zrangebyscore(messageChannel, 0, timeToRemove, function(err, result) {
  if(result &amp;&amp; result.length &gt; 0) {
    for (var resultIndex in result) {
      var message = JSON.parse(result[resultIndex]);
      //NOTE: Using socket.io
      io.emit('message:remove:channel:' + channel, { message: message, channel: channel });
    }
  }
});

redisClient.zremrangebyscore(messageChannel, 0, timeToRemove, function(err, result) {
  console.log('Removed ', result, ' messages');
});
</code></pre>

<p>  }
}
```</p>

<h2>The client &ndash; Ionic</h2>

<p>This was by far the easy part. First I just used the Ionic CLI to create a basic app.</p>

<p>I started by modifying the index.html file to include Socket.io. Nothing too fancy: <code>&lt;script src="js/socket.io.js"&gt;&lt;/script&gt;</code>.</p>

<p>Next, I used some AngularJS <a href="https://github.com/jbavari/ionic-socket.io-redis-chat/blob/master/client/RedisChat/www/js/services.js">services</a> for socket.io:</p>

<p>```
angular.module(&lsquo;services&rsquo;, [])</p>

<p>.factory(&lsquo;socket&rsquo;, function socket($rootScope) {
  var socket = io.connect(baseUrl);
  return {</p>

<pre><code>on: function (eventName, callback) {
  socket.on(eventName, function () {  
    var args = arguments;
    $rootScope.$apply(function () {
      callback.apply(socket, args);
    });
  });
},
emit: function (eventName, data, callback) {
  socket.emit(eventName, data, function () {
    var args = arguments;
    $rootScope.$apply(function () {
      if (callback) {
        callback.apply(socket, args);
      }
    });
  })
}
</code></pre>

<p>  };
})
```</p>

<p>Then, I constructed my <code>AppCtrl</code> to handle my <a href="https://github.com/jbavari/ionic-socket.io-redis-chat/blob/master/client/RedisChat/www/js/controllers.js">controllers</a> interaction with Socket.io:</p>

<p>``` js
angular.module(&lsquo;starter.controllers&rsquo;, [&lsquo;services&rsquo;])</p>

<p>.controller(&lsquo;AppCtrl&rsquo;, function($scope, $state, $filter, socket, Auth) {</p>

<pre><code>//Ensure they are authed first.
if(Auth.currentUser() == null) {
    $state.go('login');
    return;
}

//input models
$scope.draft = { message: '' };
$scope.channel = { name: '' };

//App info
$scope.channels = [];
$scope.listeningChannels = [];
$scope.activeChannel = null;
$scope.userName = Auth.currentUser().name;
$scope.messages = [];
</code></pre>

<p>///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
//Socket.io listeners
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////</p>

<pre><code>socket.on('channels', function channels(channels){
    console.log('channels', channels);

    console.log(channels);
    $scope.channels = channels;
});

socket.on('message:received', function messageReceived(message) {
    $scope.messages.push(message);
});

socket.emit('user:joined', {name: Auth.currentUser().name});

socket.on('user:joined', function(user) {
    console.log('user:joined');
    $scope.messages.push(user);
});

$scope.listenChannel = function listenChannel (channel) {
    socket.on('messages:channel:' + channel, function messages(messages) {
        console.log('got messages: ', messages);
        console.log(messages.length);
        for(var i = 0, j = messages.length; i &lt; j; i++) {
            var message = messages[i];
            console.log('message');
            console.log(message);
                console.log('apply with function');
            $scope.messages.push(message);
        }
    });

    socket.on('message:channel:' + channel, function message(message) {
        console.log('got message: ' + message);
        if(channel != $scope.activeChannel) {
            return;
        }
        $scope.messages.push(message);
    });

    socket.on('message:remove:channel:' + channel, function(removalInfo) {
        console.log('removalInfo to remove: ', removalInfo);
        var expires = removalInfo.message.expires;
        var expireMessageIndex = $filter('messageByExpires')($scope.messages, expires);
        if(expireMessageIndex) {
            $scope.messages.splice(expireMessageIndex, 1);
        }

    });

    $scope.listeningChannels.push(channel);

}
</code></pre>

<p>///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
// Controller methods
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////</p>

<pre><code>$scope.joinChannel = function joinChannel(channel) {
    $scope.activeChannel = channel;
    $scope.messages = [];

    $scope.channel.name = '';

    //Listen to channel if we dont have it already.
    if($scope.listeningChannels.indexOf(channel) == -1) {
        $scope.listenChannel(channel);      
    }

    socket.emit('channel:join', { channel: channel, name: Auth.currentUser().name });
}

$scope.sendMessage = function sendMessage(draft) {
    if(!draft.message || draft.message == null || typeof draft == 'undefined' || draft.length == 0) {
        return;
    }
    socket.emit('message:send', { message: draft.message, name: Auth.currentUser().name, channel: $scope.activeChannel });
    $scope.draft.message = '';
};

$scope.logout = function logout() {
    Auth.logout();
    $state.go('login');
}

//Auto join the lobby
$scope.joinChannel('Lobby');
</code></pre>

<p>})
```</p>

<p>All of the code can be found on <a href="https://github.com/jbavari/ionic-socket.io-redis-chat">github here</a>.</p>

<h3>Things to improve</h3>

<ul>
<li>Testing &ndash; for sure. I definitely failed in getting tests first</li>
<li>Removing the inline functions from Socket.io callbacks &ndash; not sure I like how I handled that to be honest</li>
<li>Improve the UI</li>
<li>Actually make the channels expire over time &ndash; and alert the user</li>
<li>Have some kind of location tracking to pull local channels near you</li>
</ul>


<p>Enjoy! Hope this helps any others learn some tips for developing in any of these technologies used!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving Forward with Phonegap / Cordova Plugins]]></title>
    <link href="http://jbavari.github.io/blog/2014/05/17/moving-forward-with-phonegap-slash-cordova-plugins/"/>
    <updated>2014-05-17T15:24:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/05/17/moving-forward-with-phonegap-slash-cordova-plugins</id>
    <content type="html"><![CDATA[<p>I spoke about how plugins work and how to create plugins in Cordova at KCDC. I wanted to make sure my slides are available to any who wanted to view them.</p>

<p>The slides are located <a href="http://jbavari.github.io/MovingForwardWithCordovaPlugins/">here</a>.</p>

<p>I hope this is helpful for some out there,
Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling Android Remote Debugging in Phonegap 2.9]]></title>
    <link href="http://jbavari.github.io/blog/2014/04/18/enabling-android-remote-debugging-in-phonegap-2-dot-9/"/>
    <updated>2014-04-18T10:13:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/04/18/enabling-android-remote-debugging-in-phonegap-2-dot-9</id>
    <content type="html"><![CDATA[<p>Recently the Cordova (as well as Phonegap) team has introduced <a href="http://www.raymondcamden.com/index.cfm/2014/1/2/Apache-Cordova-33-and-Remote-Debugging-for-Android">the ability to remote debug Android 4.4+</a> from <a href="https://issues.apache.org/jira/browse/CB-5487">this issue</a>.</p>

<p>If you&rsquo;re like us, you have a lot of invested technology into Phonegap 2.9, and are actively making the move to Cordova 3.4. In the real world, you aren&rsquo;t always granted conveniences to move to the latest and greatest all at one time when you have released products. <a href="http://www.raymondcamden.com/index.cfm/2014/4/11/Results-of-PhoneGap-Survey">Raymond Camden did a survey</a> and apparently there are still some out there utilizing Phonegap/Cordova 2.9.</p>

<p>I wanted to show how easy it was our team to backport some of the changes needed to enable Remote Debugging in Phonegap 2.9.</p>

<p>You&rsquo;ll need to make a few changes to your MainActivity.java file. The first is an import statement, and the second is to make these changes near the bottom of the onCreate method:</p>

<p>```
// At the top near your other import statements:
import android.webkit.WebView;
// ..snip..!</p>

<p>public void onCreate(Bundle savedInstanceState) {</p>

<pre><code>// ..snip..
// Enable web debugging
if(android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.KITKAT) {
    WebView.setWebContentsDebuggingEnabled(true);
}
</code></pre>

<p>}
```</p>

<p>One thing to note, this only works for Android versions 4.4 or greater! If you aren&rsquo;t using Android API 19 or greater, you&rsquo;ll have to keep using Weinre.</p>

<p>Now just start your app, enable USB debugging, open Chrome, go to about:inspect, and enjoy your remote debugging in Phonegap/Cordova 2.9! Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Properly using Plugins with variables in Phonegap / Cordova applications]]></title>
    <link href="http://jbavari.github.io/blog/2014/03/29/how-i-use-plugins-with-variables-in-phonegap-slash-cordova-applications/"/>
    <updated>2014-03-29T02:14:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/03/29/how-i-use-plugins-with-variables-in-phonegap-slash-cordova-applications</id>
    <content type="html"><![CDATA[<p>In the past week I&rsquo;ve been working on upgrading our mobile application from PhoneGap 2.9 to Cordova 3.4. (There is no real reason for going from PhoneGap to Cordova, just that I&rsquo;ve been actively committing to the Cordova project).</p>

<p>I&rsquo;ve come in contact with a weird bug with the Cordova CLI when using plugins that require variables to install them.</p>

<p>Currently <a href="http://devgirl.org/2013/11/12/three-hooks-your-cordovaphonegap-project-needs/">Holly Schinsky and Dan Moore</a> recommend using the <a href="https://github.com/apache/cordova-cli/blob/master/templates/hooks-README.md">Cordova Hook</a> <code>after_platform_add</code> to add in the plugins via a plugin list. While I too think this is a great idea, there is a small problem with it as of Phonegap/Cordova 3.4 when you use plugins with variables.</p>

<p>Before we go further, lets just get a quick intro to the platform hook calls that the <a href="https://github.com/apache/cordova-cli/blob/master/src/platform.js#l56">Cordova CLI</a> gives us. First it will fire off the scripts in the <code>/app/hooks/before_platform_add</code> (or <code>/app/.cordova/hooks/before_platform_add</code> if you&rsquo;re on PhoneGap/Cordova &lt;= 3.3) folder.</p>

<p>Next, Cordova CLI will go through some configs and eventually use a function named <code>call_into_create</code> that will do some housecleaning, but most importantly will <a href="https://github.com/apache/cordova-cli/blob/master/src/platform.js#l378">re-install currently installed plugins</a>.</p>

<p>Certain plugins will require variables for them to be installed. Take a look at the Phonegap Facebook Connect plugin, for example: <code>cordova plugin add https://github.com/phonegap/phonegap-facebook-plugin.git --variable APP_ID='appId' --variable APP_NAME='appName'</code>. Using Holly and Dan&rsquo;s solution, you an add that inline as well, like so:</p>

<p>```
var pluginlist = [</p>

<pre><code>"https://github.com/phonegap/phonegap-facebook-plugin.git --variable APP_ID='" + appId + "' --variable APP_NAME='" + appName + "'",
"org.apache.cordova.camera",
"org.apache.cordova.console",
"org.apache.cordova.contacts"];
</code></pre>

<p>var fs = require(&lsquo;fs&rsquo;);
var path = require(&lsquo;path&rsquo;);
var sys = require(&lsquo;sys&rsquo;)
var exec = require(&lsquo;child_process&rsquo;).exec;</p>

<p>function puts(error, stdout, stderr) {</p>

<pre><code>sys.puts(stdout)
</code></pre>

<p>}</p>

<p>pluginlist.forEach(function(plug) {</p>

<pre><code>exec("cordova plugin add " + plug, puts);
</code></pre>

<p>});</p>

<p>```</p>

<p>The problem is, when Cordova CLI goes through to reinstall the plugins, it isn&rsquo;t passing in the variables and will fail to install them, but it will still add the folder to the plugins directory and json file. In fact, after adding the plugins, it will then call the hook (as seen above) and try to install plug-ins yet a second time. And by fail, I mean it will still fail with the facebook plugin &ndash; cordova CLI failed therefore it&rsquo;s half installed, so the hook will fail. (I hope this is clear)</p>

<p>To recap, here&rsquo;s the flow of how to reproduce the problem:</p>

<ul>
<li>Create new project with <code>cordova create</code></li>
<li>Add platform for ios</li>
<li>Add plugin with variables &ndash; <code>cordova plugin add https://github.com/phonegap/phonegap-facebook-plugin.git --variable APP_ID='appId' --variable APP_NAME='appName'</code></li>
<li>Add platform for android</li>
</ul>


<p>That&rsquo;s when you&rsquo;ll see:</p>

<p>```
Installing com.phonegap.plugins.facebookconnect (android)
Error: Variable(s) missing: APP_ID, APP_NAME</p>

<pre><code>at /usr/local/lib/node_modules/cordova/node_modules/plugman/src/install.js:252:29
at _fulfilled (/usr/local/lib/node_modules/cordova/node_modules/q/q.js:798:54)
at self.promiseDispatch.done (/usr/local/lib/node_modules/cordova/node_modules/q/q.js:827:30)
at Promise.promise.promiseDispatch (/usr/local/lib/node_modules/cordova/node_modules/q/q.js:760:13)
at /usr/local/lib/node_modules/cordova/node_modules/q/q.js:574:44
at flush (/usr/local/lib/node_modules/cordova/node_modules/q/q.js:108:17)
at process._tickCallback (node.js:415:13)
</code></pre>

<p>```</p>

<p>You&rsquo;re probably wondering &ndash; why not add both of the platforms first, then add the plugin? That&rsquo;s what I recommend doing now.</p>

<p>However, going back to Holly and Dan&rsquo;s post, I highly recommend if you have any plugins with variables that you do a little clean-up of plugin&rsquo;s before adding them. And by clean-up, I mean, remove the plugins before adding them.</p>

<p>This should only be an issue until the awesome Cordova team fixes the issue of adding plugins correctly.</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to be a good imitator in PhoneGap/Cordova]]></title>
    <link href="http://jbavari.github.io/blog/2014/03/11/how-to-be-a-good-imitator-in-phonegap-slash-cordova/"/>
    <updated>2014-03-11T01:02:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/03/11/how-to-be-a-good-imitator-in-phonegap-slash-cordova</id>
    <content type="html"><![CDATA[<p>If you found your way here, then you&rsquo;re probably seeking knowlege about Phonegap/Cordova. I want to first remind you what the purpose of the PhoneGap / Cordova project is:</p>

<blockquote><p><a href="http://phonegap.com/2012/05/09/phonegap-beliefs-goals-and-philosophy/">The ultimate purpose of PhoneGap is to cease to exist.</a></p></blockquote>

<p>What this means is &ndash; you should really start getting ready to make Native-like apps regardless of what technology is used.</p>

<p>How can we give native apps a better feel from PhoneGap / Cordova? Or stated another way, what are some tricks we can use to make the application feel more native?</p>

<p>The answer then, is to be a better imitator, you must first understand what you are imitating.</p>

<h2>The chameleons change color to their surroundings</h2>

<p>Simply stated &ndash; you adapt to what your surroundings are.</p>

<p>Our surroundings for PhoneGap / Cordova are quite wide:</p>

<ul>
<li>iOS</li>
<li>Android</li>
<li>Windows Phone</li>
<li>BlackBerry</li>
<li>Firefox OS</li>
</ul>


<p>That is a lot to adapt to. It may take a little time to familiarize yourself with each platform. If you do though, your users will thank you.</p>

<h2>Some suggestions</h2>

<ul>
<li>Put navigation items near the top in Android, for iOS put them near the bottom. Users are used to having their navigation in the same place.</li>
<li>In Android / Windows Phone &ndash; mind the Back button! Users use their phones natively, and if you try to change this, they will hate your app.</li>
<li>Dont use the same button styles for each platform! Buttons on iOS do not look like buttons on Android &ndash; if you try this though, your users will notice and find it odd. <a href="http://goratchet.com/components/">See these great examples from Ratchet.js (look for the Base/iOS/Android buttons near the top)</a></li>
<li>Use Native-like loading animations. iOS generally has a small circle &ndash; if you try using this instead of your own custom loading icon, users will most likely blame their phone over your app. <a href="http://mercury.io/blog/the-psychology-of-waiting-loading-animations-and-facebook">See this study by Facebook for loading animations</a></li>
<li>Test on actual devices. You cant get a native feel from clicking on a simulator.</li>
</ul>


<p>References:</p>

<p><a href="http://www.tricedesigns.com/2013/03/11/performance-ux-considerations-for-successful-phonegap-apps/">Performance UX Considerations for successful PhoneGap apps</a></p>

<p><a href="http://www.mikedellanoce.com/2012/09/10-tips-for-getting-that-native-ios.html">Tips for getting that native feel</a></p>
]]></content>
  </entry>
  
</feed>
