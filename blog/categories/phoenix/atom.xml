<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: phoenix | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/phoenix/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2020-02-17T07:42:04-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom JSON encoding in Phoenix]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/24/custom-json-encoding-in-phoenix/"/>
    <updated>2016-01-24T19:30:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/24/custom-json-encoding-in-phoenix</id>
    <content type="html"><![CDATA[<p>I recently have been working a lot using Leaflet.js to do some mapping.</p>

<p>In some of my models, I use the lovely <code>Geo</code> package for Elixir point and geospatial usage. I needed to add support for Poison to encode my model.</p>

<p>I&rsquo;ve been serving geo json from my models, and I needed a way to use the JSON encoding way easier. I&rsquo;m sending some data out to a ZeroMQ socket so I need to encode it by transorming my Geo module in a way that I could encode it with Geo JSON.</p>

<p>I modified my model in two ways &ndash; one by putting the <code>@derive</code> directive to tell Poison to encode only certain fields. That is one way.</p>

<p>In another way, I needed to encode it everytime by calling the <code>Geo.JSON.encode</code> method without me having to do it. You can see that in the <code>defimpl</code>.</p>

<p>``` elixir
defmodule MyApp.Point do
  use MyApp.Web, :model</p>

<p>  # Option 1 &ndash; specify exactly which fields to encode
  @derive {Poison.Encoder, only: [:id, :name, :geo_json]}
  schema &ldquo;points&rdquo; do</p>

<pre><code>field :name, :string
field :position, Geo.Point
field :geo_json, :string, virtual: true

timestamps
</code></pre>

<p>  end</p>

<p>  def encode_model(point) do</p>

<pre><code>%MyApp.Point{point | geo_json: Geo.JSON.encode(point.position) }
</code></pre>

<p>  end</p>

<p>  defimpl Poison.Encoder, for: MyApp.Point do</p>

<pre><code>def encode(point, options) do
  point = MyApp.Point.encode_model(point)
  Poison.Encoder.Map.encode(Map.take(point, [:id, :name, :geo_json]), options)
end
</code></pre>

<p>  end
end
```</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Additional static paths in Phoenix]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/24/adding-additional-static-paths-in-phoenix/"/>
    <updated>2016-01-24T19:24:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/24/adding-additional-static-paths-in-phoenix</id>
    <content type="html"><![CDATA[<p>Phoenix is awesome.</p>

<p>A problem I ran into lately is how to add additional static paths to be served.</p>

<p>If you take a look in your <code>lib/endpoint.ex</code> file, you&rsquo;ll see the plug used for adding static paths:</p>

<p><code>elixir
plug Plug.Static,
  at: "/", from: :electronify, gzip: false,
  only: ~w(css fonts images js favicon.ico robots.txt)
</code></p>

<p>I wanted to add another folder to be served, &lsquo;zips&rsquo;, that I had to edit the <code>only:</code> line in the plug specification as such:</p>

<p><code>elixir
plug Plug.Static,
  at: "/", from: :electronify, gzip: false,
  only: ~w(css fonts images js favicon.ico robots.txt zips)
</code></p>

<p>There you have it, now I can access the files in the <code>zips</code> folder in <code>priv/static/zips</code> through the URL. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding PostgreSQL geometric type support to Elixir]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/07/adding-postgresql-geometric-type-support-to-elixir/"/>
    <updated>2015-12-07T18:04:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/07/adding-postgresql-geometric-type-support-to-elixir</id>
    <content type="html"><![CDATA[<p>In the last week or so, I&rsquo;ve had a blast playing around with basic Postgres <a href="http://www.postgresql.org/docs/9.4/static/datatype-geometric.html">geometric types</a> to do basic earth distance queries.</p>

<p>From my favorite blog, <a href="http://datachomp.com/archives/radius-queries-in-postgres/">Datachomp shows how to use radius queries in postgres</a> to find the closest place to get a burrito fix. Since I&rsquo;ve been on an <a href="http://elixir-lang.org/">Elixir</a> kick lately, I figured it was time to contribute back to the open source world by adding first class burrito, err, geometric type support.</p>

<h2>Initial reaction</h2>

<p>I immediately made an Ecto model trying to use the point type in my model:</p>

<p>``` elixir
defmodule MyApp.LocationPoint do
  use MyApp.Web, :model</p>

<p>  schema &ldquo;location_point&rdquo; do</p>

<pre><code>field :name, :string
field :date, Ecto.DateTime
field :location, :point
timestamps
</code></pre>

<p>  end</p>

<p>  @required_fields ~w(name date)
  @optional_fields ~w(location)</p>

<p>  @doc &ldquo;&rdquo;&ldquo;
  Creates a changeset based on the <code>model</code> and <code>params</code>.</p>

<p>  If no params are provided, an invalid changeset is returned
  with no validation performed.
  &ldquo;&rdquo;&ldquo;
  def changeset(model, params \ :empty) do</p>

<pre><code>model
|&gt; cast(params, @required_fields, @optional_fields)
</code></pre>

<p>  end
end
```</p>

<p>Right away, when I ran the commands to retrieve this location from <code>iex</code>, it gave me some errors:</p>

<p><code>
$ iex -S mix
$ alias MyApp.Repo
$ alias MyApp.LocationPoint
$ Repo.all(LocationPoint)
$ ** (ArgumentError) no extension found for oid `600`
</code></p>

<p>Right away, I knew this mission was up to me to get point support into Postgrex.</p>

<p>In this post, I&rsquo;ll outline how to add type support to Postgres via the Elixir package, <a href="https://github.com/ericmj/postgrex">postgrex</a>. We will walk through adding the <code>Point</code> data type in Postgres.</p>

<p>This post will cover:</p>

<ul>
<li>How to see how postgres stores its types (built in and composite)</li>
<li>How postgrex does its type lookups</li>
<li>Finding the source type &ndash; adding it to postgres senders</li>
<li>Looking up postgres source code for data mapping</li>
<li>Adding new type <code>Point</code> type</li>
<li>Adding built in <code>Type</code> structs</li>
<li>Adding encode method</li>
<li>Adding decode method</li>
</ul>


<h1>How Postgres stores its types</h1>

<p>Postgres stores its types in a special system table called <code>pg_type</code> (<a href="http://www.postgresql.org/docs/9.4/static/catalog-pg-type.html">docs</a>). It defines a few things about the type:</p>

<ul>
<li>Its <code>typelem</code> &ndash; how the type is stored &ndash; array, or otherwise</li>
<li>Its <code>typsend</code> &ndash; Output conversion function (binary format), or 0 if none</li>
<li>Its <code>typarray</code> &ndash; an oid to another array type that has its send method</li>
</ul>


<h1>How Postgrex does type lookups</h1>

<p>Postgrex at it&rsquo;s core is a simple data adapter into PostgreSQL from Elixir. It&rsquo;s an awesome library, and if you&rsquo;re using <a href="https://github.com/elixir-lang/ecto">Ecto</a>, you&rsquo;re already using it!</p>

<p>First, let&rsquo;s look at how they are loading most types, by looking them up in the <code>pg_type</code> table in postgres:</p>

<p>```
  ### BOOTSTRAP TYPES AND EXTENSIONS ###</p>

<p>  @doc false
  def bootstrap_query(m, version) do</p>

<pre><code>{rngsubtype, join_range} =
  if version &gt;= {9, 2, 0} do
    {"coalesce(r.rngsubtype, 0)",
     "LEFT JOIN pg_range AS r ON r.rngtypid = t.oid"}
  else
    {"0", ""}
  end

"""
SELECT t.oid, t.typname, t.typsend, t.typreceive, t.typoutput, t.typinput,
       t.typelem, #{rngsubtype}, ARRAY (
  SELECT a.atttypid
  FROM pg_attribute AS a
  WHERE a.attrelid = t.typrelid AND a.attnum &gt; 0 AND NOT a.attisdropped
  ORDER BY a.attnum
)
FROM pg_type AS t
#{join_range}
WHERE
  t.typname::text = ANY ((#{sql_array(m.type)})::text[]) OR
  t.typsend::text = ANY ((#{sql_array(m.send)})::text[]) OR
  t.typreceive::text = ANY ((#{sql_array(m.receive)})::text[]) OR
  t.typoutput::text = ANY ((#{sql_array(m.output)})::text[]) OR
  t.typinput::text = ANY ((#{sql_array(m.input)})::text[])
"""
</code></pre>

<p>  end
```</p>

<p>You can see that under the hood, we&rsquo;re querying Postgres and asking it for it&rsquo;s types, so we can do OID lookups and call the appropriate encoder/decoder methods. From here, we can match up our newly added types encoding/decoding methods.</p>

<h1>Finding the source type &ndash; adding it to postgres senders</h1>

<p>Find information about the geometrics category:</p>

<p><code>SELECT * from pg_type where typcategory = 'G';</code></p>

<p>We will see the point type has an oid of 600, which is using a send specification of <code>point_send</code>. Other notable send types for geometries: <code>point_send lseg_send path_send box_send poly_send line_send circle_send</code>.</p>

<p>Thus, we&rsquo;ll update the send types in postgrex, located in the <code>binary.ex</code> file:</p>

<p>``` elixir
@senders ~w(boolsend bpcharsend textsend varcharsend byteasend</p>

<pre><code>        int2send int4send int8send float4send float8send numeric_send
        uuid_send date_send time_send timetz_send timestamp_send
        timestamptz_send interval_send enum_send tidsend unknownsend
        inet_send cidr_send macaddr_send point_send
        ) ++ @oid_senders
</code></pre>

<p>```</p>

<p>Boom, that gets us the oid to encode/decode off of!</p>

<h1>Looking up postgres source code for data mapping</h1>

<p>I hopped into the Postgres source code and looked up the struct type for point, <a href="https://github.com/postgres/postgres/blob/master/src/include/utils/geo_decls.h#L58-L62">found here</a>.</p>

<p>``` c++
typedef struct
{
  double    x,</p>

<pre><code>    y;
</code></pre>

<p>} Point;
```</p>

<p>Great, its just two floats, no big deal.</p>

<h1>Adding the point struct</h1>

<p>Let&rsquo;s craft our Postgrex stuct type in <code>builtins.ex</code> then!</p>

<p>```
defmodule Postgrex.Point do
  @moduledoc &ldquo;&rdquo;&ldquo;
  Struct for Postgres point.</p>

<p>  ## Fields</p>

<pre><code>* `x`
* `y`
</code></pre>

<p>  &ldquo;&rdquo;&ldquo;
  require Decimal
  @type t :: %<strong>MODULE</strong>{x: float, y: float}</p>

<p>  defstruct [</p>

<pre><code>x: nil,
y: nil]
</code></pre>

<p>end
```</p>

<h1>Adding the encode method</h1>

<p>Now since we are sending PostgreSQL binary data, we need to take our data and map it to it&rsquo;s binary form, via an <code>encode</code> method.</p>

<p>However, postgrex is going to do a type look up, based on the types that we used in that query above.</p>

<p>We&rsquo;ll add the methods to encode, that does some pattern matching to decipher we are getting the correct sender value.</p>

<p><code>
def encode(%TypeInfo{type: "point", send: "point_send"}, %Postgrex.Point{} = point, _, _),
  do: encode_point(point)
</code></p>

<p>As you can see, we are encoding, when a <code>TypeInfo</code> tuple is passed with type <code>point</code> and <code>send</code> <code>point_send</code>! Great, we just pass that to this method to parse out the two floats passed in the binary object:</p>

<p><code>
defp encode_point(%Postgrex.Point{x: x, y: y}),
  do: &lt;&lt;x::float64, y::float64&gt;&gt;
</code></p>

<p>It just takes those two values, and serializes them down to their binary counterparts.</p>

<p>That now handles the test we&rsquo;ve got to keep us honest:</p>

<p><code>
test "encode point", context do
  assert [[%Postgrex.Point{x: -97, y: 100}]] == query("SELECT $1::point", [%Postgrex.Point{x: -97, y: 100}])
end
</code></p>

<p>This test as promised, takes a <code>Postgrex.Point</code> type, and encodes it to the binary form, and sends it off to Postgres. How beautiful.</p>

<h1>Adding the decode method</h1>

<p>Now, when we get binary values from Postgres, we need to map that to our <code>Point</code> type we&rsquo;ve created.</p>

<p>Adding the functions to <code>decode</code> in <code>binary.ex</code>:</p>

<p>```
def decode(%TypeInfo{type: &ldquo;point&rdquo;}, binary, <em>, </em>),
  do: decode_point(binary)</p>

<h1>..snip..</h1>

<p>defp decode_point(&lt;&lt;x::float64, y::float64>>) do
  %Postgrex.Point{x: x, y: y}
end
<code>``
The real meat and potatoes is, receiving our binary parameter, mapping its individual segmets as two floats, sized 8 bytes, and then with the pattern matching mapping those to our</code>Postgrex.Point` struct. QED.</p>

<p>And the test:</p>

<p><code>
test "decode point", context do
  assert [[%Postgrex.Point{x: -97, y: 100}]] == query("SELECT point(-97, 100)::point", [])
  assert [[%Postgrex.Point{x: -97.5, y: 100.1}]] == query("SELECT point(-97.5, 100.1)::point", [])
end
</code></p>

<h1>Conclusion</h1>

<p>Once I finally figured out what pieces were what, I was able to run and create the point type, its mappings, and its senders it required, easily mapping to the struct in Elixir.</p>

<p>I plan to keep working on postgrex, to add first class support for Postgres geometric types.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
