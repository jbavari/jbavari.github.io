<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2020-02-17T07:42:04-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mindset - book review]]></title>
    <link href="http://jbavari.github.io/blog/2020/02/01/mindset-book-review/"/>
    <updated>2020-02-01T11:32:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2020/02/01/mindset-book-review</id>
    <content type="html"><![CDATA[<p>I just finished reading Mindset: The psychology of success. I picked it up because it has been high on my list of books to read in the last year. The final driving point to read the book came after reading Switch: How to change things when change is hard.</p>

<p>I really enjoyed reading about the different mindsets we carry and how they affect our lives. The two main mindsets Dr. Dweck points out is the fixed and growth mindsets. What defines the fixed mindset is one of stasis. That stasis defines how the mind locks onto an idea and believes it is fixed in place. The growth mindset, however, is one that believes that growth came come with effort. An example here is intelligence. The fixed mindset believes one is born with a certain intelligence and it cannot change; the growth mindset believes with effort intelligence can blossom.</p>

<p>This book review will differ from my last, in that I&rsquo;m adopting a new format that I picked up from <a href="https://mtlynch.io/">Michael Lynch&rsquo;s blog</a> and his book reports section.</p>

<h2>What I liked</h2>

<ul>
<li>Overall, the stories being shared about the mindsets and how they infiltrate our every actions.</li>
<li>The mindset you choose is paramount to your ability to grow and learn. If you think you know everything, you cannot learn anything.</li>
<li>Effort is more important than ability. Ability can be gained from effort. No one is born a surgeon.</li>
<li>The journey one can take to be more in the growth mindset more. Personally, I find myself in the fixed mindset sometimes. I&rsquo;ve since <a href="http://jbavari.github.io/blog/2020/02/30/my-fixed-mindset-persona">labeled this fixed mindset persona, Bob</a>. Now that I&rsquo;m more aware, I can label Bob, I know when he comes out, and I can invite him to be more patient with me.</li>
<li>The many stories of John Wooden, Jack Welch, and other leaders who embodied the growth mindset and help pave a way for better leaders through the growth mindset.</li>
<li>Looking at others with compassion and knowing they may be facing their fixed-mindset persona in that moment.</li>
</ul>


<h2>What I didn&rsquo;t like</h2>

<ul>
<li>The book exposing the parts of myself that fall into the fixed mindset. I didn&rsquo;t like being labeled so clearly. It goes to show how important psychology is in our everyday life.</li>
</ul>


<h2>Key Takeaways</h2>

<h3>The Mindsets</h3>

<ul>
<li>A quote from the book: &ldquo;it is not some fixed prior ability, but purposeful engagement..it&rsquo;s not always the people who start out the smarteset who end up the smartest&rdquo;.</li>
<li>&ldquo;The hallmark of the growth mindset is the passion for stretching yourself and sticking to it, even (or especially) when it&rsquo;s not going well&rdquo;.</li>
</ul>


<h3>Inside the mindsets</h3>

<ul>
<li>&ldquo;Believing that success is about learning, students with the growth mindset seized the chance. But those with the fixed mindset didn&rsquo;t want to epose their deficiencies. Instead, to feel smart in the short run, they were willing to put their college careers at risk. This is how the fixed mindset makes people into nonlearners.&rdquo;.</li>
<li>There was a popular phrase in the 1960s: &lsquo;becoming is better than being&rsquo;. I could use more of this reminder in my day to day life.</li>
<li>People with the growth mindset know that it takes time for potential to flower.</li>
<li>There is nothing wrong with being &lsquo;special&rsquo;. The problem is when &lsquo;special&rsquo; begins to mean &lsquo;better than others&rsquo;. A more valuable human being. A superior person. An entitled person.</li>
<li>Lurking behind the self-esteem of the fixed mindset is a simple question: &ldquo;if you&rsquo;re somebody when you&rsquo;re successful, what are you when you&rsquo;re unsuccessful?&rdquo;</li>
<li>Even in the growth mindset, failure will still hurt. But it doesn&rsquo;t define you &ndash; it&rsquo;s a problem to be faced, dealth with, and learned from.</li>
<li>Even geniuses still have to work hard for their achievements. No matter what your ability is, effort is what ignites that ability and turns it into accomplishment.</li>
<li>&ldquo;Why is effort terrifying? Two reasons &ndash; one is that in the fixed mindset, great geniuses are not supposed to need it. So just needing it casts a shadow on your ability. The second is that, as Nadja suggests, it robs you of all your excuses. Without effort, you can always say, &lsquo;I could have been [fill in the blanks]&rsquo;&rdquo;.</li>
</ul>


<h3>The truth about ability and accomplishment</h3>

<ul>
<li>In the fixed mindset, things are fixed forever. This is not true. The world is comprised of change at every moment. In the fixed mindset, a loser is forever.</li>
<li>A story shared here captures the spirit of this book: &ldquo;All at once Jimmy &ndash; the most hard core turned-off low-effort kid in the group &ndash; looked up with tears in his eyes and said, &lsquo;You mean I don&rsquo;t have to be dumb?&rsquo; From that day on, he worked. He started staying up late to do his homework, which he never used to bother with at all.&rdquo; Just having the mindset of growth can push us to apply effort.</li>
<li>From the book: &ldquo;Is it ability or mindset? Was it Mozart&rsquo;s musical ability or the fact that he worked till his hands were deformed? Was it Darwin&rsquo;s scientific ability or the fact that he collected specimens nonstop from an early childhood?&rdquo;</li>
<li>&ldquo;Just because some people can do something with little or no training, it doesn&rsquo;t mean that others can&rsquo;t do it (and sometimes do it even better) with training&rdquo;</li>
<li>&ldquo;Telling children they are smart, in the end, made them feel dumber and act dumber, but claim they were smarter. We don&rsquo;t mean to rob others of their zest for challenge and recipe for success. But that&rsquo;s the danger&rdquo;</li>
<li>Labels can be dangerous. A story is shared that before tests, if students had to mark a checkbox of their label (say, african american) they were then set up with subconscious thoughts that harmed their achievements. Anything that could remind you of a stereotype could potentially rob you of your power. This doesn&rsquo;t happen to everyone, however, mainly those who are in the fixed mindset. When people are in the growth mindset, the stereotype doesn&rsquo;t disrupt their performance.</li>
<li>Try to find the tremendous effort tht went into others accomplishments &ndash; and admire them more for that.</li>
</ul>


<h3>Sports: The Mindset of a champion</h3>

<ul>
<li>A champion is someone who could raise their level of play when they needed to. When the match is on the line, they suddenly &ldquo;get around three times tougher&rdquo;.</li>
<li>Character is the ability to dig down and find the strength even when things are going against you.</li>
<li>An excerpt that hit me hard: &ldquo;All of these people had character. None of them thought they were special people, born with the right to win. They were people who worked hard, who learned how to keep their focus under pressure, and who stretched beyond their ordinary abilities when they had to.&rdquo;.</li>
<li>&ldquo;How good you are at sports will always improve if you work harder at it.&rdquo;</li>
<li>Mia Hamm tells us, &ldquo;after every game or practice, if you walk off the field knowing that you gave everything you had, you will always be a winner.&rdquo;</li>
<li>&ldquo;Those with the growth mindset found setbacks motivating. They&rsquo;re informative. They&rsquo;re a wake up call.&rdquo;</li>
<li>Be aware of the somebody-nobody syndrome. &ldquo;If I win, I&rsquo;ll be somebody; if I lose, I&rsquo;ll be nobody&rdquo;. Worrying about being a nobody is not the mindset that motivates and sustains champions. Somebodies are not determined by whether they won or lost. Somebodies are people who go for it with all they have. If you go for it with all you have, you will already be a somebody.</li>
</ul>


<h3>Business: Mindset and Leadership</h3>

<ul>
<li>&ldquo;The best leaders were ones not constantly trying to prove they&rsquo;re better than others. They don&rsquo;t highlight the pecking order with themselves at the top, they don&rsquo;t claim credit for other people&rsquo;s contributions, and they don&rsquo;t undermine others to feel powerful&rdquo;</li>
<li>Comparison leaders were typically concerned with their reputation for personal greatness, such so that they put companies up to fail after their regime ended. Collins put it: &ldquo;After all, what better testament to your own personal greatness than that the place falls apart after you leave.&rdquo;</li>
<li>The story here about Lee Iacocca, his time at Ford Motor Company, and his reign at the Chrystler corporation, where he rose and fall. His obsession with the fixed mindset and &lsquo;being the person in charge&rsquo; drove him to ultimately be pushed out.</li>
<li>Dr Dweck highlights an excerpt from the book &ldquo;Brutal Bosses&rdquo;, that represents the kind of abuse of power via the bosses&#8217; desire &ldquo;to enhance their own feelings of power, competence, and value at the subordinate&rsquo;s expense&rdquo;. &ldquo;These types of bosses have the power to make people worse off. And when they do, they feel better about themselves&rdquo;</li>
<li>Fixed mindset bosses are most threatened by competent people, because they are the ones who pose the greatest threat to the boss.</li>
<li>&ldquo;The minute a leader allows himself to become the primary reality people worry about, rather than reality being the primary reality, you have a recipe for mediocracy, or worse&rdquo;</li>
<li>Dr. Dweck outlines a story of Jack Welch, CEO of GE, who would frequent the front-line employees to get a better story of what his employees were facing. By doing this, he was more in touch with the company and garnered more respect from his employees. Dr. Dweck also shares the story of Jack Welch as a young engineer at GE, where he caused a chemical explosion. He immediately drove the hundred miles ot the company headquarters to face the music and explain himself to the boss. When he got there, the treatment he got was understanding and supportive. Jack Welch stated, &ldquo;Charlies reaction made a huge impression on me.. if we&rsquo;re managing good people who are clearly eating themselves up over an error, our job is to help them through it.&rdquo;. This type of leadership is the type of leadership I want to learn more of and act upon.</li>
<li>When leading a company, state that the company is about growth, not self-importance.</li>
<li>Companies should be in the business of &ldquo;not crowning a few princes, we need to work as a team. Genius is not enough; we need to get the job done.&rdquo;</li>
<li>Fixed mindset leaders are full of bitterness; growth mindset leaders are full of gratitude.</li>
<li>&ldquo;Managers with a growth mindset think it&rsquo;s nice to have talent, but that&rsquo;s just the starting point. These managers are more committed to their employees&#8217; development, and to their own.&rdquo;</li>
<li>Look for managers that embody the growth mindset, and they will grow others as well.</li>
</ul>


<h3>Relationships: Mindsets in love</h3>

<ul>
<li>A good french quote: &ldquo;Tout comprendre c&#8217;est tout pardoneer&rdquo; &ndash; &ldquo;To understand all is to forgive all&rdquo;.</li>
<li>There is no such thing as a &lsquo;no effort relationship&rsquo;. &ldquo;It takes great work to communicate accurately and it takes work to expose and resolve conflicting hopes and beliefs. It doesn&rsquo;t mean there is no &lsquo;they lived happily ever after&rsquo;, but it&rsquo;s more like, &lsquo;they worked happily ever after&rsquo;&rdquo;.</li>
<li>&ldquo;People with fixed mindsets see faults in their partners, become contemptuous of them and dissatisfied with the whole relationship. People with the growth mindset, on the other hand, can see their partners&#8217; imperfections and still think they have a fine relationship.&rdquo;</li>
<li>Couples that learned to respond to each other not with angry labels, but with helpful actions, were able to weather any storm.</li>
<li>Try to avoid thinking your partner is incapable of change. Once you do, nothing can improve the relationship.</li>
<li>Avoid people who make you feel bad about yourself.</li>
</ul>


<h3>Parents, teachers, and coaches</h3>

<ul>
<li>Try to plant the seed of the growth mindset in others; celebrate their efforts, downplay the ability.</li>
<li>Remember that when you compliment someone on their fixed &lsquo;ability&rsquo;, you may set them up for high expectations and trigger their fixed mindset thought patterns.</li>
<li>Stay away from praise that judges others intelligence or talent.</li>
<li>Drive home the idea that skills and achievement come through commitment and effort.</li>
<li>Help others <a href="http://www.paulgraham.com/lesson.html">see grades not as an end in themselves</a>, but as means to continue to grow.</li>
<li>Focusing on others fixed traits worries them and makes them complicated; they then focus on maintaining the fixed traits instead of applying effort to grow.</li>
<li>&ldquo;Compassion and consideration are the priorities of the highest order.&rdquo;</li>
<li>Lessons here from the basketball coaches: Wooden &ndash; where people become &ldquo;infected with success&rdquo;. Pat Riley calls it the &ldquo;disease of me&rdquo; &ndash; &ldquo;which is thinking one is the success and chucking the discipline and the work that got you there&rdquo;. &ldquo;Success lulls you. It makes the most ambitious of us complacent and sloppy.&rdquo;</li>
<li>Be aware of success &ndash; it can knock you into the fixed mindset. The idea of &ldquo;I won because I have talent. Therefore I will keep winning.&rdquo;</li>
</ul>


<h3>Changing mindsets</h3>

<ul>
<li>CH 8 &ndash; Dr. Dweck outlines a system to gaining more of the growth mindset. The first is knowing that everyone has a mix of the fixed and growth mindsets already; we must all acknowledge that fact, welcome to the human race.</li>
<li>The second step is becoming aware of what triggers the fixed mindset persona.</li>
<li>The third step is to give your fixed mindset persona a name. Maybe it was someone in your earlier life. Maybe it was from a book or a movie.</li>
<li>The fourth step is to accept it and invite it along on your journey to grow. Thank it for it&rsquo;s input, ask it to come along with you, allow it to subside. Accept that others have it and it may be a part of their struggles.</li>
<li>Look at others in a new light &ndash; maybe the times you think they are incompetent, stubborn, or defiant when they just don&rsquo;t know how to function in the current conditions. Perhaps they are battling their fixed mindset personas at that time. Offer to help. Learn and help learn.</li>
<li>Continue to ask yourself, &lsquo;what do I have to do to maintain and continue the growth?&rsquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something happened]]></title>
    <link href="http://jbavari.github.io/blog/2020/01/09/something-happened/"/>
    <updated>2020-01-09T20:52:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2020/01/09/something-happened</id>
    <content type="html"><![CDATA[<p>During high school and college I was a morning person. I loved getting up early in the mornings to read, play some video games, or any other topic that kept me in the &lsquo;flow&rsquo;.</p>

<p>Now I&rsquo;m a night owl. I focus the best around 8pm. I don&rsquo;t know why, my brain just decides to turn on. I&rsquo;ll get about an hour and a half of pure focus, then it&rsquo;s time to wind down around 9:30 PM.</p>

<p>I prefer to be an early bird. As much as I try to force it, it&rsquo;s just not the same level of focus as I get at night. As much as I want to change, I must accept that I&rsquo;m a night owl now.</p>

<p>Although I cannot change or understand the why, all that matters now is that I&rsquo;m aware of this change. Something happened. Accept it. That&rsquo;s the important part.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2020 Goals and Systems]]></title>
    <link href="http://jbavari.github.io/blog/2020/01/04/2020-goals-and-systems/"/>
    <updated>2020-01-04T21:17:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2020/01/04/2020-goals-and-systems</id>
    <content type="html"><![CDATA[<p>After doing a <a href="http://jbavari.github.io/blog/2020/01/01/2019-retrospective/">2019 in review</a>, I wanted to set up some new routines for some extra discipline in my life for 2020.</p>

<p>Some systems that I want to set up:</p>

<ul>
<li>Reading more.</li>
<li>Writing more.</li>
<li>Practicing mindfulness to achieve happiness.</li>
<li>Practicing <a href="https://blog.davidtate.org/clear-and-present-leadership/">clear and present</a> leadership everyday I can (which is everyday).</li>
<li>Spending time with friends and loved ones.</li>
<li>Traveling more.</li>
<li>Working on projects that help me grow my technical acumen and skillset.</li>
<li>Giving back to my community (technical, city, or other ways).</li>
<li>Speaking up in the community, at start up events, or technical events.</li>
<li>Maintaining a healthy life &ndash; through daily walks, working out, and getting back to training jiu jitsu 3 times a week.</li>
</ul>


<p>Now, those are my systems. Based on those systems, I&rsquo;d like to achieve some goals:</p>

<ul>
<li>Have listened (audible) to 40 books this year.</li>
<li>Have read (physical or kindle) 40 books this year.</li>
<li>Have finished writing a book draft for my first book.</li>
<li>Writing at least 2 blog posts a month.</li>
<li>Have been present and aware as much as I could physically and mentally.</li>
<li>Practicing leadership with people I mentor or in the community.</li>
<li>Camped 10 different sites with friends and family.</li>
<li>Traveled to two countries this year.</li>
<li>Completed a meaningful project that helps people sell their used goods.</li>
<li>Given a talk at Ignite Boulder.</li>
<li>Have spoke at one technical conference.</li>
<li>Get back to a healthy 185lbs and be healhy enough to train jiu-jitsu 3 times a week consistently.</li>
</ul>


<p>I realize many of these goals seem binary, and thus, hard to measure. I will measure them by marking a calendar with the days that I achieve the above conditions. By the end of the year, I should see a high percentage of successes in the goals.</p>

<h1>Stop, Start, Continue</h1>

<p>I just read <a href="https://qbq.com/3-step-upgrade-how-to-become-a-better-me/">the QBQ 3-step upgrade post</a> about how to &lsquo;be a better me&rsquo;. I wanted to try out that exercise here.</p>

<h2>I will stop doing</h2>

<ul>
<li>Complaining about things unless I&rsquo;m willing to act on it.</li>
<li>Playing the victim card. I am taking full accountability.</li>
<li>Accusing other people for things that make me unhappy, I will make that my internal focus.</li>
<li>Doing things that do not bring me joy.</li>
<li>Masking my anger by using sarcasm.</li>
</ul>


<h2>I will start doing</h2>

<ul>
<li>Measuring what matters to me &ndash; my reading, my exercise, my habits.</li>
<li>Taking accountability for my actions.</li>
<li>Doing more self-care activities, like physical therapy, exercise, etc.</li>
<li>Doing more, talking less.</li>
<li>Living more by a budget.</li>
<li>Practicing randicle candor.</li>
<li>Reaching out to my parents on a daily/weekly cadence.</li>
</ul>


<h2>I will continue doing</h2>

<ul>
<li>Being kind whenever possible, it&rsquo;s always possible</li>
<li>Helping others when I can (the idea: in order to survive you, I must first survive myself)</li>
<li>Reaching out to others to give positive reinforcement.</li>
<li>Being a supportive son and brother to my family. Being a supportive person to my friends.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Finishing - Book Review]]></title>
    <link href="http://jbavari.github.io/blog/2020/01/03/start-finishing-book-review/"/>
    <updated>2020-01-03T21:55:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2020/01/03/start-finishing-book-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently diving into a book recommended by Seth Godin &ndash; Start Finishing. This book is primarily aimed at supplying people with additional approachs to tackling &lsquo;important problems&rsquo;.</p>

<h1>Part 1 &ndash; Clearing the decks for your best work</h1>

<h2>Chapter 1 &ldquo;Someday&rdquo; can be today</h2>

<p>Charlie drives right to the point &ndash; you know what your best work is, and when you are not doing it. We thrive when we do our best work. Best work is defined as work that is important to you. Your best work also requires dropping the busy work and focusing on the work. The more important to you, the easier it is to get displaced by other things.</p>

<p>Best work projects generally take 3 to 5 years.</p>

<h3>No ideas, only projects</h3>

<p>Throughout the book, the author Charlie Gilkey describes that there are no ideas that we work on, we work on projects. The important part here being, deciding what we need to do to complete these projects. By figuring out what we say no to, we can say yes to the right things. This book starts by breaking down some systems one can take to figure out what the right things are, they &lsquo;burying&rsquo; the rest.</p>

<h2>Chapter 2 &ndash; Getting to your best work</h2>

<p>Charlie talks about the &lsquo;air sandwich&rsquo; &ndash; which is a gap between your vision, mission, purpose, and big goals being one side of the slice of bread. The other being your day-to-day reality. Between these slices lies the air sandwich.</p>

<p>These are created from:</p>

<ul>
<li>Competing priorities</li>
<li>Head trash</li>
<li>No realistic plan</li>
<li>Too few resources</li>
<li>Poor team alignment</li>
</ul>


<p>Head trash is pretty straight forward, it&rsquo;s the negative thoughts you tell yourself. Cut that crap out!</p>

<p>You can combat the 5 issues above with:</p>

<ul>
<li>Intention</li>
<li>Awareness</li>
<li>Boundaries</li>
<li>Courage</li>
<li>Discipline</li>
</ul>


<p>A good tip here that Charlie suggests is tryign to align competing priorities. He also suggests taking out the head trash by being aware of it, having the backbone to challenge it, and the discipline to adjust it.</p>

<h2>Chapter 3 &ndash; pick an idea that matters</h2>

<p>Charlie suggests doing some inner soul searching here to find what really matters to you. Some practices &ndash; trying out mind mapping, asking some questions to challenge our head trash and doubts as well as thrashing, and avoiding creative constipation.</p>

<p>Creative constipation is defined as having a ton of creative projects that keep piling up, but that we cannot finish. This leads to just like human nature, where it becomes uncomfortable. Charlie points out that there is a known tradition that links creativity and destruction: the same energy that fuels creation also fuels destruction. We must be aware of this and funnel that energy in the right direction.</p>

<p>Charlie also puts failure in a new light &ndash; its a learning mechanism.</p>

<h3>Displacement is your friend</h3>

<p>To make room for your best work projects, you must displace other lower level work. This means, saying no to projects. Saying no to other peoples projects that dont mean much to you or aren&rsquo;t backed by purpose. Pointing out here, to trade up, you have to let go. By holding on to one thing, you cannot take another.</p>

<p>Charlie gives some great exercises here to find out what means the most to you, some steps that you can take to identify what the best work project really is.</p>

<h1>Part 2 &ndash; Planning your project</h1>

<h2>Chapter 4 &ndash; Convert your idea into a project</h2>

<p>Charlie reminds us of SMART goals &ndash; which are simple, meaningful, actionable, realistic, and trackable. He gives some questions here on how to measure each of these. There are also some steps to help make the goals more SMARTy.</p>

<p>Charlie also asks us to mark each project with levels of success, being it small, medium, or large. By identifying it up front, we can avoid beating ourselves up when a goal doesn&rsquo;t meet our expectations. We are laying out the expectations up front so to not be tricked later.</p>

<p>No date = No finish</p>

<h3>Success pack</h3>

<p>Gather a group of people who will support you along your best work projects. Turn to them when you need help, guidance. These can be mentors, but not necessarily there with you. They can be like in the book &ldquo;Think and Grow Rich&rdquo;, where you could ask yourself what that person would do, even when they are not physically there or available for a call.</p>

<h2>Chapter 5 &ndash; Make space for your project</h2>

<p>Charlie stresses that there is no time unless you make it. If your project is important, you will find a way to block up times in your day to focus on it.</p>

<p>Some steps:</p>

<ul>
<li>Chunking</li>
<li>Linking</li>
<li>Sequencing</li>
</ul>


<p>By doing these steps, we can create a plan to make space for the project.</p>

<p>Finding the goal of this chapter is that it&rsquo;s a marathon, not a sprint. Plan the sprints to be only three focus blocks per week to maintain momentum, efficiency, and focus.</p>

<p>Think of the chunks of work over time as blocks. You can have so many blocks per week.</p>

<p>The project pyramid. Made of Yearly Goal at the top, quarters, months, then weeks.</p>

<p>There are blocks of time to schedule, based on some categories:</p>

<ul>
<li>Focus Blocks</li>
<li>Social Blocks</li>
<li>Admin Blocks</li>
<li>Recovery Blocks</li>
</ul>


<h3>The 5 projects rule</h3>

<p>Charlie states that the human mind can at best focus on 5 projects. Any more and we will thrash more, as it takes 16 minutes to refocus on a task from interruption or refocusing on a new task type.</p>

<p>Charlie also reminds us to make time for recovery, as we&rsquo;re in this for a marathon, not a sprint.</p>

<h3>3 focus blocks per week</h3>

<p>By only having three focus blocks per week per project, we avoid &lsquo;thrash crash&rsquo;, which is the price we pay for bouncing between projects and refocusing. Try to be aware of this and plan accordingly.</p>

<h2>Chapter 6 &ndash; Build your project road map</h2>

<h3>Finding your true flow &ndash; Gates</h3>

<p>Focus on your strengths, use them to your advantage. Use this gage to find your strengths:</p>

<ul>
<li>Genius &ndash; what seems to be an expression of an inner creative force</li>
<li>Affinities &ndash; what you&rsquo;re drawn to</li>
<li>Talents &ndash; what seems to be your native skills or capabilities</li>
<li>Expertise &ndash; What you&rsquo;ve learned through experience and practice</li>
<li>Strengths &ndash; What seems to come easy for you</li>
</ul>


<p>Charlie here calls our Jonathan Fields and his Sparketypes that can help guide along your strengths. Charlie also calls for a budget that you can use to support yourself along your best work projects. By spending some money on yourself, within budget, you can buy more time to work on your best work projects. The example he gives here is brilliant &ndash; paying for grocery delivery service if it takes time away from your project during your highly creative times.</p>

<h3>Shared mental models</h3>

<p>Charlie gives some symbological meanings to completing by giving some simple mental models. It&rsquo;s not really the ideas here that are original, but rather the ideas with their corresponding mental models that make this book shine.</p>

<h3>Head Trash</h3>

<p>For example, I catch myself sabotoging my own projects, ideas, or thoughts. The mental model i&rsquo;ve had before has been &lsquo;what I say when I talk to myself&rsquo;, Charlie calls this &lsquo;head trash&rsquo;. The symbology there is powerful &ndash; trash being something that is stinky and we don&rsquo;t need to keep around but we keep around in our heads.</p>

<p>Charlie then attacks the more important questions that revolve around momento mori &ndash; that you have only so many &lsquo;best work&rsquo; ideas left in your life. This number is found by taking 85, subtracting your age, and dividing by 5 and rounding down. This time for projects</p>

<h3>Creative constipation</h3>

<p>Another great mental model is one of &lsquo;creative constipation&rsquo;. In that, when we have a fun creative idea, we may not act on it. And all humans have experience with constipation, it&rsquo;s very uncomfortable. Charlie addresses this again by stating, by finishing one, we can move on to the next. However, if we start, and perhaps do not finish, it will build up to those uncomfortable levels.</p>

<h3>Success Pack</h3>

<p>This is the idea that with it takes a village to raise a kid. Like the kid, the project too needs champions that can help keep you on the path to success.</p>

<h2>Chapter 7 &ndash; Keep flying by accounting for drag points</h2>

<p>The mental model here is that engineers need to account for drag the more and more velocity they are moving at. The same thing works here for projects, be aware of it. The person most guilty of adding drag to your project is you.</p>

<p>There are some no-win stories you tell yourself.</p>

<h3>Myths</h3>

<p>We tell ourselves myths about success, like it will wreck or prevent a relationship, the success vs virtue myth, and the &lsquo;what if i cant do it again&rsquo; myth. These are all false. Many can go on to create success without any bad effects, as long as one plans the blocks appropriately.</p>

<h3>Mediocracy</h3>

<p>We often choose mediocrity in the short term, because we don&rsquo;t want to succeed due to the no-win myths above. But we also don&rsquo;t want to fail &ndash; mediocrity is the space between success and failure.</p>

<h3>OPP</h3>

<p>OPP = other peoples priorities. This can take you away from your best work. Learn how to get away from them. The longer your best work project goes on, the more OPP you&rsquo;ll have to contend with it. Plan ahead that you need to respond to them. If you aren&rsquo;t clear about your priorities, you&rsquo;ll continually be beset with OPP.</p>

<p>Look for opportunities that you can include OPP into your own work, somehow.</p>

<h3>Derailers and Naysayers</h3>

<p>There will always exist some that will take you off your project and into doubt. Derailers might now know that they are derailing you. Tell them or get curious to see why they do that.</p>

<p>Naysayers are just that, haters are going to hate. Avoid them. Or instead, turn to your success pack.</p>

<p>Charlie says:</p>

<blockquote><p>Every ounce of energy you use grappling with a naysayer is much better spent on working on your project and interacting with your success pack</p></blockquote>

<h3>Project post-mortems</h3>

<p>Take some time during a project to do a post-mortem. This isn&rsquo;t to say the project will die, but look for opportunities to improve. Of course, you can also benefit by attempting to think through these things from the start, of course. Attempt to do as much learning as you can.</p>

<h1>Part 3 &ndash; Working the Plan</h1>

<h2>Chapter 8 &ndash; weave your project into your schedule</h2>

<h3>Basic rules</h3>

<p>The weekly block schedule, the Five projects rule, and your project road map together create a plan that you can follow and space to do the work.</p>

<p>Momentum planning is Charlie&rsquo;s term for the continual process of making and adjusting plans across all time perspectives. This means, doing weekly reviews, morning planning, and triaging. This also means weaving in the time blocking, project pyramid, and the Five Projects rule.</p>

<h3>Make sure your environment is working for you</h3>

<p>The environment can define the working conditions. Charlie gives an example of how during his graduate school time, most of his best writing happened in 6 years over about 60 days. This was because he tackled writing at the library.</p>

<p>The environment you work in is very important &ndash; providing for your focus, momentum, and creativity.</p>

<h3>Stacking and Batching</h3>

<p>Charlie makes the good point that it takes 16 minutes to refocus after being pulled from focus. There are some tricks he suggested, calling them stacking and batching.</p>

<p>Stacking = doing multiple things at once, when concentration is not required. The example here, while doing laundry, listen to an audiobook. While it seems like it&rsquo;s multitasking, it&rsquo;s not. Due to the less needs of the cognitive side of the brain, this becomes easy to do, riding the muscle memory train. Other examples: doing a meeting over a hike, exercising in the park while with the kids.</p>

<p>The second is batching &ndash; the example being that you set up admin blocks (described before) to check email, do your paperwork, etc. Batch them up together to tackle in one go around.</p>

<h3>Reducing the dread-to-work ratio</h3>

<p>Referencing the famous Mark Twain comment of eating a frog in the morning. Do it as early as possible, so that the rest of the day does not sap your creative and cognitive functions, while also decreasing the dread-to-work ratio of your day.</p>

<p>Dread is a function of time, meaning that if a chunk of work takes 5 minutes, it still takes 5 minutes. However, the &lsquo;dread&rsquo; increases substantially with time. The longer it sits there, the more dread you&rsquo;ve invested into the task. It&rsquo;s the psychological size that haunts you more than the task at hand.</p>

<p>Charlie states that the time you dread the task itself, the distinction becomes blurred, to the point that the time you spend worrying or thinking about it could have spent doing other things. If possible, batch the frogs together.</p>

<p>However, not all frogs can be done early in the morning, as they may require focus blocks. There will always be frogs, it&rsquo;s best to address them for what they are and set up some time to get them done.</p>

<h3>5 / 10 / 15 split</h3>

<p>This little time split reminds you to keep 5 projects at max, with 10 minutes for momentum planning before you start your day, and 15 minutes at the end of your day. This keeps you focused on the daily level.</p>

<p>Try to not plan too far out ahead, the example being you do not plan every gas break, stop light, and every other part of your travel if you are taking a car trip.</p>

<h2>Chapter 9 &ndash; Build Daily Momentum</h2>

<p>Make sure you celebrate small wins. Lean more on your success pack to help you identify wins.</p>

<p>Remember that great is the enemy of done. The more you care about the project, the less &lsquo;done&rsquo; it can achieve.</p>

<p>Create a win journal and store small wins there. The more small wins you get, the more momentum it builds. The more small wins, the better the big win will become.</p>

<p>Create routines and habits that make it easier to build and maintain momentum.</p>

<p>Charlie also suggests leaving a &lsquo;bread crumb&rsquo; trail, which will help you pick back up on projects when you leave them for a bit.</p>

<p>Charlie also addresses some tips you can use to avoid distractions:</p>

<ul>
<li>Use dumb tech</li>
<li>Turn off notifications</li>
<li>Delete apps or remove capabilities</li>
<li>Lock yourself out &ndash; Mac has Cold Turkey blocker, for example</li>
<li>Create better defaults during transition periods to replace the distracting defaults you may have</li>
</ul>


<h3>Cascades, tarpits, and logjams</h3>

<p>This is a nice mental model he shares &ndash; cascades are when one project gets behind, it cascades down. Tarpits are when you leave a project for so long, that when you come back to it, it&rsquo;s stuck in a tar pit and hard to get out. Log jams are what happen when you have too many projects and they get jammed and stuck all at once. Avoid these by the 5 project rule, leaving bread crumbs, and planning appropriately.</p>

<h2>Chapter 10 &ndash; Finish Strong</h2>

<p>Know that by finsihing one project, you are not done. There is more work to be done. It never ends. However, when you finish one project, make sure you take a victory lap and celebrate the win. Lean into your success pack to help drive this.</p>

<h3>CAT work</h3>

<p>CAT = clean up, archive, trash</p>

<p>This is the process you take between projects to clean up any artifacts, archive all the things before, and trash what you no longer need. If you don&rsquo;t do this between projects, you may waste time in the middle of a project doing these. That becomes a distraction.</p>

<h3>After action reviews</h3>

<p>In agile land, these are basically retrospections. Take time to ask the questions to improve later.</p>

<ul>
<li>What went well?</li>
<li>What setbacks, challenges, or missteps did I experience?</li>
<li>What did I learn?</li>
<li>What habits, practices, or routines do I want to keep doing going forward?</li>
<li>Were there any especially important difference makers to the project?</li>
</ul>


<p>However, one thing is important here. Finishing a best-work project unlocks new realities. Embrace them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knowledge consumption routine]]></title>
    <link href="http://jbavari.github.io/blog/2020/01/02/knowledge-consumption-routine/"/>
    <updated>2020-01-02T17:00:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2020/01/02/knowledge-consumption-routine</id>
    <content type="html"><![CDATA[<p>I love having conversations with other people about reading. Topics in the realm of what they read, why they read, how much they read, where they read, and the habits of how they read. The amount of choices available to any person at any time are at an all time high and ever rising.</p>

<p>Knowledge itself is an enormous black hole &ndash; not in the sense that it&rsquo;s pulling everything in to it, but that it&rsquo;s ever growing and potentially endless. The amount of words written is expanding universal levels! OK, I&rsquo;m getting way off topic of the point of this post. But.. Try and think for a second that everything that has been written by humans in their lifetime, some captured, some lost in time. The sheer amount of numbers is exponential.</p>

<p>That being said, I&rsquo;ve recently taken the <a href="https://www.goodlifeproject.com/sparketypes/">Sparketypes quiz</a> from Jonathan Fields (came across while reading the book Start Finishing). Turns out, I&rsquo;m a Maven and a Sage. Which for those unaware, a Maven is someone who loves learning for learning sake and a Sage is one who enjoys sharing and teaching others things.</p>

<p>So if all that there is to know is a black hole, I&rsquo;m an scientist flying through space attempting to observe and learn it all while radioing back home the messages.</p>

<p>Anyways&hellip;</p>

<p>I wish I could find some way to calculate the amount of hours I consume reading on the internet, books, kindle, as well as audio based content.</p>

<p>I&rsquo;m going to try and outline my reading habits in this quick little post in an attempt to shed some new ideas for others looking for a good reading routine.</p>

<p>I read and consume many bits of information:</p>

<ul>
<li>Daily email newsletters</li>
<li>Internet blogs and articles</li>
<li>Physical books</li>
<li>Audible</li>
<li>E-books on my Kindle</li>
</ul>


<p>Additionally, I have some habits in my reading that others have asked me about. I honestly cannot remember where I learned the habit of reading whenever I can. I think it was Bill Gates or someone who said they read when they&rsquo;re in line, when they&rsquo;re waiting for someone to meet up with, etc etc. That&rsquo;s exactly the approach I go for. I try and read during:</p>

<ul>
<li>The morning rise</li>
<li>The daily walk(s)</li>
<li>Throughout the day</li>
<li>Wrapping up the night</li>
<li>While I&rsquo;m driving (audiobooks)</li>
<li>When I&rsquo;m waiting for a friend to arrive, using my Kindle app</li>
<li>Sometimes during lunch (I keep my kindle with me at most times)</li>
<li>While I&rsquo;m out for lunch or dinner</li>
<li>Literally any chance I can get when my brain is enaged</li>
</ul>


<p>Now, I&rsquo;ll try to outline my consumption of these mediums and habits!</p>

<h1>The content mediums</h1>

<h2>Regularly Occurring Email Newsletters</h2>

<p>I subscribe to a lot of interesting fellows in the psychology, self help, and other various &lsquo;self-improvement&rsquo; email newsletters. I really enjoy some of their articles as brainstorming seeds and kicking off discovery of new ideas. I&rsquo;ll estimate I spend anywhere from 5-10 minutes on either the post itself or links to other articles on the website.</p>

<ul>
<li><a href="https://seths.blog/subscribe/">Seth Godin</a> &ndash; varies in length, great thoughts about anything in marketing, sales, psychology, and all around thought provoking material.</li>
<li><a href="https://dailystoic.com/new-start-here/">The Daily Stoic</a> &ndash; daily writings of the stoicism philosophy, from Ryan Holiday&rsquo;s interpretations.</li>
<li><a href="https://ryanholiday.net/reading-newsletter/">Ryan Holiday&rsquo;s newsletter</a> &ndash; book recommendations from Ryan Holiday himself.</li>
<li><a href="https://markmanson.net/newsletter">Mark Manson (Mondays)</a> &ndash; spitballed content from Mark Manson&rsquo;s email.</li>
<li><a href="https://www.nirandfar.com/subscribe/">Nir Eyal</a> &ndash; behavioral design newletter.</li>
<li><a href="https://www.danpink.com/ac/latest-newsletter/">Daniel Pink</a> &ndash; author of Drive, A Whole New Mind, and more &ndash; weekly content.</li>
<li><a href="https://qbq.com">QBQ</a> &ndash; from the author John G Miller, ideas about accountability.</li>
</ul>


<h2>Internet blogs and articles</h2>

<p>I&rsquo;d say I spend about 5-20 minutes sometimes longer, varying from available article content and the interest of content to me.</p>

<ul>
<li><a href="https://news.ycombinator.com">Hacker News</a> posts &ndash; any that tickle my brain (it&rsquo;s a lot)</li>
<li>Related professional topics in my work hours (software related, leadership articles, system design, etc)</li>
</ul>


<h2>Physical books</h2>

<p>At anytime, I have a stack of about 2-3 books that I want to read. I get these from many sources, and right now, there is no rhyme or reason to my choosing of a physical book over an e-book.</p>

<p>How I choose the books is still a mystery to me. At the time of writing this, I have a few piled up on my bookshelf ready to be read; my queue consists of: Black Box Thinking, The Black Swan, Getting to Yes, and Aware.</p>

<p>I&rsquo;ll usually ask for books for any gifts any want to give me as a go-to when someone asks what I&rsquo;d like.</p>

<h2>Audible</h2>

<p>I walk my dog every morning. This time on the walk is some prime time for mindfulness as well as listening to some quality audiobook content. I&rsquo;m a huge audible fan.</p>

<p>I love having some positive thoughts shared on my walk. As of late, it&rsquo;s been focused on leadership, mindfulness, and philosophy. Nothing better than getting a day started with some positive thoughts filling up your subconscious, as our minds tend to absorb whatever is in the community consciousness. At the time of writing this, i&rsquo;ve been listening to Stillness is the Key and The Art of Power.</p>

<h2>E-books on my kindle</h2>

<p>I just got a Kindle paperwhite as an upgrade from my very old Kindle 3rd Edition (the one with the keyboard). While at first skeptical, I&rsquo;m now in love with my paperwhite. Not only does it have a nice back light &ndash; but it&rsquo;s super portable to take in my back pocket to sneak out over lunch or when I get a free moment. I also have the app on my phone, which let&rsquo;s me read when I&rsquo;m in a waiting scenario, like at the doctors office, waiting in line, etc etc. I try to sneak as much reading on the go with my kindle, as well as when I&rsquo;m stationary at home.</p>

<h1>My reading routine</h1>

<h2>The morning rise</h2>

<p>First off, I&rsquo;ve moved my cell phone away from my bed side stand. I&rsquo;ve replaced it with my old Kindle (3rd edition). This small habit change has me grabbing for my old kindle rather than diving into whatever my smart phone demands of me. This small trick instantly gets me in the mindset to read first.</p>

<p>I wake up and read the Seth Godin post first. I love that these daily emails provide insight into common day sales and marketing strategy and tactics. Additionally, I love that Seth Godin thinks of the human in us and aims to appeal to that side of us.</p>

<p>I then read the Daily Stoic post from Ryan Holiday. I love the constant reminder that we&rsquo;re human, our time on this earth is temporary, and we will need to be kind to all. That and I&rsquo;m a sucker for the stoicism philosophy in any form.</p>

<p>Finally, I go to my comfy recliner chair and read either my kindle or a book, whichever I&rsquo;m into (Currently: &ldquo;Start Finishing&rdquo; on Kindle and &ldquo;Black Box Thinking&rdquo; in book form).</p>

<p>From here, I at get at least 15-30 minutes of reading time, pending more if I&rsquo;m super interested in the book.</p>

<h2>The daily walk(s)</h2>

<p>Once the clock finally hits 8:30 AM or so, my little dog Amaya demands a walk. Great! Now I get some time to listen to my audio book while we go on our daily 1.5 mile walk. Sometimes more, sometimes less. Regardless, this gets me about 10 hours of listening a month. Audible also gives some other fun stats for listening &ndash; my minimum listening time was in November of this year, at 5h 52m. My maximum, oddly enough not due to the weather, is December with 20h 48m!</p>

<h2>Throughout the day</h2>

<p>While the day rolls along, I try to sneak in some reading time anyway I can. I might bust out my kindle over lunch while I&rsquo;m at work. I might read a few internet articles / blogs / or whatever else I might find interesting throughout the day.</p>

<p>While I&rsquo;m at work, I try to look up blog posts that are relevant either to leadership, management, programming, communication, or any other issue I am currently working through during my very dynamic days.</p>

<h2>Wrapping up the night</h2>

<p>Now that I&rsquo;ve got my kindle next to my bedside stand &ndash; I try to grab a few minutes of reading while I&rsquo;m jumping into bed. This small hack of removing my phone has given me one option &ndash; the kindle. I already struggle with insomnia and I&rsquo;m finding that having the kindle there helps me read a bit and unwind. By this point, I need something to stop the constant sensory overload that the smart phone provides.</p>

<p>I might grab anywhere from 15-30 minutes at my night time reading routine.</p>

<h2>Putting it all in perspective</h2>

<p>Again, these numbers are mainly hail mary estimates.</p>

<p>Morning: 15m-30m (daily newsletter) + 30m-1h (book reading) + 50m (audible) = 1h 30m &ndash; 2h 20m</p>

<p>Day: 15m &ndash; 1h</p>

<p>Night: 15m &ndash; 30m</p>

<p>Coming to a guessed grand total for a minimum of 2 hours to a maximum of 3 hours and 50 minutes.</p>

<p>For just a small time investment, I can steal quite a good chunk of learning time. Since I&rsquo;m being sucked into the knowledge black hole, I tend to lose track of times in my small reading habits. That&rsquo;s OK by me though, since the constant reading habits help enforce knowledge retention since many books seem to cover similiar material, thus being stored to my long term storage!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2019 retrospective]]></title>
    <link href="http://jbavari.github.io/blog/2020/01/01/2019-retrospective/"/>
    <updated>2020-01-01T21:33:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2020/01/01/2019-retrospective</id>
    <content type="html"><![CDATA[<p>2019 has been a wild ride for me. It was a year of many things, filled of some first time experiences, humbling encounters, some character building sessions, some personal growth lessons, and most of all, tons of small improvements.</p>

<p>If I had to wrap up 2019 in one word, it would be: <em>acceptance</em>.</p>

<p>Why that word? First of all, perception and awareness must happen first before alternate actions can be suggested. Second being, once you can become aware of the facts, you must accept them. I have to admit, I struggle with acceptance. I am willing to embrace that the obstacle is the way forward.</p>

<p>Don&rsquo;t get me wrong though, 2019 was a good year, I am very fortunate to be where I am today.</p>

<p>Let&rsquo;s do the traditional retrospection of 2019 and then dive into the details a bit more.</p>

<h2>Key learnings in 2019</h2>

<ul>
<li>Self development is like bathing &ndash; you have to do it everyday</li>
<li>Take more time for yourself to rest and see the forest from the trees</li>
<li>There is no easy to road to anything, you must do the work</li>
<li>How you see yourself truly is how others will see you</li>
</ul>


<h2>2019 &ndash; What went well</h2>

<h3>My company was acquired by Amazon</h3>

<p>This news alone was huge for me. I had joined <a href="http://canvas.technology/">Canvas Technology</a> in December of 2015. I had just parted ways working for <a href="https://ionicframework.com">Ionic</a>. At the time, I really wanted to dive into another domain in the field of Computer Science. Lucky for me, there was an opening for Canvas Technology and I had joined when there was only a wooden cart prototype. Man, I got in early, and I was excited to be a part of the vision to come.</p>

<p>Fast forward 4 years later and we&rsquo;re being acquired by one of the largest industrial robotic companies in the world. What an honor, one of which I was hopeful that our company could help push autonomous robotics forward with.</p>

<p>This acquisition was huge for me, it empowered me to pay off my dads loans, take my parents to London, pay off my cars, and has enabled a life for me which I had only dreamed of.</p>

<p>I&rsquo;ve got to meet tons of intellectuals, highly skilled engineers, and all around amazing people at Amazon. The whole experience has been really humbling that a successful company like Amazon Robotics wanted to buy something I helped build.</p>

<p>As awesome as it&rsquo;s been, I&rsquo;ve had to accept that this is my new role. I&rsquo;ve had to accept that I&rsquo;m now a part of something bigger &ndash; something that is not just a little start up. I&rsquo;ve had to <a href="https://firstround.com/review/give-away-your-legos-and-other-commandments-for-scaling-startups/">accept to give up my legos</a>. My strong sense of ownership now had to be passed off to new groups taking over my old domains. I&rsquo;ve had to accept that I&rsquo;m no longer in charge of my engineering teams. I&rsquo;m accepting that I&rsquo;m now stepping back into a single engineer position over managing multiple teams. It&rsquo;s been hard, but it&rsquo;s been fulfilling and necessary to force this growth cycle on me. I&rsquo;m embracing it with my whole being.</p>

<h3>I had an amazing trip to London with my parents</h3>

<p>In July, my parents and I departed to the UK to visit one of my fathers friends from his youth, his old old soccer buddy, Khosrow. They had not seen each other in 20 or so years. The whole experience was so heart filling, relaxing, and very adventuresome.</p>

<p>I got to watch my father share stories of his home town in Iran. I got to hear his friend and my father discuss old Iranian culture, fun bits of experiences in their time, as well as meeting Khosrow&rsquo;s very kind and wholesome family.</p>

<p>From this trip &ndash; Khosrow opened up to me like one who has embraced all avenues of life &ndash; the joys of building his own home in England, his sorrows of losing his dog, his horror of losing his best friend in England, and his scares of cancer. I could see the house he had built was put on pause &ndash; his reasoning was that the last year had taken a toll on him and he hadn&rsquo;t had the will or energy to move on.</p>

<p>What this taught me &ndash; I must accept this same fate. We all must. The love of fate. Amor Fati. The acceptance to know that we all must die. Momento mori.</p>

<p>I saw myself in Khosrow &ndash; in that one day I will be in his position. I must accept that the time in the now is the only time I truly have. I must take it for all it is worth.</p>

<h3>I began leading an amazing team at Amazon</h3>

<p>While a year ago, I read the 5 Dysfunctions of a Team. At the time, our team was really struggling to get feature development done while we struggled to support the deployments we currently had. I decided that I could make a bigger impact with my engineering skills, and that getting a manager for the team I had built would help our velocity pick back up.</p>

<p>Post acquisition, the manager on the team wished to get back to product management, where he came from before. I decided from there on &ndash; I would do the best job I could at managing and leading the team. I put my management hat back on and forged forward.</p>

<p>What I struggled with the most here was that &ndash; while I can manage and lead a team, that is not my passion. While I believe that <a href="https://www.amazon.com/dp/B0076DDBJ6/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1">skills will trump passion</a>, I had to accept that I&rsquo;m a passion driven person. This is why I&rsquo;ve always gone the route of start ups &ndash; because these kind of companies are truly guided by a passion to disrupt the world.</p>

<h3>I incurred an injury</h3>

<p>I love training jiu-jitsu. I enjoy the ultimate challenge it brings &ndash; in that there is always someone who is training more than you, who is more skilled than you, and the humbling that it forces upon you.</p>

<p>While training in May, I had a fellow training partner get me in an arm bar from the mount position &ndash; except this arm bar was different, he took my arm and pushed it towards my head. Immediately a loud snapping sound occurred. Following that, immense pain that seered from my arm to my fingers. I knew something was very wrong.</p>

<p>I did as one did &ndash; immediately went to a doctor to get it checked out. The ultra sound showed that my ulnar collateral ligament (UCL) had been torn. The Dr suggested that we could do platelette rich plasma (PRP) injections to speed up the healing. I wasn&rsquo;t willing to accept that taking time off from training was the best thing for me, I wanted to speed it up. I paid the money and got the PRP injections.</p>

<p>Fast forward to the end of the year &ndash; I&rsquo;m still dealing with some pain in my elbow, I get some odd popping sounds when I do a bicep curl, something is not right.</p>

<p>Again, that acceptance word &ndash; I had to accept that I had an injury I needed to nurse. I had to accept that I was not resting appropriately. I had to accept that taking time off, doing physical therapy, and getting back on the track was the best way to continue training until my old age. I also want to accept the mindset that I have an injury, I am <em>not</em> injured. That mindset is important.</p>

<h2>Acceptance of fate</h2>

<p>Amor Fati. I must appreciate that these experiences above are shaping me for a better version of myself.</p>

<p>I must accept, and embrace, that asking for help is not a sign of weakness. It is a sign of strength &ndash; knowing that you can evolve to the next level by learning from others. Isn&rsquo;t that why we are all here?</p>

<p>The car you are driving, the coffee you are drinking, the heat that you feel in the bed you sleep in &ndash; those are all things that others have given their time to provide to you.</p>

<p>Accept the help. Embrace it. It will empower you if you let it.</p>

<p>Now, I&rsquo;m looking forward to <a href="http://jbavari.github.io/blog/2020/01/04/2020-goals-and-systems/">2020 and the goals</a> I am setting up to become an even better version of myself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I read]]></title>
    <link href="http://jbavari.github.io/blog/2019/12/29/why-i-read/"/>
    <updated>2019-12-29T17:00:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/12/29/why-i-read</id>
    <content type="html"><![CDATA[<p>Let me ask you a quick question: if you know that reading is essential to certain parts of learning and growth, then you already know why you read, but is it deeper than that? Is it something engrained in our subconscious minds through hundreds if not thousands of years of evolution?</p>

<p>In today&rsquo;s current society, the internet has enabled an entire species to read and listen on a global scale. Reading and listening is the de facto mechanism in which to share human knowledge to many generations past. There are endless amounts of digital content one can get through the medium of the internet. (I try and <a href="http://jbavari.github.io/blog/2020/01/02/knowledge-consumption-routine/">dive into that here</a>)</p>

<p>NOTE: I&rsquo;m going to bucket the &lsquo;watch&rsquo; category into listen and/or read. People read tons of online junk anyway!</p>

<p>We know it in old caves as wall carvings and paintings. There is the knowledge those cavemen passed along to their tribe. The unfortunate thing about that was that only those who veered onto the wall could read the message. The other issue would be &ndash; whose cave was this, anyway?! (and what are these large dinosaurs?!) These messages might be wrong or have a different method of thinking than we currently do now. There&rsquo;s no way to remediate the differences, since the author may not always be available for discussion.</p>

<p>The internet, in some sense, eased this burden by providing an infinite level of walls that tribes could erect mass cave paintings in the endless amount of caves.</p>

<p>However, the internet has also enabled another mystery to the human mind: the paradox of choice. How does one today pick what to absorb next? in the millions of physical books, digitial e-books (and scanned copies of ancients), audio books, journals, online journals, blogs, and the bucket category of &lsquo;web pages&rsquo; out in the world?</p>

<blockquote><p>“Learning to choose is hard. Learning to choose well is harder. And learning to choose well in a world of unlimited possibilities is harder still, perhaps too hard.” ― Barry Schwartz, The Paradox of Choice: Why More Is Less</p></blockquote>

<p>Capturing the knowledge itself once found is a near impossible task, I&rsquo;m not going to even touch on that topic because it&rsquo;s thoroughly argued over enough on Hacker news. I&rsquo;m going to attempt to share how I got to my filter to make reading an absolute enjoyable part of my life. Hop on over to my <a href="http://jbavari.github.io/knowledge">knowledge</a> page, as I try to capture my knowledge sources there.</p>

<p>What isn&rsquo;t clear to me as of late is &lsquo;why&rsquo; I read what I read. I&rsquo;m attempting to write this post to enlighten myself and others about this filter that occurs when I move on to my next book.</p>

<h1>My Caves</h1>

<p>The caves I absorb from now come from a variety of sources:</p>

<ul>
<li>Email newsletters</li>
<li>Audible content</li>
<li>Kindle / E-books</li>
<li>Physical Books</li>
</ul>


<p>Let&rsquo;s dive into how I select each of these.</p>

<h2>My filtering pattern</h2>

<p>For the 2019 year, I wanted to aim for reading two books a month aimed at two topics: personal growth and professional acumen growth. Sometimes, the books would be both. Other times, it would be totally random. It just so happens that what I read for joy is also in lined with what I love: psychology &ndash; how the human mind works.</p>

<p>I chose these two topics because they are areas that I would like to strengthen a bit more.</p>

<p>When it comes to choosing email newsletters, I may easily follow the newsletters of authors that I&rsquo;ve enjoyed reading their books. The first that come to mind are Seth Godin, Nir Eyal, Daniel Pink, and Ryan Holiday. Many of these authors share a common stereotype &ndash; sales, marketing, psychology, and connection with vulnerability.</p>

<p>I often joke that if I didn&rsquo;t go the computer science route, I would have gone to neuroscience or psychology. I&rsquo;m a hobbyist psychologist, with no patients who need my help.</p>

<p>Certainly hitting the ripe age of 35 has triggered me to think more about philosophy, the meaning of the world, the strive to end or defer suffering, and the ability to see the world anew.</p>

<p>I&rsquo;ve driven into professional development &ndash; being a manager for the last year or so has given me a &lsquo;eyes wide open&rsquo; view to the world of management. Most of my reading has been more than management though &ndash; it&rsquo;s more on leadership. However, I know and understand that <a href="https://qbq.com/leadership-management/">the best managers are the best leaders</a>.</p>

<p>When I go to pick the next book, I apply the following pattern:</p>

<ul>
<li>Look for the latest area of researchers in the domain.</li>
<li>Look for the oldest area of researchers in the domain.</li>
<li>Look at any book references that came about in the last book I read. (Many times the references are where the author pulled some of her knowledge from, so that&rsquo;s another great source.)</li>
<li>I keep a rolling list of reads that may be interesting &ndash; either from emails, books references from TED or Ignite talks, and more.</li>
</ul>


<p>Some examples of this pattern:</p>

<p>&ldquo;Well Geez, Josh. I seem to be ultra distracted lately and not being able to finish anything. What does the research say on this?&rdquo;</p>

<blockquote><p>I then look up books in the focus domain. I find a few: Indistractable, Get out of your own way, The art of communicating, The art of thinking clearly, The Organized Mind, and Atomic Habits. These all seem like good reads. What knowledge sources did these authors pull from? Are there any TED talks about this? Do these speakers have any references or leads they throw out in the talk? What about friends recommmendations? Who is the most focused person I know? What suggestions do they have on the topic, or leads, or books, etc?</p></blockquote>

<p>Certainly there is more to the pattern than what I posted above, but that&rsquo;s my first stab at trying to understand my pattern.</p>

<p>Once I&rsquo;ve decided what to read, I then decide on the medium.</p>

<h2>Audible vs reading</h2>

<p>When I choose a book, I think of which medium will be best to absorb it. Mainly I turn to kindle these days, because it can go with me everywhere. If a subject is interesting enough that I want to absorb it throughout the day, then Kindle is the de facto choice.</p>

<p>However, sometimes I will choose audible over reading because I want to absorb it while I&rsquo;m walking, driving, or have some free time doing chores around the house.</p>

<p>The key here is &ndash; can I absorb this content while using my hands &ndash; or do I want to absorb it fully? When it comes to physical vs kindle, I mainly go kindle due to the accessibility. However, if someone is asking me for a gift, I ask for physical!</p>

<h1>But, why?</h1>

<p>Why such the obsession with the human mind? In this world of a growing number of human mind and intelligence, I want to know what drives people. Certainly, there is the book <a href="https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805">Drive</a>, but I&rsquo;m not concerned with the drive that people have in the competitive world of business. But rather, why do people do what they do? What is the engine in their minds and hearts and what fuel is driving it?</p>

<p>Recently, I took one of the many online quizes and learning that I&rsquo;m a Maven type. This seemed to align with my intuition, which makes a ton of sense to my obsessions with learning for learning sake.</p>

<p>But still.. What am I looking to learn? I lean an ear towards psychology, philosophy, science, and technology. Why?</p>

<p>If I had another life to live (which I know is not reality), I would spend that life hopefully learning all the things I didn&rsquo;t learn the first time around.</p>

<p>If I absolutely had to put a reasoning to my thirst for knowledge, it would be this:</p>

<p>I have a deep joy of learning. It&rsquo;s the true lesson that I learned from college. (Paul Graham <a href="http://www.paulgraham.com/lesson.html">also wrote an essay on this</a>). I have a deep fear about not knowing. I&rsquo;m not content with the &lsquo;it is what it is&rsquo; phrase. In the last year though, I&rsquo;ve tried to change that phrase to be &lsquo;I accept it for how it is&rsquo; &ndash; but not until learning why. Once I can learn every 1% of the why, I am more willing to accept the why.</p>

<p>Yet, I&rsquo;ve still not found the answer to what lies in the heart of man to drive the decisions he makes. Maslow&rsquo;s hierarchy of needs surely comes close to these ideals, but are those same motiviations still in tact today the same as when Maslow thought up the idea in 1943?</p>

<p>Certainly most parts of this world still seek the bottom layers of Maslow&rsquo;s needs, but what about the higher levels today in the first world?</p>

<p>Maybe I&rsquo;ll never learn why I read what I read. Certainly writing this post hasn&rsquo;t lead me any closer to understand my own drive, so what chance do I have in getting closer to understanding others? I guess I will have to accept that asking one person and their answer must suffice.</p>

<p>The last bit I will sketch out is that in today&rsquo;s day and age, we know and understand that the subconscious mind drives us &ndash; like the rider on the elephant, it goes where it will go no matter the tugging and please from the riders. Even asking someone their drives will still not reveal their elephants desires, because they themselves do not know it.</p>

<h1>Closing notes</h1>

<p>As per the book, Psycho Cybernetics, it is our own self-image that we seek to align with our actions. Perhaps my self-image is one that I am a seeker of knowledge, no matter the effort or cost. Surely, the Sparketypes quiz I took that states I&rsquo;m a maven lines up with that self-image. Even if the quiz was a placebo to enhance this self-image, I&rsquo;m taking it.</p>

<p>I&rsquo;ll continue to read to absorb as much knowledge as I can, and attempt to write as much as I can to help share this knowledge. All for the sake of knowledge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Take Action Now]]></title>
    <link href="http://jbavari.github.io/blog/2019/12/23/take-action-now/"/>
    <updated>2019-12-23T20:52:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/12/23/take-action-now</id>
    <content type="html"><![CDATA[<p>I feel that there is a lot of things I can say about the world today. First, there is a lot of bullcrap that we churn through in our minds. You know the sort that I&rsquo;m talking about &ndash; the self deception. The thought that I&rsquo;m going places, without taking the action to take those steps to start that path. Those new years resolutions. Those goals that you write down, but do not get action items defined and set up on the calendar. Those same action items you don&rsquo;t check in on from time to time. Things that we tell ourselves that we&rsquo;ll get to tomorrow. We rarely do. We think in terms of intentions &ndash; and judging ourselves retroactively based on those intentions rather than the actions.</p>

<p>Our actions become who we are. This much is true by everyone. Most people carry a picture of themselves in their mind that they think they are. In those that really are that person of action, rarely spend time thinking of what they should be doing. They are currently working towards being what they should be, instead of thinking of it. &ldquo;A good plan, violently executed now, is better than a perfect plan next week.&rdquo; &ndash; George Patton.</p>

<p>They used to call George Patton &ndash; old blood and guts. Here&rsquo;s his thoughts on embracing your part to play, regardless of the role:</p>

<p>&ldquo;All of the real heroes are not storybook combat fighters, either. Every single man in this Army plays a vital role &hellip; . Don’t ever think that your job is unimportant. Every man has a job to do and he must do it. Every man is a vital link in the great chain.&rdquo;</p>

<p>This same mindset exists in today&rsquo;s day and age. We all have a crucial role to play in the world of hate. We must lay steadfast in our power in the world. Strive the be the best at what you do. We all pay our part back to mankind. When we embrace what our purpose is &ndash; and strive to better in that department &ndash; we make the world a better place.</p>

<p>When you find yourself becoming paralyzed by needing a perfect plan, remember: you came here to serve, to take action, to think through a plan, and to execute. Don&rsquo;t get hung up on the plan phase too long or you won&rsquo;t get to play your part. Only your actions echo through time.</p>

<p>Here&rsquo;s a trick to take action sooner &ndash; if you&rsquo;re starting a new project or path, think of a few things that you have done already towards that goal.</p>

<p>For example, when setting a weight loss goal: &ldquo;I want to get down to 185&rdquo;. You could tell yourself, &ldquo;I&rsquo;m at 205, down from 220. I&rsquo;m already down 20%&rdquo;.</p>

<p>Citing some psychology tricks I&rsquo;ve pulled from the book, &ldquo;Switch: How to change things when change is hard&rdquo;. This book tells a story about sales tactics &ndash; one store gives customers a &lsquo;buy 8, get one free card&rsquo;. Another store gives customers &lsquo;buy 10, get one free&rsquo;, but they give the first 2 items starting off the bat. The second store sees an 80% return in customers. The psychology here is, they&rsquo;ve gotten started, the momentum is there.</p>

<p>Remember, physics always wins. Momentum exists in our mind, overcome that by using the gravity of starting conditions to help it along.</p>

<p>Keep a calendar to keep momentum going. Put an &lsquo;X&rsquo; on the date to remind yourself of the building momentum. Once it starts, it will be harder to stop.</p>

<p>Take action now. Get started. That starting momentum can carry you along.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery - Book Review]]></title>
    <link href="http://jbavari.github.io/blog/2019/11/10/continuous-deilvery-book-review/"/>
    <updated>2019-11-10T11:16:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/11/10/continuous-deilvery-book-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;m still diving into the <a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_4?crid=3LLBV00FE8TG3&amp;keywords=continuous+delivery&amp;qid=1576211505&amp;sprefix=continuous+deliv%2Caps%2C192&amp;sr=8-4">Continuous Delivery book</a>. I wanted to sketch out some (very) sparse notes in an attempt to retain the material.</p>

<h1>Chapter 1</h1>

<h2>Common release Anti-patterns</h2>

<ul>
<li>Deploying software manually</li>
<li>Deploying to a production-like environment only after Development is complete</li>
<li>Manual configuration management of production environments</li>
</ul>


<h2>Stages of a deployment pipeline</h2>

<ul>
<li>The commit stage &ndash; compile, unit test, analysis, build installers</li>
<li>Automated acceptance testing</li>
<li>Automated capacity testing</li>
<li>Manual testing &ndash; showcases, exploratory, testing</li>
<li>Release</li>
</ul>


<h3>Deploying to a production-like environment only after Development is complete</h3>

<h4>Problems</h4>

<ul>
<li>Ensure teams are working towards production type releases on a regular cadence, not in extended periods of time.</li>
<li>Manual configurations cause issues &ndash; work towards trying to automate those portions.</li>
<li>Scripts to do the deployments are better than manual steps written up. Documentation goes out of date, requires extra effort to keep alignment.</li>
<li>Need tighter collaboration between development and deployment teams.</li>
<li>Deploying to staging faster (where environments are closer to production) helps uncover issues, bind the dev/ops teams, and drives fixes to deployments faster.</li>
<li>The bigger diff between deployment and production environments</li>
</ul>


<h4>Solutions</h4>

<ul>
<li>Rehearse deployments to a staging or production-like environment several times before actually going to production.</li>
<li>Make sure everyone who is doing the deployments are working together on the deployments from the start of the project.</li>
<li>Make the cornerstone of deployment a means of testing both software and deployments throughout the process.</li>
</ul>


<h3>Manual configuration management of production environments</h3>

<h4>Signs of this anti-pattern</h4>

<ul>
<li>Having deployed successfully to many times to staging, the deployment to production fails.</li>
<li>The operations teams take longer to prepare an environment for a release.</li>
<li>You cannot step back to a prior configuration of your system.</li>
<li>Servers in the operating environments, unintentionally, have different versions of operating systems, third-party infrastructure, libraries, or patch levels.</li>
<li>Configuration of the system is carried out by modifying the configuration directly on production systems.</li>
</ul>


<h4>Solutions</h4>

<ul>
<li>All aspects of testing, staging, and production specifically the configuration of any third-party elements of the system should be applied from version control through an automated process.</li>
<li>The only way to make changes to production should be done through an automated process.</li>
<li>Make it possible to see at a glance what the currently released version of every piece of software is.</li>
<li>Make releases boring &ndash; to the point where they are cheap, low-risk, frequent, rapid, and predictable.</li>
</ul>


<h2>How to achieve these solutions?</h2>

<ul>
<li>Automate &ndash; make it repeatable without failure.</li>
<li>Frequent &ndash; make deltas between releases smaller to reduce risk and get immediate feedback.</li>
</ul>


<p>Three criteria to make feedback to be useful:
* Any change, whatever kind, needs to trigger the feedback process.
* The feedback must be delivered as soon as possible.
* The delivery team must receive feedback and then act on it.</p>

<p>How to get this feedback?</p>

<p>Working software decomposed into 4 components:</p>

<ul>
<li>Executable code</li>
<li>Configuration</li>
<li>Host environment</li>
<li>Data</li>
</ul>


<p>You should aim to have the executable code to be reused everywhere it is needed and never rebuilt.</p>

<p>Any change to an applications configuration, in whichever environment, should be tested with a representative range of the example systems.</p>

<p>If the environments are to changed, the whole system should be tested with the changes to the environment.</p>

<p>Finally, if the structure of the data changes, the change must also be tested.</p>

<p>The authors mention a few simple feedback checks:</p>

<ul>
<li>The software should fulfill certain requirements such as test coverage and other technology-specific metrics.</li>
<li>The software&rsquo;s functional acceptance tests must pass. This is a test on the business acceptance criteria.</li>
<li>The software&rsquo;s nonfunctional tests must pass &ndash; in regards to capacity, availability, security, and so on to meet it&rsquo;s users needs.</li>
</ul>


<p>Another key point the authors bring up that implementing a deployment pipeline is resource-intensive, especially once you have a comprehensive automated test suite. One of the key objectives is to optimize for human resource usage: we want to free the people to do the interesting work and leave repetition to machines.</p>

<p>The authors suggest to aim for 75% or so of the codebase.</p>

<h3>Breaking down the steps of the pipeline</h3>

<p>If tests fail in the early stages of the pipeline, they should not advance. We should aim to build a high confidence in the software in the first set of tests.</p>

<hr />

<p>Random notes:</p>

<p>CH1 &ndash; author recommends to get cross-functional groups all along the process. Also aim to have retrospections with the entire crew of developers, infra/operations, and testing</p>

<p>Being able to react to feedback also means broadcasting information. Using big, visible dashboards and other notification mechanisms. Also aim to make one is present in each team room.</p>

<p>Feedback is no good unless it is acted on.</p>

<p>Authors make a point here that by giving more of the pull/self-service model, you can increase velocity:
* Testers can select older versions of software to test with
* Support staff can deploy a released version into an environment to reproduce a defect.
* Operations staff can select a known good build to deploy into production as part of disaster recovery
* Releases can happen at a push of a button.</p>

<p>Note here applying to work:
* In each PR, it should address:
* Change in code
* Change in configuration (if any)
* Change in host environment (if any)
* Change in structures of data</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Architecture - Book Review]]></title>
    <link href="http://jbavari.github.io/blog/2019/10/08/clean-architecture-book-review/"/>
    <updated>2019-10-08T21:48:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2019/10/08/clean-architecture-book-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently read and held a nerd book club at work regarding Clean Architecture. Overall, I found this read easy to grok and entertain a few new ideas about software development. Uncle Bob also had a few things <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">on his blog post</a> about this topic.</p>

<p>If I could wrap up one picture that encompases the book:</p>

<p><img src="https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg" alt="This image" /></p>

<p>I&rsquo;ve also recently read parts of Domain Driven Design that introduce this same concept. I think Uncle Bob does a great job of sharing some great examples of the book of how architecture is an art, one that can morph with the needs of the project at hand, and is subject to trade-offs through the entire lifecycle of software. I love that the book starts off expressing the idea that thinking of delivery early on is a wise decision to incorporate into the architecture design.</p>

<p>Some other great points I found worthy of mention:</p>

<ul>
<li>How to think of the division of software with regards to firmware and hardware abstraction layers.</li>
<li>Most things are details &ndash; the framework, the database, the GUI, firmware &ndash; keep it separated from the internal domain layers of your business logic however possible.</li>
<li>SOLID Principles are important &ndash; also integrate into architecture design.</li>
<li>Architecture design with traditional monolith, service oriented, and micro-service anti-pattern warnings.</li>
<li>The idea that there is no silver bullet &ndash; <a href="https://twitter.com/codepitbull/status/784691906005635072">A good developer is like a werewolf: afraid of silver bullets</a></li>
</ul>


<p>This book club also gave the team some time to reflect and dive into the design of our current projects. Overall, this was a great book for a team to cover and come up with some action items to drive better software going forward.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the clock]]></title>
    <link href="http://jbavari.github.io/blog/2019/09/12/on-the-clock/"/>
    <updated>2019-09-12T21:55:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2019/09/12/on-the-clock</id>
    <content type="html"><![CDATA[<p>I was at the grocery the other day and I heard one worker asked another if they were on the clock. For some reason, it spurred some thoughts of my own.</p>

<p>I first was caught off guard by this seemingly small comment, because in my own head I was playing back an event from my current day at the work. What does being on the clock mean for me? For hourly workers, it&rsquo;s clear. The thought I was playing with here was the idea that most people are usually on the clock most of the time.</p>

<p>Does our work even span futher into deeper spots of our minds? When you&rsquo;re not at work, you may think of work, as I was, and you might also have work going on in your subconscious. Not necessarily stressful type events, it could even be positive things that you enjoy about your work.</p>

<p>There are many books on the procrastination and avoidance of work. I don&rsquo;t aim to dive into that. I wanted to approach the idea from a stoic approach. Does work &lsquo;work&rsquo; us by making think about it when we&rsquo;re not doing it? If the mind were not consumed with work, what would we be doing otherwise?</p>

<p>In Meditations, Marcus states:</p>

<blockquote><p>So you were born to feel “nice”? Instead of doing things and experiencing them? Don’t you see the plants, the birds, the ants and spiders and bees going about their individual tasks, putting the world in order, as best they can? And you’re not willing to do your job as a human being? Why aren’t you running to do what your nature demands?</p></blockquote>

<p>That has sat deep with me lately, and I couldn&rsquo;t stop from myself from exploring this idea of work being a dread. For some, their work is more thrilling than the warm bed. That is not to say, they do not still enjoy that. I am sure that is a natural instinct. What is the cause for that override in one&rsquo;s mind?</p>

<p>It must drive further in, from the purpose center of the brain and the being. When someone can turn their work into a form of play, and others cannot, we must ask what that driving force is. By understanding it, we may understand ourselves, and empower others to help themselves. &ldquo;What is good for the hive is good for the bee&rdquo;.</p>

<p>Is this mindset really everything? Certainly it is not constant and certainly ebbs and flows, as is nature. As Epictetus states, &ldquo;there is nothing good or evil save in the will&rdquo;. Is work a negative thing while pleasure is good? The ying in the yang for happiness is sadness, so then the ying in work must have the yang in relaxation.</p>

<p>In todays hyper speed of intelligence work, do we ever get off of the clock? Is it possible to be off the clock, if one had some way to measure?</p>

<p>Or rather, is the clock not binary, but again an ebb and flow of time throughout ones life? In modern American society, most people work 40-60 hour work weeks. With life being half of your life, it aligns with one&rsquo;s own self interest to focus on the balance as best as possible.</p>

<p>As I move forward in my working career, I aim to see it as my mission, my purpose, for what else would I be doing? I&rsquo;m fortunate to be able to work on challenging topics, evolving problems, and being surrounded by others on their own same like-missions. I aim to take the mindset of being fortuate to do these things and experiencing them.</p>

<p>Embrace the clock. Find the flow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Victim or the victor]]></title>
    <link href="http://jbavari.github.io/blog/2019/02/23/the-victim-or-the-victor/"/>
    <updated>2019-02-23T07:14:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/02/23/the-victim-or-the-victor</id>
    <content type="html"><![CDATA[<p>When I was a younger boy, my grandma would tell me stories of my grandfather going to war. Like most men during world war 2, he did not want to go to leave his new bride and head to where death is ever looming. One thing I remember her saying to me as a life lesson is that you&rsquo;re given a choice in life that most always boils down to your attitude. She said, &ldquo;just like your grandpa, you can chose to be a victim, or go get the courage to become a victor. The choice is always yours.&rdquo;</p>

<p>What does this mean? This means, when given any situation, your belief about the situation will in turn guide your thoughts and actions. This belief is so strong that even the way you think and address the situation happens whether or not your are conscious about it. The obvious choice would to be to see yourself as given a challenge that you must rise to and become a victor over.</p>

<p>The opposite is true &ndash; you could be given a challenge and say, &lsquo;why me&rsquo;. From this victim midset, you have now set yourself up for failure from the start. You&rsquo;ve seen the challenge become the burden.</p>

<p>That thought has always been on my mind throughout the years, but I have to admit I haven&rsquo;t always been as couragous as I could have been. You always assume when the time comes, you&rsquo;ll be ready. The fact is, it comes and hits you in the face right when you&rsquo;re planning for it. &ldquo;Everyone has a plan until you&rsquo;re punched in the face&rdquo;. The point is, the mindset of preparation is the key to success. My study of <a href="http://thedailystoic.com">stoicism</a> has lead me lately to living as if it has already happened, being unphased by things we should expect happen, and turning my &lsquo;have to&rsquo;s into &#8216;get to&rsquo;s.</p>

<p>How do you break this cycle? You start by examining your internal thoughts first. Now that you are conscious about your thoughts, you can then analyze how to course-correct. Until then, you might be in the default victim midset and not even know it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 years of Elixir: Reflections]]></title>
    <link href="http://jbavari.github.io/blog/2019/01/29/3-years-of-elixir-reflections/"/>
    <updated>2019-01-29T07:30:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/01/29/3-years-of-elixir-reflections</id>
    <content type="html"><![CDATA[<p>Back in 2015, I had just started at <a href="http://canvas.technology">CANVAS Technology</a> and my task was clear: to create a web application that can service many operations concurrently from users, robots, and other integration services. Prior to this new venture, I had spent my last few years doing Ruby on Rails, Node.js JavaScript, mobile applications (cordova, minimal Objective-C, Java/Android). Only a few months before joining CANVAS had I just started playing with Elixir and Phoenix. I was so excited and relieved to find something that was geared exactly for what we were embarking on.</p>

<p>What I want to outline in this post is the lessons I&rsquo;ve learned using Elixir these last 3+ years and help others learn quickly.</p>

<h2>Upgrade sooner than later</h2>

<p>Discuss pains of upgrading Elixir 1.3 &ndash;> 1.6, Ecto 1.0 &ndash;> 2.0, Phoenix 0.9 &ndash;> 1.3. It definitely hasn&rsquo;t been easy to update, this is mitigated by staying abreast of Elixir / phoenix changes and trying to implement early.</p>

<h2>GenServers are your friend &ndash; but use them only if you must</h2>

<p>Abstract away the API and the Server &ndash; link to post by <a href="https://pragdave.me/blog/2017/07/13/decoupling-interface-and-implementation-in-elixir.html">Dave Thomas explaining splitting the APIs, Servers, and Implementations in Elixir</a>.</p>

<h2>Testing pains with GenServers and Ecto&rsquo;s concurrency model</h2>

<p>Make sure to restart genservers / supervisors. Having a connection time out be longer for longer running genservers that aren&rsquo;t started every setup fixture.</p>

<h2>Using docker for team / testing scenarios</h2>

<p>Docker-compose for stack, testing with diff vars. Preload any databases by putting them in the postgres container root in <code>/tmp</code>.</p>

<h2>Testing browsers with Hound / ChromeDriver</h2>

<p>Use Hound and chromedriver.</p>

<h2>Do not code everything to the <code>Repo</code> itself</h2>

<p>It&rsquo;s not as easy to cut off your database addiction. Having an intermediate context API that cache is a good first step.</p>

<h2>PubSub is your friend, use structs to pass messages</h2>

<p>When using cast/gproc, pass the Structs, don&rsquo;t use tuples. Resist the simple solutiuons. Pass structs defined.</p>

<h2>Learn ETS</h2>

<p>Don&rsquo;t use a cache when the Erlang VM has one built in.</p>

<h2>Use behaviours</h2>

<p>Take a look how <a href="https://github.com/aaronrenner/crowdfundr">crowdfundr</a> app. Code to interfaces, not the implementations. Use the <code>impl</code> approach.</p>

<h2>Nginx as a front-end for SSL termination</h2>

<p>Links/discussion to the post, security wise, leave Nginx to handle the vulns and your app to handle the impl.</p>

<h2>Releases with Distillery</h2>

<p>Ship those tarballs, let it fly. Easier/safer than shiping your code. Should probably post about the replacing of ENV vars. Use a Config module for system set env variables instead of them getting baked into your <code>sys.config</code> file.</p>

<h2>Clustering &ndash; using epmd / GenServers for node communication message passing</h2>

<p>Link to swarm and libcluster &ndash; knowing that clustering comes out of the box with Erlang/Elixir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet: A Testing Handbook]]></title>
    <link href="http://jbavari.github.io/blog/2017/04/16/puppet-a-testing-handbook/"/>
    <updated>2017-04-16T13:09:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2017/04/16/puppet-a-testing-handbook</id>
    <content type="html"><![CDATA[<ul>
<li>Explain why the post &ndash; job required, growing pains, need for stability and health of the repo</li>
<li>Why to test</li>
<li>What to test</li>
<li>How to test
<strong> Lint &ndash; Rake file
</strong> Parser &ndash; rake file with globbing to run easier
<strong> Rspec &ndash; spec type tests to run on puppet code (syntax mainly)
</strong> Beaker &ndash; run tests on provisioned VM to ensure correct</li>
</ul>


<p>Cover:</p>

<p>puppet-lint
puppet parser validate &lt;manifest.pp>
puppet-rspec &ndash; A gem that runs rspec unit tests on a module (Based on compiled catalog)
Beaker</p>

<hr />

<p>Part of my role at work is managing a fleet of robots, servers, and other
infrastructure responsible for running our business. Due to the nature of our
business, we run within customer warehouses.</p>

<p>Being a one man operation, one of my main concerns is keeping all the systems
stable and proper working conditions. I am not the only developer touching our
puppet code, but I&rsquo;m the one responsible for the system(s).</p>

<p>As I embarked on the journey to add reliability to our infrastructure, something
very clear came up: there&rsquo;s a lot of information about testing puppet, but most
of it is fractured, out of date, or hard to understand. <a href="https://www.slideshare.net/PuppetLabs/puppetconf-2016-the-future-of-testing-puppet-code-gareth-rushgrove-puppet?qid=eee7d5c2-f52e-4ceb-8000-42e4fc174721&amp;v=&amp;b=&amp;from_search=2">See this slideshow from 2016 about the state of testing puppet</a>.</p>

<p>I&rsquo;m writing this post up to act as a handbook of sorts for testing puppet, as
well as a &lsquo;repository&rsquo; for testing puppet.</p>

<h1>Testing resources</h1>

<ul>
<li><a href="http://puppet-lint.com/">Puppet-lint</a> &ndash; Useful for linting your puppet code</li>
<li><a href="http://rspec-puppet.com/">Rspec Puppet</a> &ndash; Rspec tests for puppet code</li>
<li><a href="https://docs.puppet.com/puppet/4.10/tests_smoke.html">Puppet: module smoke testing</a></li>
<li><a href="http://www.example42.com/tutorials/PuppetTutorial/#slide-80">Slideshow about all things puppet</a></li>
<li><a href="https://www.safaribooksonline.com/library/view/extending-puppet-/9781785885686/">Extending Puppet &ndash; Second Edition</a></li>
<li><a href="https://github.com/puppetlabs/beaker/">Beaker</a></li>
<li><a href="http://www.xkyle.com/getting-started-puppet-acceptance-tests-with-beaker/">Getting Started Puppet Acceptance Tests With Beaker</a></li>
<li><a href="https://github.com/puppetlabs/puppetlabs-mysql/tree/master/spec">Great example of testing &ndash; Puppet MySQL module</a></li>
<li><a href="https://github.com/puppetlabs/puppetlabs_spec_helper">Puppetlabs Spec Helper</a></li>
<li><a href="https://www.puppetcookbook.com/posts/simple-syntax-check-manifests.html">Puppet Cookbook &ndash; Simple Syntax Check</a></li>
<li><a href="http://www.cakesolutions.net/teamblogs/testing-puppet">Testing Puppet</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Coverage Reports in Elixir]]></title>
    <link href="http://jbavari.github.io/blog/2017/03/13/test-coverage-reports-in-elixir/"/>
    <updated>2017-03-13T18:38:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2017/03/13/test-coverage-reports-in-elixir</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been learning a ton more about Elixir and really working towards refactoring and hardening the system.</p>

<p>On my current project, I&rsquo;ve got about 200 tests that exercise various parts of the system. Lately though, I&rsquo;ve been trying to analyze which parts of the system aren&rsquo;t being covered, and of course, theres tools to help with that.</p>

<p>The two I looked at were <a href="https://github.com/parroty/excoveralls">Coveralls</a> and <a href="https://github.com/alfert/coverex">Coverex</a>. I&rsquo;m going to be using <code>coverex</code> in this post.</p>

<p>Getting started is a breeze, check the readme for that. I&rsquo;ll cover it briefly for a bit here, my modifying our <code>mix.exs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="c1"># in `def project`, we add test_coverage</span>
</span><span class='line'>  <span class="ss">test_coverage:</span> <span class="p">[</span>
</span><span class='line'>    <span class="ss">tool:</span> <span class="no">Coverex</span><span class="o">.</span><span class="no">Task</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># in deps, add the depedency for only test environment</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:coverex</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.4.10&quot;</span><span class="p">,</span> <span class="ss">only:</span> <span class="ss">:test</span><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>After setup, running <code>mix test --cover</code> generates some reports in your projects <code>./cover</code> folder &ndash; with <code>functions.html</code> and <code>modules.html</code>. These give you your standard coverage reports with lines covered / ratio covered.</p>

<p>For my project, I had quite a bit of generated files using <a href="https://github.com/bitwalker/exprotobuf">exprotobuf</a>. The coverage report was getting butchered from not using these many files in my tests.</p>

<p>According to the docs, we can add a keyword for <code>ignore_modules</code> in the keyword list <code>test_coverage</code> and the coverage reports will ignore those modules.</p>

<p>However, for my generated list of modules, I had quite the growing list to ignore and it quickly became unwieldy to put that list of modules in my <code>mix.exs</code> file.</p>

<p>Since we can&rsquo;t access other modules from our mix file, I had a quick solution. I created a <code>.coverignore</code> file in the project directory, lumped in all the modules I wanted to ignore (from the <code>modules.html</code> generated file) and put them all in the <code>.coverignore</code> file.</p>

<p>I ensured all the modules I wanted to ignore were all newline delimited (<code>\n</code>).</p>

<p>From there, I modified my <code>mix.exs</code> file as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="c1"># Near the top</span>
</span><span class='line'>  <span class="nv">@ignore_modules</span> <span class="no">File</span><span class="o">.</span><span class="n">read!</span><span class="p">(</span><span class="s2">&quot;./.coverignore&quot;</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="err">&amp;</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">to_atom</span><span class="p">(</span><span class="nv">&amp;1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># in def project</span>
</span><span class='line'>  <span class="ss">test_coverage:</span> <span class="p">[</span>
</span><span class='line'>    <span class="ss">tool:</span> <span class="no">Coverex</span><span class="o">.</span><span class="no">Task</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">ignore_modules:</span> <span class="nv">@ignore_modules</span>
</span><span class='line'>  <span class="p">],</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom, that does it! Now we&rsquo;ve got a manageable list of modules to ignore in a separate file so we can keep our mix file clean.</p>

<p>All in all, <code>coverex</code> is a great module, and I would suggest using it if you do not want to ship data to coveralls.</p>

<p>Hope this helps, happy coding. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multicast Service Discovery in Electron]]></title>
    <link href="http://jbavari.github.io/blog/2016/12/29/multicast-service-discovery-in-electron/"/>
    <updated>2016-12-29T14:01:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/12/29/multicast-service-discovery-in-electron</id>
    <content type="html"><![CDATA[<p>I’ve been playing around with mDNS lately for broadcasting some services for applications to auto-connect with.</p>

<p>The first experiment I had was setting up a server that broadcasts a TCP endpoint for an Electron application to discover and connect for the application data.</p>

<p>This was so easily done that I challenged myself to see how fast I can whip out a blog post.</p>

<p>First, get an Ubuntu server up (I used a Vagrant VM).</p>

<p>Run the commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install avahi-utils</span></code></pre></td></tr></table></div></figure>


<p>From here, the service for avahi (mdns) should be auto-started. Edit the configuration to enable broadcasting:</p>

<p><code>vim /etc/avahi/avahi-daemon.conf</code> – here’s a config that’s minimally broadcasting only the IPv4 address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[server]
</span><span class='line'>host-name=webserver
</span><span class='line'>domain-name=local
</span><span class='line'>use-ipv4=yes
</span><span class='line'>use-ipv6=no
</span><span class='line'>allow-interfaces=eth1
</span><span class='line'>deny-interfaces=eth0
</span><span class='line'>ratelimit-interval-usec=1000000
</span><span class='line'>ratelimit-burst=1000
</span><span class='line'>
</span><span class='line'>[wide-area]
</span><span class='line'>enable-wide-area=yes
</span><span class='line'>
</span><span class='line'>[publish]
</span><span class='line'>publish-addresses=yes
</span><span class='line'>publish-hinfo=yes
</span><span class='line'>publish-workstation=no
</span><span class='line'>publish-domain=yes</span></code></pre></td></tr></table></div></figure>


<p>Now, create a service configuration: <code>vim /etc/avahi/services/mywebserver.service</code>, with this contents:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;service-group&gt;
</span><span class='line'>  &lt;name&gt;Webserver&lt;/name&gt;
</span><span class='line'>  &lt;service&gt;
</span><span class='line'>    &lt;type&gt;_http._tcp&lt;/type&gt;
</span><span class='line'>    &lt;port&gt;80&lt;/port&gt;
</span><span class='line'>  &lt;/service&gt;
</span><span class='line'>&lt;/service-group&gt;</span></code></pre></td></tr></table></div></figure>


<p>Simple as that. Just restart the avahi-daemon – <code>sudo service avahi-daemon restart</code>.</p>

<p>This should now have your server broadcasting that it has a webserver running at port 80, named <code>Webserver</code>.</p>

<p>To check the service is broadcasting, run <code>avahi-browse _http._tcp -tr</code> – this should show your server as servername.local, with <code>Webserver</code>, pointing to its IP and port.</p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+   eth1 IPv4 webserver                              Web Site             local
</span><span class='line'>=   eth1 IPv4 webserver                              Web Site             local
</span><span class='line'>   hostname = [webserver.local]
</span><span class='line'>   address = [192.168.0.101]
</span><span class='line'>   port = [80]
</span><span class='line'>   txt = []</span></code></pre></td></tr></table></div></figure>


<p>Now for the electron portion, in your application, install the node mdns module: <code>npm install --save mdns</code>.</p>

<p>This will add the node module to your project, but since it has native compilation steps, you must build it with <code>electron-rebuild</code>. Do this: <code>npm install --save-dev electron-rebuild</code>.</p>

<p>Then run: <code>./node_modules/.bin/electron-rebuild</code> – this will rebuild the mdns module for your electron node version correctly.</p>

<p>To do the DNS lookups, simply run the steps from the node mdns <code>README</code>. Set the discovery type to <code>http</code> and it will find your service. From there, you can grab the address and then get the data from the web server (or html page redirection) as you so wish!</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Erlang Observer on a Remote Elixir Server]]></title>
    <link href="http://jbavari.github.io/blog/2016/03/11/using-erlang-observer-on-a-remote-elixir-server/"/>
    <updated>2016-03-11T14:01:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/03/11/using-erlang-observer-on-a-remote-elixir-server</id>
    <content type="html"><![CDATA[<p>I’ve been using Elixir a ton at work and in some fun side projects and I’m absolutely in love with it.</p>

<p>One tool I especially love is the Erlang Observer tool, that shows you IO, memory, and CPU usage used by your app and the Erlang VM.</p>

<p>Once I got some apps deployed, I wanted to observe them remotely. I found a few <a href="https://groups.google.com/forum/#!topic/elixir-lang-talk/312PlJLSgLw">google forum</a> posts and the <a href="http://elixir-lang.org/docs/stable/iex/IEx.html">IEx docs</a>, but I wanted to wrap up this knowledge for when I need it in the future.</p>

<p>I’m going to monitor a Phoenix app in this quick blog post.</p>

<p>First, fire up your Phoenix server on say, a VPS, giving it a node name:</p>

<p><code>iex --name server@64.16.134.61 --cookie jbavari -S mix phoenix.server</code></p>

<p>Then on your remote viewing machine, say your Mac, run the following:</p>

<p><code>iex --name josh@192.168.1.1 --cookie jbavari</code></p>

<p>Now we’re set up to do some remote observations!</p>

<p>Fire up <code>:observer.start</code> on your local machine, which should open up the Erlang observer.</p>

<p>Now from the menu, select ‘Nodes’, then you should see your node there. If not, click the connect to node button, type in your <code>server@64.16.134.61</code> node address and you should be able to view your node via the observer!</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom JSON encoding in Phoenix]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/24/custom-json-encoding-in-phoenix/"/>
    <updated>2016-01-24T19:30:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/24/custom-json-encoding-in-phoenix</id>
    <content type="html"><![CDATA[<p>I recently have been working a lot using Leaflet.js to do some mapping.</p>

<p>In some of my models, I use the lovely <code>Geo</code> package for Elixir point and geospatial usage. I needed to add support for Poison to encode my model.</p>

<p>I&rsquo;ve been serving geo json from my models, and I needed a way to use the JSON encoding way easier. I&rsquo;m sending some data out to a ZeroMQ socket so I need to encode it by transorming my Geo module in a way that I could encode it with Geo JSON.</p>

<p>I modified my model in two ways &ndash; one by putting the <code>@derive</code> directive to tell Poison to encode only certain fields. That is one way.</p>

<p>In another way, I needed to encode it everytime by calling the <code>Geo.JSON.encode</code> method without me having to do it. You can see that in the <code>defimpl</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Point</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="kn">use</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Web</span><span class="p">,</span> <span class="ss">:model</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Option 1 - specify exactly which fields to encode</span>
</span><span class='line'>  <span class="nv">@derive</span> <span class="p">{</span><span class="no">Poison</span><span class="o">.</span><span class="no">Encoder</span><span class="p">,</span> <span class="ss">only:</span> <span class="p">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:geo_json</span><span class="p">]}</span>
</span><span class='line'>  <span class="n">schema</span> <span class="s2">&quot;points&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:position</span><span class="p">,</span> <span class="no">Geo</span><span class="o">.</span><span class="no">Point</span>
</span><span class='line'>    <span class="n">field</span> <span class="ss">:geo_json</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">virtual:</span> <span class="no">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">timestamps</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">encode_model</span><span class="p">(</span><span class="n">point</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="err">%</span><span class="no">MyApp</span><span class="o">.</span><span class="no">Point</span><span class="p">{</span><span class="n">point</span> <span class="o">|</span> <span class="ss">geo_json:</span> <span class="no">Geo</span><span class="o">.</span><span class="no">JSON</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">point</span><span class="o">.</span><span class="n">position</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defimpl</span> <span class="no">Poison</span><span class="o">.</span><span class="no">Encoder</span><span class="p">,</span> <span class="ss">for:</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Point</span> <span class="k">do</span>
</span><span class='line'><span class="k">    def</span> <span class="n">encode</span><span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="n">point</span> <span class="o">=</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Point</span><span class="o">.</span><span class="n">encode_model</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Poison</span><span class="o">.</span><span class="no">Encoder</span><span class="o">.</span><span class="no">Map</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="no">Map</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="p">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:geo_json</span><span class="p">]),</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Additional static paths in Phoenix]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/24/adding-additional-static-paths-in-phoenix/"/>
    <updated>2016-01-24T19:24:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/24/adding-additional-static-paths-in-phoenix</id>
    <content type="html"><![CDATA[<p>Phoenix is awesome.</p>

<p>A problem I ran into lately is how to add additional static paths to be served.</p>

<p>If you take a look in your <code>lib/endpoint.ex</code> file, you&rsquo;ll see the plug used for adding static paths:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">plug</span> <span class="no">Plug</span><span class="o">.</span><span class="no">Static</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">at:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="ss">from:</span> <span class="ss">:electronify</span><span class="p">,</span> <span class="ss">gzip:</span> <span class="no">false</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">only:</span> <span class="err">~</span><span class="n">w</span><span class="p">(</span><span class="n">css</span> <span class="n">fonts</span> <span class="n">images</span> <span class="n">js</span> <span class="n">favicon</span><span class="o">.</span><span class="n">ico</span> <span class="n">robots</span><span class="o">.</span><span class="n">txt</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wanted to add another folder to be served, &lsquo;zips&rsquo;, that I had to edit the <code>only:</code> line in the plug specification as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">plug</span> <span class="no">Plug</span><span class="o">.</span><span class="no">Static</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">at:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="ss">from:</span> <span class="ss">:electronify</span><span class="p">,</span> <span class="ss">gzip:</span> <span class="no">false</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">only:</span> <span class="err">~</span><span class="n">w</span><span class="p">(</span><span class="n">css</span> <span class="n">fonts</span> <span class="n">images</span> <span class="n">js</span> <span class="n">favicon</span><span class="o">.</span><span class="n">ico</span> <span class="n">robots</span><span class="o">.</span><span class="n">txt</span> <span class="n">zips</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There you have it, now I can access the files in the <code>zips</code> folder in <code>priv/static/zips</code> through the URL. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shipping data with Protocol Buffers in Elixir]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/16/shipping-data-with-protocol-buffers-in-elixir/"/>
    <updated>2016-01-16T22:49:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/16/shipping-data-with-protocol-buffers-in-elixir</id>
    <content type="html"><![CDATA[<p>Lately, I&rsquo;ve needed some data shipped across to various nodes to exchange data in a variety of places on a problem I was working on. There were a few ways to get that data shipped across, as the usual suspects are JSON, XML, or Google&rsquo;s <a href="https://developers.google.com/protocol-buffers/?hl=en">Protocol Buffers</a>.</p>

<p>For this specific problem, we were needing to get that data shared from C++ nodes to Elixir/Erlang.</p>

<p>Since the team was using Protocol buffers already, I decided to give them a run in Elixir using <a href="https://github.com/bitwalker/exprotobuf">exprotobuf</a>.</p>

<p>Note: <a href="https://github.com/jbavari/elixir-zeromq-protobuf-uploader">the client for this experiement is on github</a>.</p>

<h2>The idea</h2>

<p>The idea here is &ndash; we&rsquo;ll capture pieces of data from one node and ship it to the server for processing. We define the data structure by a <code>.proto</code> file, then turn our data into binary form by encoding it, and finally shipping it to it&rsquo;s destination. We could do the same thing with JSON, but we want the data as light as possible.</p>

<p>We&rsquo;ll use <a href="http://zeromq.org/">ZeroMQ</a> to ship the data and use the Elixir package <a href="https://github.com/zeromq/exzmq">exzmq</a> to encode in protocol buffers.</p>

<h2>The process</h2>

<p>First we define our protocol buffer format for an image message we want to send with data, its width, height, and bits per pixel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='protobuf'><span class='line'><span class="kd">message</span> <span class="nc">ImageMsg</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">optional</span> <span class="kt">bytes</span> <span class="na">data</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">optional</span> <span class="kt">int32</span> <span class="na">width</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">optional</span> <span class="kt">int32</span> <span class="na">height</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="k">optional</span> <span class="kt">int32</span> <span class="na">bpp</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We set up our application to use <code>exprotobuf</code> in our <code>mix.exs</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">application</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="p">[</span><span class="ss">applications:</span> <span class="p">[</span><span class="ss">:logger</span><span class="p">,</span> <span class="ss">:exzmq</span><span class="p">,</span> <span class="ss">:exprotobuf</span><span class="p">],</span>
</span><span class='line'>     <span class="ss">mod:</span> <span class="p">{</span><span class="no">Zmq2</span><span class="p">,</span> <span class="p">[]}]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>as well as including it as a dependency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defp</span> <span class="n">deps</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:exzmq</span><span class="p">,</span> <span class="ss">git:</span> <span class="s2">&quot;https://github.com/zeromq/exzmq&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:exprotobuf</span><span class="p">,</span> <span class="s2">&quot;1.0.0-rc1&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we create an Elixir struct from this <a href="https://github.com/jbavari/elixir-zeromq-protobuf-uploader/blob/master/lib/proto/imagemsg.proto">proto file</a> as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Zmq2</span><span class="o">.</span><span class="no">Protobuf</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="kn">use</span> <span class="no">Protobuf</span><span class="p">,</span> <span class="ss">from:</span> <span class="no">Path</span><span class="o">.</span><span class="n">wildcard</span><span class="p">(</span><span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">&quot;./proto/imagemsg.proto&quot;</span><span class="p">,</span> <span class="n">__DIR__</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have our protobuf file read in, let&rsquo;s get an images binary data, create an elixir structure from our protobuf file, and send that data over a Zero MQ socket (using <code>exzmq</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">check_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Sending image from file path: </span><span class="si">#{</span><span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">__DIR__</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="n">file_path</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="ss">:enoent</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;No file at the path: </span><span class="si">#{</span><span class="n">file_path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">img_data</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">send_image_data</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">img_data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">send_image_data</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">img_data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">img_message</span> <span class="o">=</span> <span class="no">Zmq2</span><span class="o">.</span><span class="no">Protobuf</span><span class="o">.</span><span class="no">ImageMsg</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">data:</span> <span class="n">img_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">encoded_data</span> <span class="o">=</span> <span class="no">Zmq2</span><span class="o">.</span><span class="no">Protobuf</span><span class="o">.</span><span class="no">ImageMsg</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">img_message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;The encoded data: </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">encoded_data</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Exzmq</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="p">[</span><span class="n">encoded_data</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Sent request - awaiting reply\n\n&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># {:ok, r} =</span>
</span><span class='line'>  <span class="k">case</span> <span class="no">Exzmq</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">r</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="s2">&quot;Received reply </span><span class="si">#{</span><span class="n">inspect</span> <span class="n">r</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">_</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="s2">&quot;No Reply&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there we have it, a message sent serialized with protocol buffers. We can now apply this same strategy over any different protocol buffer messages we define, and ship them over any protocl we&rsquo;d like.</p>

<h3>Some inspiration</h3>

<p>Along the R&amp;D process, I came across <a href="http://dbeck.github.io">David Beck&rsquo;s blog</a>. David has an experiment where he was <a href="http://dbeck.github.io/Wrapping-up-my-Elixir-TCP-experiments/">sending several million messages in TCP</a> where he explores some ultra-efficient methods of sending messages, it&rsquo;s a great read. He also covers <a href="http://dbeck.github.io/5-lessons-learnt-from-choosing-zeromq-and-protobuf/">zeromq and protocol buffers</a> that goes more in depth into Protocol buffers and some lessons learned.</p>

<p>Alas, we move on!</p>

<p>Cheers</p>
]]></content>
  </entry>
  
</feed>
