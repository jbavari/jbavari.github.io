<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elixir | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2020-01-10T08:01:22-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3 years of Elixir: Reflections]]></title>
    <link href="http://jbavari.github.io/blog/2019/01/29/3-years-of-elixir-reflections/"/>
    <updated>2019-01-29T07:30:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/01/29/3-years-of-elixir-reflections</id>
    <content type="html"><![CDATA[<p>Back in 2015, I had just started at <a href="http://canvas.technology">CANVAS Technology</a> and my task was clear: to create a web application that can service many operations concurrently from users, robots, and other integration services. Prior to this new venture, I had spent my last few years doing Ruby on Rails, Node.js JavaScript, mobile applications (cordova, minimal Objective-C, Java/Android). Only a few months before joining CANVAS had I just started playing with Elixir and Phoenix. I was so excited and relieved to find something that was geared exactly for what we were embarking on.</p>

<p>What I want to outline in this post is the lessons I&rsquo;ve learned using Elixir these last 3+ years and help others learn quickly.</p>

<h2>Upgrade sooner than later</h2>

<p>Discuss pains of upgrading Elixir 1.3 &ndash;> 1.6, Ecto 1.0 &ndash;> 2.0, Phoenix 0.9 &ndash;> 1.3. It definitely hasn&rsquo;t been easy to update, this is mitigated by staying abreast of Elixir / phoenix changes and trying to implement early.</p>

<h2>GenServers are your friend &ndash; but use them only if you must</h2>

<p>Abstract away the API and the Server &ndash; link to post by <a href="https://pragdave.me/blog/2017/07/13/decoupling-interface-and-implementation-in-elixir.html">Dave Thomas explaining splitting the APIs, Servers, and Implementations in Elixir</a>.</p>

<h2>Testing pains with GenServers and Ecto&rsquo;s concurrency model</h2>

<p>Make sure to restart genservers / supervisors. Having a connection time out be longer for longer running genservers that aren&rsquo;t started every setup fixture.</p>

<h2>Using docker for team / testing scenarios</h2>

<p>Docker-compose for stack, testing with diff vars. Preload any databases by putting them in the postgres container root in <code>/tmp</code>.</p>

<h2>Testing browsers with Hound / ChromeDriver</h2>

<p>Use Hound and chromedriver.</p>

<h2>Do not code everything to the <code>Repo</code> itself</h2>

<p>It&rsquo;s not as easy to cut off your database addiction. Having an intermediate context API that cache is a good first step.</p>

<h2>PubSub is your friend, use structs to pass messages</h2>

<p>When using cast/gproc, pass the Structs, don&rsquo;t use tuples. Resist the simple solutiuons. Pass structs defined.</p>

<h2>Learn ETS</h2>

<p>Don&rsquo;t use a cache when the Erlang VM has one built in.</p>

<h2>Use behaviours</h2>

<p>Take a look how <a href="https://github.com/aaronrenner/crowdfundr">crowdfundr</a> app. Code to interfaces, not the implementations. Use the <code>impl</code> approach.</p>

<h2>Nginx as a front-end for SSL termination</h2>

<p>Links/discussion to the post, security wise, leave Nginx to handle the vulns and your app to handle the impl.</p>

<h2>Releases with Distillery</h2>

<p>Ship those tarballs, let it fly. Easier/safer than shiping your code. Should probably post about the replacing of ENV vars. Use a Config module for system set env variables instead of them getting baked into your <code>sys.config</code> file.</p>

<h2>Clustering &ndash; using epmd / GenServers for node communication message passing</h2>

<p>Link to swarm and libcluster &ndash; knowing that clustering comes out of the box with Erlang/Elixir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Coverage Reports in Elixir]]></title>
    <link href="http://jbavari.github.io/blog/2017/03/13/test-coverage-reports-in-elixir/"/>
    <updated>2017-03-13T18:38:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2017/03/13/test-coverage-reports-in-elixir</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been learning a ton more about Elixir and really working towards refactoring and hardening the system.</p>

<p>On my current project, I&rsquo;ve got about 200 tests that exercise various parts of the system. Lately though, I&rsquo;ve been trying to analyze which parts of the system aren&rsquo;t being covered, and of course, theres tools to help with that.</p>

<p>The two I looked at were <a href="https://github.com/parroty/excoveralls">Coveralls</a> and <a href="https://github.com/alfert/coverex">Coverex</a>. I&rsquo;m going to be using <code>coverex</code> in this post.</p>

<p>Getting started is a breeze, check the readme for that. I&rsquo;ll cover it briefly for a bit here, my modifying our <code>mix.exs</code> file:</p>

<p><code>`` elixir
  # in</code>def project`, we add test_coverage
  test_coverage: [</p>

<pre><code>tool: Coverex.Task
</code></pre>

<p>  ],</p>

<p>  # in deps, add the depedency for only test environment
  {:coverex, &ldquo;~> 1.4.10&rdquo;, only: :test},
```</p>

<p>After setup, running <code>mix test --cover</code> generates some reports in your projects <code>./cover</code> folder &ndash; with <code>functions.html</code> and <code>modules.html</code>. These give you your standard coverage reports with lines covered / ratio covered.</p>

<p>For my project, I had quite a bit of generated files using <a href="https://github.com/bitwalker/exprotobuf">exprotobuf</a>. The coverage report was getting butchered from not using these many files in my tests.</p>

<p>According to the docs, we can add a keyword for <code>ignore_modules</code> in the keyword list <code>test_coverage</code> and the coverage reports will ignore those modules.</p>

<p>However, for my generated list of modules, I had quite the growing list to ignore and it quickly became unwieldy to put that list of modules in my <code>mix.exs</code> file.</p>

<p>Since we can&rsquo;t access other modules from our mix file, I had a quick solution. I created a <code>.coverignore</code> file in the project directory, lumped in all the modules I wanted to ignore (from the <code>modules.html</code> generated file) and put them all in the <code>.coverignore</code> file.</p>

<p>I ensured all the modules I wanted to ignore were all newline delimited (<code>\n</code>).</p>

<p>From there, I modified my <code>mix.exs</code> file as such:</p>

<p>```elixir
  # Near the top
  @ignore_modules File.read!(&ldquo;./.coverignore&rdquo;) |> String.split(&ldquo;\n&rdquo;) |> Enum.map(&amp;(String.to_atom(&amp;1)))</p>

<p>  # in def project
  test_coverage: [</p>

<pre><code>tool: Coverex.Task,
ignore_modules: @ignore_modules
</code></pre>

<p>  ],
```</p>

<p>Boom, that does it! Now we&rsquo;ve got a manageable list of modules to ignore in a separate file so we can keep our mix file clean.</p>

<p>All in all, <code>coverex</code> is a great module, and I would suggest using it if you do not want to ship data to coveralls.</p>

<p>Hope this helps, happy coding. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Erlang Observer on a Remote Elixir Server]]></title>
    <link href="http://jbavari.github.io/blog/2016/03/11/using-erlang-observer-on-a-remote-elixir-server/"/>
    <updated>2016-03-11T14:01:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/03/11/using-erlang-observer-on-a-remote-elixir-server</id>
    <content type="html"><![CDATA[<p>I’ve been using Elixir a ton at work and in some fun side projects and I’m absolutely in love with it.</p>

<p>One tool I especially love is the Erlang Observer tool, that shows you IO, memory, and CPU usage used by your app and the Erlang VM.</p>

<p>Once I got some apps deployed, I wanted to observe them remotely. I found a few <a href="https://groups.google.com/forum/#!topic/elixir-lang-talk/312PlJLSgLw">google forum</a> posts and the <a href="http://elixir-lang.org/docs/stable/iex/IEx.html">IEx docs</a>, but I wanted to wrap up this knowledge for when I need it in the future.</p>

<p>I’m going to monitor a Phoenix app in this quick blog post.</p>

<p>First, fire up your Phoenix server on say, a VPS, giving it a node name:</p>

<p><code>iex --name server@64.16.134.61 --cookie jbavari -S mix phoenix.server</code></p>

<p>Then on your remote viewing machine, say your Mac, run the following:</p>

<p><code>iex --name josh@192.168.1.1 --cookie jbavari</code></p>

<p>Now we’re set up to do some remote observations!</p>

<p>Fire up <code>:observer.start</code> on your local machine, which should open up the Erlang observer.</p>

<p>Now from the menu, select ‘Nodes’, then you should see your node there. If not, click the connect to node button, type in your <code>server@64.16.134.61</code> node address and you should be able to view your node via the observer!</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom JSON encoding in Phoenix]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/24/custom-json-encoding-in-phoenix/"/>
    <updated>2016-01-24T19:30:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/24/custom-json-encoding-in-phoenix</id>
    <content type="html"><![CDATA[<p>I recently have been working a lot using Leaflet.js to do some mapping.</p>

<p>In some of my models, I use the lovely <code>Geo</code> package for Elixir point and geospatial usage. I needed to add support for Poison to encode my model.</p>

<p>I&rsquo;ve been serving geo json from my models, and I needed a way to use the JSON encoding way easier. I&rsquo;m sending some data out to a ZeroMQ socket so I need to encode it by transorming my Geo module in a way that I could encode it with Geo JSON.</p>

<p>I modified my model in two ways &ndash; one by putting the <code>@derive</code> directive to tell Poison to encode only certain fields. That is one way.</p>

<p>In another way, I needed to encode it everytime by calling the <code>Geo.JSON.encode</code> method without me having to do it. You can see that in the <code>defimpl</code>.</p>

<p>``` elixir
defmodule MyApp.Point do
  use MyApp.Web, :model</p>

<p>  # Option 1 &ndash; specify exactly which fields to encode
  @derive {Poison.Encoder, only: [:id, :name, :geo_json]}
  schema &ldquo;points&rdquo; do</p>

<pre><code>field :name, :string
field :position, Geo.Point
field :geo_json, :string, virtual: true

timestamps
</code></pre>

<p>  end</p>

<p>  def encode_model(point) do</p>

<pre><code>%MyApp.Point{point | geo_json: Geo.JSON.encode(point.position) }
</code></pre>

<p>  end</p>

<p>  defimpl Poison.Encoder, for: MyApp.Point do</p>

<pre><code>def encode(point, options) do
  point = MyApp.Point.encode_model(point)
  Poison.Encoder.Map.encode(Map.take(point, [:id, :name, :geo_json]), options)
end
</code></pre>

<p>  end
end
```</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Additional static paths in Phoenix]]></title>
    <link href="http://jbavari.github.io/blog/2016/01/24/adding-additional-static-paths-in-phoenix/"/>
    <updated>2016-01-24T19:24:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/01/24/adding-additional-static-paths-in-phoenix</id>
    <content type="html"><![CDATA[<p>Phoenix is awesome.</p>

<p>A problem I ran into lately is how to add additional static paths to be served.</p>

<p>If you take a look in your <code>lib/endpoint.ex</code> file, you&rsquo;ll see the plug used for adding static paths:</p>

<p><code>elixir
plug Plug.Static,
  at: "/", from: :electronify, gzip: false,
  only: ~w(css fonts images js favicon.ico robots.txt)
</code></p>

<p>I wanted to add another folder to be served, &lsquo;zips&rsquo;, that I had to edit the <code>only:</code> line in the plug specification as such:</p>

<p><code>elixir
plug Plug.Static,
  at: "/", from: :electronify, gzip: false,
  only: ~w(css fonts images js favicon.ico robots.txt zips)
</code></p>

<p>There you have it, now I can access the files in the <code>zips</code> folder in <code>priv/static/zips</code> through the URL. Cheers!</p>
]]></content>
  </entry>
  
</feed>
