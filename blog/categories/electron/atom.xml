<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: electron | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/electron/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2019-12-12T21:32:46-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multicast Service Discovery in Electron]]></title>
    <link href="http://jbavari.github.io/blog/2016/12/29/multicast-service-discovery-in-electron/"/>
    <updated>2016-12-29T14:01:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2016/12/29/multicast-service-discovery-in-electron</id>
    <content type="html"><![CDATA[<p>I’ve been playing around with mDNS lately for broadcasting some services for applications to auto-connect with.</p>

<p>The first experiment I had was setting up a server that broadcasts a TCP endpoint for an Electron application to discover and connect for the application data.</p>

<p>This was so easily done that I challenged myself to see how fast I can whip out a blog post.</p>

<p>First, get an Ubuntu server up (I used a Vagrant VM).</p>

<p>Run the commands:</p>

<p><code>
sudo apt-get install avahi-utils
</code></p>

<p>From here, the service for avahi (mdns) should be auto-started. Edit the configuration to enable broadcasting:</p>

<p><code>vim /etc/avahi/avahi-daemon.conf</code> – here’s a config that’s minimally broadcasting only the IPv4 address:</p>

<p>```
[server]
host-name=webserver
domain-name=local
use-ipv4=yes
use-ipv6=no
allow-interfaces=eth1
deny-interfaces=eth0
ratelimit-interval-usec=1000000
ratelimit-burst=1000</p>

<p>[wide-area]
enable-wide-area=yes</p>

<p>[publish]
publish-addresses=yes
publish-hinfo=yes
publish-workstation=no
publish-domain=yes
```</p>

<p>Now, create a service configuration: <code>vim /etc/avahi/services/mywebserver.service</code>, with this contents:</p>

<p>```
&lt;service-group>
  <name>Webserver</name>
  <service></p>

<pre><code>&lt;type&gt;_http._tcp&lt;/type&gt;
&lt;port&gt;80&lt;/port&gt;
</code></pre>

<p>  </service>
&lt;/service-group>
```</p>

<p>Simple as that. Just restart the avahi-daemon – <code>sudo service avahi-daemon restart</code>.</p>

<p>This should now have your server broadcasting that it has a webserver running at port 80, named <code>Webserver</code>.</p>

<p>To check the service is broadcasting, run <code>avahi-browse _http._tcp -tr</code> – this should show your server as servername.local, with <code>Webserver</code>, pointing to its IP and port.</p>

<p>Example:</p>

<p><code>
+   eth1 IPv4 webserver                              Web Site             local
=   eth1 IPv4 webserver                              Web Site             local
   hostname = [webserver.local]
   address = [192.168.0.101]
   port = [80]
   txt = []
</code></p>

<p>Now for the electron portion, in your application, install the node mdns module: <code>npm install --save mdns</code>.</p>

<p>This will add the node module to your project, but since it has native compilation steps, you must build it with <code>electron-rebuild</code>. Do this: <code>npm install --save-dev electron-rebuild</code>.</p>

<p>Then run: <code>./node_modules/.bin/electron-rebuild</code> – this will rebuild the mdns module for your electron node version correctly.</p>

<p>To do the DNS lookups, simply run the steps from the node mdns <code>README</code>. Set the discovery type to <code>http</code> and it will find your service. From there, you can grab the address and then get the data from the web server (or html page redirection) as you so wish!</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasing Electron for Windows]]></title>
    <link href="http://jbavari.github.io/blog/2015/09/09/releasing-electron-for-windows/"/>
    <updated>2015-09-09T18:50:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/09/09/releasing-electron-for-windows</id>
    <content type="html"><![CDATA[<p>Releasing Electron applications on Windows can be a tricky issue. Especially if you mainly use a Mac (like me). And you have to think about that pesky <a href="https://msdn.microsoft.com/en-us/library/ms537361%28v=vs.85%29.aspx">code signing</a> thing you have to do to avoid the annoying &lsquo;SmartScreen&rsquo; filter users may get.</p>

<p>Thankfully, there&rsquo;s a great tool called Squirrel made by <a href="https://twitter.com/paulcbetts">Paul Betts</a> that does a ton of the heavy lifting for you. Codesigning and all.</p>

<p>I really got a ton of knowledge from the blog post, <a href="http://www.mylifeforthecode.com/creating-a-windows-distribution-of-an-electron-app-using-squirrel/">Creating a Windows Distribution of an Electron App using Squirrel</a> and <a href="http://www.mylifeforthecode.com/using-electron-packager-to-package-an-electron-app/">Using Electron Packager to Package an Electron App</a>.</p>

<p>I wanted to curate a ton of knowledge in one place, so here we go.</p>

<p>I use a few tools to get this done on my Mac:</p>

<ul>
<li><a href="https://github.com/maxogden/electron-packager">Electron Packager</a></li>
<li><a href="https://www.winehq.org/">Wine</a></li>
<li><a href="http://wiki.winehq.org/winetricks">Winetricks</a></li>
<li><a href="http://www.nuget.org/nuget.exe">nuget cli</a></li>
<li><a href="https://github.com/Squirrel/Squirrel.Windows/releases">Squirrel.Windows</a></li>
</ul>


<p>First, let&rsquo;s look at the project layout:</p>

<h2>Project Layout</h2>

<p>``` sh
/build # Installers go here
  /osx
  /resources # Icons, iconset, images, etc
  /win # Binaries to build, Package.nuspec file to specify configurations
  packager.json # File used by electron-builder to build OSX DMG file.
/dist # Distributions go here (.app, .exe, .dmg)
  /osx
  /win
/docs # Docs about project.
/node_modules # Modules used for building/packaging/testing
/scss # Sass for CSS compilation in www
/spec # Tests
  AppCtrl.spec.js
www # Source code for the application
  /css
  /data
  /img
  /js
  /lib
  /node_modules # Modules here used by the application itself.
  /templates</p>

<p>karma.conf.js # Configuration for tests.
livereload.js # Dev script to set up live reload in Electron
package.json # Main package.json with scripts/dependencies to package/build.
```</p>

<h2>Process</h2>

<p>First we&rsquo;ll need to make the exe and associated files to a <code>dist</code> folder. From there, we take the win <code>dist</code> files and pack them into the <code>Setup.exe</code> file, where Squirrel will do the heavy lifting to pack all this into a one step process.</p>

<h2>npm Scripts</h2>

<p>We&rsquo;ll use the npm script <code>pack:win</code> task to put all our <code>www</code> files into a nice package (resources, exe, etc) and output to the <code>dist</code> folder.</p>

<p><code>pack:win</code> step will just execute <code>electron-packager</code> with some relevant information. Please note the <code>asar=true</code>, this is recommended because sometimes <code>node_modules</code> can get nested a few times and the file paths will be too long for certain Windows platforms.</p>

<p>Script:</p>

<p>```js
{
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"pack:win": "electron-packager ./www \"Project\" --out=dist/win --platform=win32 --arch=ia32 --version=0.29.1 --icon=build/resources/icon.ico --version-string.CompanyName=\"My Company\" --version-string.ProductName=\"Project\" --version-string.FileDescription=\"Project\" --asar=true"
</code></pre>

<p>  }
```</p>

<h2>Electron Build script</h2>

<p>I used a simple build script in node to assist in some of the heavy lifting. I recommend getting an Extended Validation certificate from <a href="http://blogs.msdn.com/b/ie/archive/2012/08/14/microsoft-smartscreen-amp-extended-validation-ev-code-signing-certificates.aspx">this blog post</a>.</p>

<p>This will take the windows package in <code>dist/win</code> and create <code>dist/win/Setup.exe</code>.</p>

<p>```js</p>

<h1>!/usr/bin/env node</h1>

<p>// File is in root/build/win/build.js
// First call nuget pack Package.nuspec
// Then you&rsquo;ll have Project.<version>.nupkg
// Run Squirrel.exe &mdash;releaseify Project.<version>.nupkg &mdash;icon iconPath &mdash;loadingGif loadingGifPath
// resources in build/resources/</p>

<p>//Need to get around weird command line passes with windows paths
function addWindowsPathFix(path) {
  return [&lsquo;&ldquo;&rsquo;, path, &lsquo;&rdquo;&rsquo;].join(&lsquo;&rsquo;);
}</p>

<p>var childProcess = require(&lsquo;child_process&rsquo;),
  path = require(&lsquo;path&rsquo;),
  packageJsonPath = path.join(<strong>dirname, &lsquo;..&rsquo;, &lsquo;..&rsquo;, &lsquo;package.json&rsquo;),
  packageJson = require(packageJsonPath),
  loadingGifPath = path.join(</strong>dirname, &lsquo;..&rsquo;, &lsquo;resources&rsquo;, &lsquo;windows-loader.png&rsquo;),
  nugetPackageSpecPath = path.join(<strong>dirname, &lsquo;Package.nuspec&rsquo;),
  nugetPackageOutputPath = path.join(</strong>dirname),
  nugetPackageName = [&lsquo;Project&rsquo;, &lsquo;.1.0.0&rsquo;, &lsquo;.nupkg&rsquo;].join(&lsquo;&rsquo;),
  // nugetPackageName = [&lsquo;Project&rsquo;, packageJson.version, &lsquo;.nupkg&rsquo;].join(&lsquo;&rsquo;),
  nugetPackagePath = path.join(nugetPackageOutputPath, nugetPackageName),
  nugetExePath = path.join(<strong>dirname, &lsquo;nuget.exe&rsquo;),
  setupIconPath = path.join(</strong>dirname, &lsquo;..&rsquo;, &lsquo;resources&rsquo;, &lsquo;icon.ico&rsquo;),
  setupReleasePath = path.join(<strong>dirname, &lsquo;..&rsquo;, &lsquo;..&rsquo;, &lsquo;dist&rsquo;, &lsquo;win&rsquo;),
  signatureCertificatePath = path.join(</strong>dirname, &lsquo;Certificate.pfx&rsquo;),
  signParams = [&lsquo;&ldquo;/a /f &rdquo;&rsquo;, addWindowsPathFix(signatureCertificatePath), &lsquo;&ldquo; /p &rsquo;, process.env.PRIVATE_CERT_PASSWORD, &lsquo;&rdquo;&rsquo;].join(&lsquo;&rsquo;),
  squirrelExePath = path.join(__dirname, &lsquo;Squirrel.exe&rsquo;);</p>

<p>  console.log(&lsquo;sign params&rsquo;, signParams);</p>

<p>var createNugetPackageCommand = [addWindowsPathFix(nugetExePath), &lsquo;pack&rsquo;, addWindowsPathFix(nugetPackageSpecPath), &lsquo;-OutputDirectory&rsquo;, addWindowsPathFix(nugetPackageOutputPath)].join(&lsquo; &rsquo;);
var createSetupCommand = [</p>

<pre><code>          addWindowsPathFix(squirrelExePath), 
          '--releasify', addWindowsPathFix(nugetPackagePath), 
          '--loadingGif', addWindowsPathFix(loadingGifPath), 
          '--icon', addWindowsPathFix(setupIconPath), 
          '--releaseDir', addWindowsPathFix(setupReleasePath), 
          '--signWithParams', signParams
        ].join(' ');
</code></pre>

<p>console.log(&lsquo;Creating nuget package from nuget spec file:&rsquo;, nugetPackageSpecPath);
// console.log(createNugetPackageCommand);
childProcess.execSync(createNugetPackageCommand);
console.log(&lsquo;Created nuget package&rsquo;);</p>

<p>console.log(&lsquo;Building Setup.exe&rsquo;);
// console.log(createSetupCommand);
childProcess.execSync(createSetupCommand);
console.log(&lsquo;Built Setup.exe&rsquo;);
```</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codesigning Electron Applications]]></title>
    <link href="http://jbavari.github.io/blog/2015/08/14/codesigning-electron-applications/"/>
    <updated>2015-08-14T11:30:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/08/14/codesigning-electron-applications</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been busy at work creating and maintaining <a href="http://lab.ionic.io">Ionic Lab</a>. It&rsquo;s been a fun and challenging problem using HTML/CSS/JavaScript to create native OSX/Windows applications.</p>

<p>I&rsquo;m going to admit &ndash; I&rsquo;ve gotten a few hybrid projects on the App store. Honestly though I had a lot of help.</p>

<p>This time I was mostly on my own.</p>

<p>I&rsquo;m not great at the native dev and half the problems I occur are with the platform I am dealing with. In this I mean &ndash; Android I deal with how Google does signing and releasing and how Apple does signing and releasing.</p>

<p>I&rsquo;m going to cover mainly Apple policies to release an app on your own with or without the App store. With Electron, we&rsquo;re going to make a native build, so we&rsquo;ll need to know how to do this.</p>

<h2>Mac&rsquo;s Gatekeeper</h2>

<p>On Mac OSX, there&rsquo;s an application that checks all the applications you download and run to see if they are valid and trusted.</p>

<p>Certainly you&rsquo;ve seen the message from an app you&rsquo;ve downloaded: <code>"App can't be opened because it is from an unidentified developer."</code></p>

<p>If you create and app and do not codesign it with a valid Apple dev account, your users will see this. It&rsquo;s not a good thing.</p>

<h2>How to codesign</h2>

<p>The main tool of codesigning is the CLI tool <code>codesign</code>.</p>

<p>I really found a lot of help from <a href="https://developer.apple.com/library/mac/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-TNTAG400">OSX Code Signing in Depth</a>.</p>

<p>It&rsquo;s pretty clear right away what you need to run and how to verify what you need to run. I&rsquo;d like to go over how to do it with Electron, specifically.</p>

<p>I posted the script below. I want to highlight the issues I ran into as a result of my ignorance.</p>

<p>One issue I ran into &ndash; I was using the &ldquo;Mac Development&rdquo; certificate to sign &ndash; and when I ran the verify command (<code>codesign -vvvv -d "/path/to/MyApp.app"</code>) it gave me a good to go signal. When I ran the security CLI command (<code>spctl --assess -vvvv "/path/to/MyApp.app"</code>), it was rejected.</p>

<p>My error: I thought &ldquo;Mac Development&rdquo; was a &ldquo;Developer-ID application&rdquo;.</p>

<p>It&rsquo;s not. I was an account admin. In the Apple Member Center for Certificate Administration, I could only set up a &ldquo;Mac Development&rdquo; type certificate. Apple member center would not let met set up a &ldquo;Developer ID Application&rdquo; certificate. You need a &lsquo;team agent&rsquo; to set one up for you. (That or become a team agent)</p>

<p>That being said &ndash; ensure you sign with a certificate type of &ldquo;Developer ID Application&rdquo; to sign with, and you&rsquo;re good to go.</p>

<p>I set up my codesign script like <a href="https://github.com/nwjs/nw.js/issues/616#issuecomment-30844482">the following</a>. There&rsquo;s comments to help understand:</p>

<p>```sh</p>

<h1>Invoke this script with a relative <code>.app</code> path</h1>

<h1>EX:</h1>

<h1>codesign.sh &ldquo;dist/osx/MyApp-darwin-x64/MyApp.app&rdquo;</h1>

<h1>I had better luck using the iPhoneOS codesign_allocate</h1>

<p>export CODESIGN_ALLOCATE=&ldquo;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate&rdquo;</p>

<h1>Next two are specified in Apple docs:</h1>

<h1>export CODESIGN_ALLOCATE=&ldquo;/Applications/Xcode.app/Contents/Developer/usr/bin/codesign_allocate&rdquo;</h1>

<h1>export CODESIGN_ALLOCATE=&ldquo;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/codesign_allocate&rdquo;</h1>

<h1>However, neither worked, and gave error:</h1>

<h1>/Users/JoshBavari/Development/ionic-gui/dist/osx/MyApp-darwin-x64/MyApp.app/Contents/Frameworks/Electron Framework.framework/Electron Framework: cannot find code object on disk</h1>

<h1>Run the following to get a list of certs</h1>

<h1>security find-identity</h1>

<p>app=&ldquo;$PWD/$1&rdquo;
identity=&ldquo;&lt;ENTER_ID_OF_RESULT_FROM_SECURITY_FIND_IDENTITY_COMMAND>&rdquo;</p>

<p>echo &ldquo;### signing frameworks&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Framework.framework/Electron Framework&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Framework.framework/&rdquo;
/Versions/A"
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Framework.framework/Versions/Current/Electron Framework&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Helper EH.app/Contents/MacOS/Electron Helper EH&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS/Electron Helper NP&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Electron Helper NP.app/Contents/MacOS/Electron Helper NP&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/MyApp Helper.app/Contents/MacOS/MyApp Helper&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Mantle.framework/Mantle&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Mantle.framework/Versions/A&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/ReactiveCocoa.framework/ReactiveCocoa&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/ReactiveCocoa.framework/Versions/A&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Squirrel.framework/Squirrel&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app/Contents/Frameworks/Squirrel.framework/Versions/A&rdquo;</p>

<p>echo &ldquo;### signing app&rdquo;
codesign &mdash;deep &mdash;force &mdash;verify &mdash;verbose &mdash;sign &ldquo;$identity&rdquo; &ldquo;$app&rdquo;</p>

<p>echo &ldquo;### Zipping app&rdquo;
ditto -c -k &mdash;sequesterRsrc &mdash;keepParent dist/osx/MyApp-darwin-x64/MyApp.app/ dist/osx/MyApp-Mac.zip</p>

<p>echo &ldquo;### verifying signature&rdquo;,
codesign -vvvv -d &ldquo;$app&rdquo;
sudo spctl -a -vvvv &ldquo;$app&rdquo;
```</p>

<h2>Pitfalls</h2>

<p>Since I wasn&rsquo;t very familiar with the Apple specifics I&rsquo;d like to high light a few pitfalls I ran into with my ignorance.</p>

<p>A &lsquo;Developer-ID signed app&rsquo; means setting up a certificate (private key + cert) with &ldquo;type&rdquo; as &ldquo;Developer ID Application&rdquo;. This does <em>NOT</em> mean a &ldquo;Mac Development&rdquo; certificate. From the OSX Codesigning guide:</p>

<blockquote><p>Like Gatekeeper, spctl will only accept Developer ID-signed apps and apps downloaded from the Mac App Store by default. It will reject apps signed with Mac App Store development or distribution certificates.</p></blockquote>

<h1>Issues</h1>

<p>Most users say to specify this environment variable:</p>

<p><code>export CODESIGN_ALLOCATE="/Applications/Xcode.app/Contents/Developer/usr/bin/codesign_allocate"</code></p>

<p>For some reason, I couldn&rsquo;t use the default codesign allocate as specified in the Github issue above. Instead, I had to go with this Environment variable for CODESIGN_ALLOCATE for <code>iPhoneOS.platform</code>:</p>

<p><code>export CODESIGN_ALLOCATE="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate"</code></p>

<h1>Hints</h1>

<p>Only include signed code in directories that should contain signed code.
Only include resources in directories that should contain
resources.
Do not use the &mdash;resource-rules flag or ResourceRules.plist. They have been obsoleted and will be rejected.</p>

<h2>A little note on signing frameworks [5]:</h2>

<h3>Signing Frameworks</h3>

<p>When you sign frameworks, you have to sign a specific version. So, let’s say your framework is called CSMail, you’d sign CSMail.framework/Versions/A. If you try and just sign the top level folder it will silently fail, as will CSMail.framework/Versions/Current (see “Symbolic Links” below).</p>

<h3>Symbolic Links</h3>

<p>Any symbolic links will be silently ignored and this extends to the path you give to the codesign command line utility. I think there’s actually a problem with symbolic links: you can add them to a Resources folder and it won’t invalidate the signature (whereas you cannot add normal files). I’ve reported this to Apple (rdar://problem/6050445).</p>

<h1>Helpful links</h1>

<ol>
<li><a href="https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/AboutCS/AboutCS.html">Apple Code Signing Overview</a></li>
<li><a href="https://developer.apple.com/library/mac/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-TNTAG205">Apple OS X Code Signing In Depth</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html">Apple Anatomy of Framework Bundles</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/codesign.1.html#//apple_ref/doc/man/1/codesign">Apple codesign Man Page</a></li>
<li><a href="http://sutes.co.uk/2008/07/code-signing.html">Chris Suter&rsquo;s Blog &ndash; Code signing</a></li>
<li><a href="http://stackoverflow.com/questions/27871099/creating-symlinks-in-osx-frameworks-inside-app-bundle">Stackoverflow &ndash; Creating Symlinks in OSX Frameworks</a></li>
<li><a href="http://successfulsoftware.net/2012/08/30/how-to-sign-your-mac-os-x-app-for-gatekeeper/">How to sign your Mac OSX app for Gatekeeper</a></li>
<li><a href="http://furbo.org/2013/10/17/code-signing-and-mavericks/">Codesigning and Mavericks</a>
9 <a href="http://www.pracucci.com/atom-electron-signing-mac-app.html">Atom Electron &ndash; Signing Mac App</a></li>
<li><a href="http://blog.hoachuck.biz/blog/2013/10/29/codesign-useful-info-in-xcode-5-dot-0-1/">Codesign &ndash; useful info in Xcode > 5.0</a></li>
<li><a href="http://www.saschawise.com/blog/2015/08/12/electron-for-the-mac-app-store.html">Electron for the Mac App Store</a></li>
<li><a href="https://github.com/nwjs/nw.js/issues/616#issuecomment-30844482">nw.js issue about code signing</a>.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Unit Tests for Electron and AngularJS]]></title>
    <link href="http://jbavari.github.io/blog/2015/08/12/writing-unit-tests-for-electron-and-angularjs/"/>
    <updated>2015-08-12T19:53:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/08/12/writing-unit-tests-for-electron-and-angularjs</id>
    <content type="html"><![CDATA[<p>Unit testing is something most of us dev&rsquo;s don&rsquo;t think much of. Until we encounter some simple to solve bugs or have regressions in code that drives us crazy.</p>

<p>JavaScript testing itself is hard with no clear cut path to take. Most times, you&rsquo;ll have to decide important things for yourself as far as which testing framework to use and the tools to do them.</p>

<p>I enjoy Jasmine testing framework right now. For my node projects, I like to use the node package <a href="https://github.com/mhevery/jasmine-node">jasmine-node</a>. However, Electron is basically a web browser with node conveniences, so we want to test browser related things.</p>

<p>Since Electron applications take a unique approach to combining elements from the browser with conveniences from node, such as <code>require</code>, <code>__dirname</code>, <code>global</code> and other keywords specific to node, testing gets a little more complicated.</p>

<p>I&rsquo;m going to outline a few of the approaches I took. I&rsquo;m sure they are not perfect, I&rsquo;m still learning and I&rsquo;m outlining that here.</p>

<h2>Tools of the trade</h2>

<p>I outlined <a href="http://jbavari.github.io/blog/2014/06/11/unit-testing-angularjs-services/">some things I did to test AngularJS</a> in a previous post. I pretty much use the same tools and set up:</p>

<p><code>sh
npm install -g karma karma-jasmine karma-phantomjs-launcher karma-spec-reporter phantomjs
</code></p>

<p>Now I&rsquo;ve got my <code>karma.config.js</code> file:</p>

<p><code>js
//..snip..
// list of files / patterns to load in the browser
files: [
  'www/lib/angular/angular.min.js',
  'node_modules/angular-mocks/angular-mocks.js',
  'www/js/**/*.js',
  'spec/**/*.js'
]
//..snip..
</code></p>

<p>Now we&rsquo;re set up to do some testing!</p>

<h2>Exposing <code>require</code> to AngularJS service</h2>

<p>I first wanted a one stop shop for all my node conveniences in one angular js service to contain what Electron provides.</p>

<p>Here&rsquo;s my service:</p>

<p>``` js
angular.module(&lsquo;app.services&rsquo;)
.factory(&lsquo;NodeService&rsquo;, function() {
  var fixPath = require(&lsquo;fix-path&rsquo;),</p>

<pre><code>  fs = require('fs'),
  ipc = require('ipc'),
  opn = require('opn'),
  path = require('path'),
  shell = require('shell');
</code></pre>

<p>  //Fixes the path issue with node being run outside of this GUI<br/>
  fixPath();
  process.env.PATH = process.env.PATH + &lsquo;:/usr/local/bin&rsquo;;</p>

<p>  //Path from root &ndash;> &lsquo;www&rsquo;
  //<strong>dirname == &lsquo;www&rsquo; dir
  var appJsonPath = path.join(</strong>dirname, &lsquo;package.json&rsquo;);
  var appJson = require(appJsonPath);</p>

<p>  return {</p>

<pre><code>appJson: appJson,
fixPath: fixPath,
fs: fs,
ipc: ipc,
opn: opn,
path: path;
</code></pre>

<p>  };
});
```</p>

<h2>Test set up for Service</h2>

<p>Now, hopefully I have all my node conveniences in one place (<code>require</code>, <code>__dirname</code>, etc).</p>

<p>Let&rsquo;s get a simple test up:</p>

<p>``` js
describe(&lsquo;#NodeService&rsquo;, function() {
  var NodeService;</p>

<p>  beforeEach(function() {</p>

<pre><code>  //Ensure angular modules available
module('app.services');
</code></pre>

<p>  });</p>

<p>  beforeEach(inject(function(<em>NodeService</em>) {</p>

<pre><code>NodeService = _NodeService_;
</code></pre>

<p>  }));</p>

<p>  it(&lsquo;should have node service defined&rsquo;, function() {</p>

<pre><code>expect(NodeService).toBeDefined();
</code></pre>

<p>  });
});
```</p>

<p>If we run this test without anything else, we&rsquo;ll see immediately a problem:</p>

<p><code>sh
ReferenceError: Can't find variable: require
</code></p>

<p>My approach to this is simple &ndash; create a faked out global variable that represents <code>require</code> and does what you want, such as:</p>

<p>``` js
var fakePackageJson = { name: &ldquo;Fake package.json name&rdquo; };
window.require = function(requirePath) {
  console.log(&lsquo;Requiring:&rsquo;, requirePath);
  switch(requirePath) {</p>

<pre><code>case 'ipc':
  return ipcSpy;
case 'fs':
  return fsSpy;
case '/spec/package.json':
  return fakePackageJson;
</code></pre>

<p>  }
};
window.__dirname = &lsquo;/some/fake/path&rsquo;;
```</p>

<h2>Package.json test setup</h2>

<p>Let&rsquo;s define some quick <code>scripts</code> to run from our package.json to help others run our tests:</p>

<p>``` json
//..snip..
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"test": "karma start"
</code></pre>

<p>  }
//..snip
```</p>

<p>Now when we run our tests, we&rsquo;ll have the faked out node modules passed back.</p>

<p>This is just one approach to take to setting up some faking out for node modules using Electron, Angular JS, and Jasmine.</p>

<p>Hope this helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comparisons of nw.js and Electron]]></title>
    <link href="http://jbavari.github.io/blog/2015/05/08/comparisons-of-nw-dot-js-and-electron/"/>
    <updated>2015-05-08T17:11:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/05/08/comparisons-of-nw-dot-js-and-electron</id>
    <content type="html"><![CDATA[<p>In the last few months, I&rsquo;ve been playing around with two tools to help bridge the gap between the web and native desktop applications. There are two main tools that come to mind &ndash; nw.js (formerly known as Node Webkit) and Electron (formerly known as Atom Shell).</p>

<p>This post focuses on using both, the differences between the two, and focusing on issues that I&rsquo;ve encountered.</p>

<p>Outline:</p>

<ul>
<li>Getting started &ndash; package.json</li>
<li>Native Menus (application menu)</li>
<li>Shell execution (child processes)</li>
<li>Packaging / run</li>
<li>Icons</li>
<li>Performance</li>
</ul>


<h1>Nw.js</h1>

<h2>Getting started</h2>

<p>Nw.js and Electron share a lot of the same steps for getting started. The only real difference between the two is how they are run, and how they handle the node process internally.</p>

<p>With Nw.js, your app is bundled together. With Electron, the application is set up differently &ndash; with the main node process the handle running the browser process, and the rendering process, which handles all things from the browser (the event loop).</p>

<p>To get running, <a href="">download the nw.js app</a> or the <a href="">electron app</a>. Both of these applications look at your <code>package.json</code> file to get running by looking at the <code>main</code> attribute.</p>

<h2>Bootstrapping</h2>

<p>For nw.js, the <code>main</code> attribute should specify which html file to start loading when your application launched. With Electron, your <code>main</code> attribute should specify a JavaScript file to be run.</p>

<p>You also specify attributes about the nw.js window that runs via the <code>window</code> attribute, things like <code>toolbar</code>, <code>width</code>, and <code>height</code>, notably.</p>

<p>With Electron, the JS file that you specify will launch the browser window and specify other attributes like width, height, and other window attributes.</p>

<p>For convenience sake, I also created a node run script to execute the Nw.js app with my current folder. To run the node-webkit app, you simply type <code>npm run nwjs</code>. I also included a livereload script to watch my <code>www</code> folder to live reload my changes in the nw.js app.</p>

<p>Here&rsquo;s a quick look at the <code>package.json</code> file used to bootstrap nw.js:</p>

<p>```json
{
  &ldquo;name&rdquo;: &ldquo;nwjs-app&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
  &ldquo;description&rdquo;: &ldquo;&rdquo;,
  &ldquo;main&rdquo;: &ldquo;www/index.html&rdquo;,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"nwjs": "/Applications/nwjs.app/Contents/MacOS/nwjs . &amp; node livereload",
"electron": "/Applications/Electron.app/Contents/MacOS/Electron . &amp; node livereload"
</code></pre>

<p>  },
  &ldquo;window&rdquo;: {</p>

<pre><code>"toolbar": true,
"width": 800,
"height": 500
</code></pre>

<p>  }
}
```</p>

<p>Here&rsquo;s a quick look at the <code>package.json</code> file used to bootstrap Electron:</p>

<p>```json
{
  &ldquo;name&rdquo;: &ldquo;nwjs-app&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
  &ldquo;description&rdquo;: &ldquo;&rdquo;,
  &ldquo;main&rdquo;: &ldquo;src/main.js&rdquo;,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"nwjs": "/Applications/nwjs.app/Contents/MacOS/nwjs . &amp; node livereload",
"electron": "/Applications/Electron.app/Contents/MacOS/Electron . &amp; node livereload"
</code></pre>

<p>  },
  &ldquo;window&rdquo;: {</p>

<pre><code>"toolbar": true,
"width": 800,
"height": 500
</code></pre>

<p>  }
}
```</p>

<p>Additionally for Electron, my <code>main.js</code> file looks like the following:</p>

<p>```js
var app = require(&lsquo;app&rsquo;);  // Module to control application life.
var BrowserWindow = require(&lsquo;browser-window&rsquo;);  // Module to create native browser window.
var Menu = require(&lsquo;menu&rsquo;);
var ipc = require(&lsquo;ipc&rsquo;);</p>

<p>// var menu = new Menu();
// Report crashes to our server.
// require(&lsquo;crash-reporter&rsquo;).start();</p>

<p>// Keep a global reference of the window object, if you don&rsquo;t, the window will
// be closed automatically when the javascript object is GCed.
var mainWindow = null;
var menu;</p>

<p>var browserOptions = {
  height: 600,
  title: &lsquo;Electron App&rsquo;,
  width: 800
};</p>

<p>// Quit when all windows are closed.
app.on(&lsquo;window-all-closed&rsquo;, function() {
  if (process.platform != &lsquo;darwin&rsquo;)</p>

<pre><code>app.quit();
</code></pre>

<p>});</p>

<p>// This method will be called when Electron has done everything
// initialization and ready for creating browser windows.
app.on(&lsquo;ready&rsquo;, function() {
  // Create the browser window.
  mainWindow = new BrowserWindow(browserOptions);</p>

<p>  // and load the index.html of the app.
  mainWindow.loadUrl(&lsquo;file://&rsquo; + __dirname + &lsquo;/www/index.html&rsquo;);</p>

<p>  // Emitted when the window is closed.
  mainWindow.on(&lsquo;closed&rsquo;, function() {</p>

<pre><code>// Dereference the window object, usually you would store windows
// in an array if your app supports multi windows, this is the time
// when you should delete the corresponding element.
mainWindow = null;
</code></pre>

<p>  });</p>

<p>  ipc.on(&lsquo;update-application-menu&rsquo;, function(event, template, keystrokesByCommand) {</p>

<pre><code>//Go through the templates, wrap their click events back to the browser
console.log('update-application-menu - template');
console.log(template);
translateTemplate(template, keystrokesByCommand);
menu = Menu
Menu.setApplicationMenu(menu);
</code></pre>

<p>  });
});
```</p>

<h2>Native Menus</h2>

<h3>Electron</h3>

<p>Due to the way electron is split up into two processes, the main process (that handles native menus) and the browser process (mainly your app), menus are mainly available to be set on the main process.</p>

<p>If you want your app to change your application menus, you&rsquo;ll need to use the <a href="https://github.com/atom/electron/blob/master/docs/api/ipc-main-process.md"><code>ipc</code></a> module electron provides to get a message out to the main process to update the menus.</p>

<p>Other than that, the menu system is super easy if you wish to use static menus.</p>

<h3>Nw.js</h3>

<p>It&rsquo;s dead simple. Since it&rsquo;s all one bundled process, just call the set menu, and you&rsquo;re good. It&rsquo;s easy to set short cuts and modify the menus.</p>

<h2>Shell execution</h2>

<p>In nw.js, you&rsquo;re good to go when it comes to making external shell calls.</p>

<p>When it comes to electron, make sure you spawn your child processes with the <code>pipe</code> stdio option. Without that option, you may run into some errors (due to the fact electron doesnt have a stdout it manages easily).</p>

<h2>Packaging / running</h2>

<p>It&rsquo;s really easy on both platforms. Just set up your package.json/index.html/main.js file and run the appropriate command.</p>

<p>I don&rsquo;t have a lot of experience with nw.js, so I cant speak to the packaging process.</p>

<p>For electron, to run I like to use <a href="https://github.com/mafintosh/electron-prebuilt">electron-prebuilt</a> to run my <code>www</code> files as an app, using <a href="https://github.com/maxogden/electron-packager">electron-packager</a> to package into an <code>.app</code> file, and <a href="https://github.com/loopline-systems/electron-builder">electron-builder</a> to create installers (dmg/setup.exe).</p>

<h2>Icons</h2>

<p>To get custom icons for your app files for Mac, you need an <code>.icns</code> file that bundles up all your icons in all the formats/sizes for your dock icon, your cmd+tab icon, and your running icon.</p>

<p>I used this as a <a href="http://stackoverflow.com/questions/12306223/how-to-manually-create-icns-files-using-iconutil">walkthrough</a>.</p>

<p>I first started with a size of 1024x1024 pixels, then used the following commands:</p>

<p>```</p>

<h1>Enter app.iconset, drop in icon.png as a 1024 x 1024 image.</h1>

<h1>Run the following commands:</h1>

<p>sips -z 16 16     icon.png &mdash;out ./icon_16x16.png
sips -z 32 32     icon.png &mdash;out ./<a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x69;&#x63;&#x6f;&#110;&#95;&#49;&#x36;&#x78;&#49;&#x36;&#64;&#x32;&#x78;&#x2e;&#x70;&#x6e;&#x67;">&#x69;&#x63;&#111;&#x6e;&#95;&#49;&#x36;&#120;&#x31;&#54;&#x40;&#50;&#x78;&#x2e;&#x70;&#x6e;&#103;</a>
sips -z 32 32     icon.png &mdash;out ./icon_32x32.png
sips -z 64 64     icon.png &mdash;out ./<a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x69;&#x63;&#x6f;&#110;&#95;&#x33;&#x32;&#120;&#51;&#50;&#x40;&#x32;&#120;&#46;&#x70;&#x6e;&#x67;">&#105;&#x63;&#111;&#x6e;&#x5f;&#x33;&#x32;&#120;&#x33;&#x32;&#x40;&#50;&#120;&#x2e;&#x70;&#x6e;&#x67;</a>
sips -z 128 128   icon.png &mdash;out ./icon_128x128.png
sips -z 256 256   icon.png &mdash;out ./<a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#x69;&#x63;&#111;&#x6e;&#x5f;&#x31;&#50;&#x38;&#x78;&#x31;&#x32;&#56;&#64;&#50;&#120;&#x2e;&#112;&#110;&#x67;">&#105;&#x63;&#x6f;&#x6e;&#95;&#x31;&#x32;&#56;&#120;&#x31;&#x32;&#56;&#64;&#50;&#120;&#46;&#x70;&#x6e;&#103;</a>
sips -z 256 256   icon.png &mdash;out ./icon_256x256.png
sips -z 512 512   icon.png &mdash;out ./<a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#58;&#x69;&#x63;&#111;&#x6e;&#x5f;&#50;&#53;&#54;&#120;&#x32;&#x35;&#x36;&#x40;&#x32;&#x78;&#46;&#x70;&#x6e;&#x67;">&#x69;&#x63;&#111;&#x6e;&#95;&#x32;&#x35;&#x36;&#x78;&#50;&#x35;&#54;&#x40;&#x32;&#120;&#46;&#112;&#x6e;&#103;</a>
sips -z 512 512   icon.png &mdash;out ./icon_512x512.png
cp icon.png <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x69;&#x63;&#111;&#x6e;&#95;&#x35;&#49;&#x32;&#120;&#53;&#49;&#50;&#64;&#50;&#120;&#x2e;&#112;&#x6e;&#103;">&#105;&#x63;&#111;&#x6e;&#x5f;&#53;&#49;&#x32;&#x78;&#x35;&#49;&#50;&#64;&#x32;&#120;&#x2e;&#112;&#x6e;&#103;</a>
```</p>

<p>Then just run:</p>

<p><code>
iconutil -c icns app.iconset -o ./app-dir/YourAppName.app/Contents/Resources/app.icns
</code></p>

<p>You should now have your app with icons ready to go.</p>

<h2>Performance</h2>

<p>I didn&rsquo;t see a lot of major performance bumps from using either platform. It&rsquo;s JavaScript after all.</p>

<h2>Closing words</h2>

<p>Most of all, have fun with developing with these tools! They&rsquo;re open source and free, so when you get a chance, share some knowledge, post an issue, respond to an issue, or even submit a PR.</p>

<p>We&rsquo;re all in this together.</p>
]]></content>
  </entry>
  
</feed>
