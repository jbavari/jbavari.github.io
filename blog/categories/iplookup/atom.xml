<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iplookup | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/iplookup/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2019-12-23T21:01:40-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automating Local IP Lookup With Grunt and Node]]></title>
    <link href="http://jbavari.github.io/blog/2013/12/04/automating-local-ip-lookup-with-grunt-and-node/"/>
    <updated>2013-12-04T15:18:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2013/12/04/automating-local-ip-lookup-with-grunt-and-node</id>
    <content type="html"><![CDATA[<p>In the last few write-ups I&rsquo;ve done lately (see <a href="/blog/2013/12/02/automating-underlying-mobile-infrastructure-with-grunt">the servers post</a> and the <a href="/blog/2013/11/30/automating-phonegap-builds-with-grunt">phonegap builds post</a>), I&rsquo;ve been requiring the user to pass in the IP or the host in the command line. That works and all, but I usually have to go look up that ip using the good ol &lsquo;ifconfig&rsquo; command.</p>

<p>Since I&rsquo;m obsesed with automation, I&rsquo;d rather be lazy and just have the IP Address look up be automatic.</p>

<h2>Why am I writing this?</h2>

<p>I work in a dozen of different places. At any given time I may be at home, work, a coffee shop, etc. Most times my ip address will be different. I really just want to boot the servers up to my current IP and have the mobile app point at that IP. (The actual device can&rsquo;t understand localhost or a local 0.0.0.0 IP address over wifi)</p>

<p>Have you guessed it yet? I want to automatically set that ip address / hostname to my local IP without having to go look it up every time.</p>

<p>I found this post on <a href="http://stackoverflow.com/questions/3653065/get-local-ip-address-in-node-js">stackoverflow</a> that pointed me at this <a href="http://nodejs.org/api/os.html#os_os_networkinterfaces">Node.js documentation</a> to look up the network interfaces. This lets us dig deeper with Grunt to get the IP Address, especially since grunt sits on Node.js.</p>

<h3>Simple and (too) easy</h3>

<p>There&rsquo;s a Node.js call that puts all of the config settings into nice JSON for you to work with.</p>

<p>``` javascript Node.js command for getting network interfaces</p>

<pre><code>//Gets a JSON much like running 'ifconfig'
var ifaces = os.networkInterfaces();
</code></pre>

<p>```</p>

<p>The next key is to go through all the interfaces, and get the current local IP from the device from ethernet or wifi.</p>

<p>My grunt config looks something like this:</p>

<p>``` javascript
module.exports = function(grunt) {</p>

<pre><code>var os=require('os');
var ifaces=os.networkInterfaces();
var lookupIpAddress = null;
for (var dev in ifaces) {
    if(dev != "en1" &amp;&amp; dev != "en0") {
        continue;
    }
    ifaces[dev].forEach(function(details){
      if (details.family=='IPv4') {
        lookupIpAddress = details.address;
        break;
      }
    });
}

//If an IP Address is passed
//we're going to use the ip/host from the param
//passed over the command line 
//over the ip addressed that was looked up
var ipAddress = grunt.option('host') || lookupIpAddress;

grunt.initConfig({
    bgShell: {
        weinre: {
            cmd: 'weinre --httpPort 8080 --boundHost=' + ipAddress,
            bg: false
        },
        rails: {
            cmd: 'cd ../raisemore_web &amp;&amp; rails s -p 3000 -b ' + ipAddress
        }
    }
});

//Load in the preprocess tasks
grunt.loadTasks('preprocess');
require('load-grunt-tasks')(grunt);

//Tasks to have both servers at local ip and app at local ip
grunt.registerTask('servers', ['env:dev', 'preprocess:dev', 'bgShell:weinre', 'bgShell:rails']);

//Task to set up app files pointing at stage ip
//and setting up weinre at current local ip
grunt.registerTask('debug', [ 'env:stage', 'preprocess:stage', 'bgShell:weinre']);
</code></pre>

<p>}
```</p>

<p>Now we can just do &lsquo;grunt servers&rsquo; to have both servers up at my current local ip or &lsquo;grunt debug&rsquo; to get app accessing the stage server and having weinre run locally to debug the app.</p>

<p>Not much to it &ndash; call networkInterfaces(), go through JSON, get ipAddress &ndash; assign it to the option unless one was passed in. You&rsquo;re done.</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
</feed>
