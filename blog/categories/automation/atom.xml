<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: automation | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/automation/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2020-01-10T07:41:03-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automating Local IP Lookup With Grunt and Node]]></title>
    <link href="http://jbavari.github.io/blog/2013/12/04/automating-local-ip-lookup-with-grunt-and-node/"/>
    <updated>2013-12-04T15:18:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2013/12/04/automating-local-ip-lookup-with-grunt-and-node</id>
    <content type="html"><![CDATA[<p>In the last few write-ups I&rsquo;ve done lately (see <a href="/blog/2013/12/02/automating-underlying-mobile-infrastructure-with-grunt">the servers post</a> and the <a href="/blog/2013/11/30/automating-phonegap-builds-with-grunt">phonegap builds post</a>), I&rsquo;ve been requiring the user to pass in the IP or the host in the command line. That works and all, but I usually have to go look up that ip using the good ol &lsquo;ifconfig&rsquo; command.</p>

<p>Since I&rsquo;m obsesed with automation, I&rsquo;d rather be lazy and just have the IP Address look up be automatic.</p>

<h2>Why am I writing this?</h2>

<p>I work in a dozen of different places. At any given time I may be at home, work, a coffee shop, etc. Most times my ip address will be different. I really just want to boot the servers up to my current IP and have the mobile app point at that IP. (The actual device can&rsquo;t understand localhost or a local 0.0.0.0 IP address over wifi)</p>

<p>Have you guessed it yet? I want to automatically set that ip address / hostname to my local IP without having to go look it up every time.</p>

<p>I found this post on <a href="http://stackoverflow.com/questions/3653065/get-local-ip-address-in-node-js">stackoverflow</a> that pointed me at this <a href="http://nodejs.org/api/os.html#os_os_networkinterfaces">Node.js documentation</a> to look up the network interfaces. This lets us dig deeper with Grunt to get the IP Address, especially since grunt sits on Node.js.</p>

<h3>Simple and (too) easy</h3>

<p>There&rsquo;s a Node.js call that puts all of the config settings into nice JSON for you to work with.</p>

<p>``` javascript Node.js command for getting network interfaces</p>

<pre><code>//Gets a JSON much like running 'ifconfig'
var ifaces = os.networkInterfaces();
</code></pre>

<p>```</p>

<p>The next key is to go through all the interfaces, and get the current local IP from the device from ethernet or wifi.</p>

<p>My grunt config looks something like this:</p>

<p>``` javascript
module.exports = function(grunt) {</p>

<pre><code>var os=require('os');
var ifaces=os.networkInterfaces();
var lookupIpAddress = null;
for (var dev in ifaces) {
    if(dev != "en1" &amp;&amp; dev != "en0") {
        continue;
    }
    ifaces[dev].forEach(function(details){
      if (details.family=='IPv4') {
        lookupIpAddress = details.address;
        break;
      }
    });
}

//If an IP Address is passed
//we're going to use the ip/host from the param
//passed over the command line 
//over the ip addressed that was looked up
var ipAddress = grunt.option('host') || lookupIpAddress;

grunt.initConfig({
    bgShell: {
        weinre: {
            cmd: 'weinre --httpPort 8080 --boundHost=' + ipAddress,
            bg: false
        },
        rails: {
            cmd: 'cd ../raisemore_web &amp;&amp; rails s -p 3000 -b ' + ipAddress
        }
    }
});

//Load in the preprocess tasks
grunt.loadTasks('preprocess');
require('load-grunt-tasks')(grunt);

//Tasks to have both servers at local ip and app at local ip
grunt.registerTask('servers', ['env:dev', 'preprocess:dev', 'bgShell:weinre', 'bgShell:rails']);

//Task to set up app files pointing at stage ip
//and setting up weinre at current local ip
grunt.registerTask('debug', [ 'env:stage', 'preprocess:stage', 'bgShell:weinre']);
</code></pre>

<p>}
```</p>

<p>Now we can just do &lsquo;grunt servers&rsquo; to have both servers up at my current local ip or &lsquo;grunt debug&rsquo; to get app accessing the stage server and having weinre run locally to debug the app.</p>

<p>Not much to it &ndash; call networkInterfaces(), go through JSON, get ipAddress &ndash; assign it to the option unless one was passed in. You&rsquo;re done.</p>

<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Jasmine Tests With Grunt Karma]]></title>
    <link href="http://jbavari.github.io/blog/2013/12/03/automating-jasmine-tests-with-grunt-karma/"/>
    <updated>2013-12-03T09:22:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2013/12/03/automating-jasmine-tests-with-grunt-karma</id>
    <content type="html"><![CDATA[<p>I find myself lately in falling in love unit testing in Javascript with the <a href="http://pivotal.github.io/jasmine/">Jasmine</a> framework. It&rsquo;s really upped my trust levels that I&rsquo;ve been writing lately.</p>

<p>I don&rsquo;t want to go in depth about jasmine and how to use it, but what I do want to do is discuss a little bit of how to automate some of the precious tests you may already have.</p>

<h2>Why I wanted to start automating these tests</h2>

<p>I had a great set of tests created. Since most of the tests were in javascript, I needed a browser of some sort to act as the test runner.</p>

<p>My initial options for work flow after writing tests:</p>

<ul>
<li>Have a browser (chrome/firefox) pointed at the local SpecRunner.html and manually refresh after making code changes</li>
<li>Manually execute <a href="https://github.com/ariya/phantomjs/">phantomJS</a> to get the results from the SpecRunner.html file</li>
<li>Have a grunt task that would watch the code files and on change open a browser to execute the code changes</li>
</ul>


<h3>Whats wrong with the prior steps?</h3>

<p>It&rsquo;s manual. You have to take control and do it. That means, another step in the process. I&rsquo;m obsessed with automation which means I want to automate this.</p>

<h2>Do you believe in Karma?</h2>

<p>I did a quick google search for a Grunt plugin for automating jasmine tests and stumbled across <a href="https://github.com/karma-runner/grunt-karma">Grunt Karma</a> . I bet you&rsquo;re wonder what karma is? <a href="https://github.com/karma-runner/karma">Karma</a> is a node.js tool that opens multiple browsers and executes the tests you specify. SA-WEET.</p>

<p>Also to be noted, Karma works with other testing frameworks as well, so you aren&rsquo;t stuck with just Jasmine.</p>

<h3>AUTOMATE ME</h3>

<p>Getting started is easy, first running the &lsquo;npm install -g karma&rsquo; command to get karma installed, then running &lsquo;karma init&rsquo; to set up a config. In the config interactive set up,  you specify what testing framework to use, whether or not to use Require.js, what browsers to test with (multiple at a time is an option), what files to test, any files to ignore, and whether or not you want automatically watch and run tests after they change.</p>

<p>Once you&rsquo;re done, add the grunt config settings for karma as such:</p>

<p>``` javascript
karma: {
  unit: {</p>

<pre><code>configFile: 'karma.conf.js',
autoWatch: true
</code></pre>

<p>  }
}
```</p>

<p>If you got it right, fire it off with &lsquo;grunt karma&rsquo; &ndash; it should automatically start popping up browsers and giving you test statistics.</p>

<h2>What I would like to do with these test results</h2>

<p>On any code changes or check-ins, I&rsquo;d like to automatically run the unit tests and update our developer dashboard statistics (we use <a href="http://shopify.github.io/dashing/">Dashing</a> ) so we can have live stats of how our code is doing.</p>

<p>The next step in this process is to have Jenkins fire this puppy off when it needs. Perhaps even fire off a build to TestFlight to get the app right into the hands of our tests after all test have verified!</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Underlying Mobile Infrastructure With Grunt]]></title>
    <link href="http://jbavari.github.io/blog/2013/12/02/automating-underlying-mobile-infrastructure-with-grunt/"/>
    <updated>2013-12-02T19:15:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2013/12/02/automating-underlying-mobile-infrastructure-with-grunt</id>
    <content type="html"><![CDATA[<p>I&rsquo;m obsessed with automating some of the tasks that I find myself repetitively doing. I don&rsquo;t know about you, but I hate doing the same thing over and over &ndash; it&rsquo;s boring and pointless</p>

<p>I posted a little while ago regarding automation of phonegap build and deployments, see that <a href="/blog/2013/11/30/automating-phonegap-builds-with-grunt/">here</a>.</p>

<h2>Why am I bothering with this?</h2>

<p>Our mobile app is the core of what we do. As you may already well know, most mobile apps require an API server serving the application data. In this post, I&rsquo;d like to address automating the underlying infrastructure that supports the mobile app.</p>

<h3>It&rsquo;s a two-fold win</h3>

<p>The main reason is to help get the server stack up without doing all of the repetitive tasks. Getting the mobile infrastructure up can be a slight annoyance, especially when your task is to code.</p>

<p>We have a designer that works on the mobile app styles, and he shouldn&rsquo;t need to know or care about the requirements of the app just to get to work.</p>

<p>The second reason that I&rsquo;d want to automate the server stack is due to my frequently using <a href="http://people.apache.org/~pmuellr/weinre/docs/latest/">Weinre</a>. I use it a lot to debug either the iOS app or the Android app. Another thing to automate would be to get the weinre server up and have the script for it injected into my source references without having to manually do it.</p>

<h3>What I&rsquo;d prefer we do..</h3>

<p>I&rsquo;d like to just type simple commands&hellip; Something I can type to get my local dev servers up, or our designer can type that will get the whole stack and emulator running.</p>

<p>For our designer, I&rsquo;d want &lsquo;grunt emulate&rsquo;. For myself, I&rsquo;d want &lsquo;grunt emulate &mdash;weinre=true &mdash;host=192.168.1.100&rsquo; &ndash; either of those commands would do the following:</p>

<ul>
<li>Boot up Rails server at a specified IP</li>
<li>Boot up the weinre server at a specified IP (optionally)</li>
<li>Preprocess the index.html file to have the weinre javascript source reference</li>
<li>Adjust the app settings to be at the specified IP</li>
<li>Execute the xcode build command for the iOS project</li>
<li>Open the built app on the iOS Simulator</li>
</ul>


<h3>How to get there</h3>

<p>To get some of the servers up and running, we need a grunt task that would invoke those processes and would continue running in the background while the other tasks continue running. For this, we&rsquo;ll need another Grunt plugin, called <a href="https://npmjs.org/package/grunt-bg-shell">Grunt bgShell</a></p>

<p>First we&rsquo;ll define the background shell tasks in our grunt config file:</p>

<p>``` javascript Grunt background shell configuration
bgShell: {</p>

<pre><code>weinre: {
    cmd: 'weinre --httpPort 8080 --boundHost=' + ipAddress,
    bg: true
},
rails: {
    cmd: 'cd ../raisemore_web &amp;&amp; bundle install &amp;&amp; rails s -p 3000 -b ' + ipAddress
}
</code></pre>

<p>}
```</p>

<p>That covers the servers. Now, for the xcode build and ios-simulator, we&rsquo;ll use the standard <a href="https://github.com/sindresorhus/grunt-shell">grunt shell</a> plugin to keep running in sync. To invoke the iOS simulator, we&rsquo;ll use the Node.js package from Phonegap called <a href="https://github.com/phonegap/ios-sim">ios-sim</a></p>

<p>Before we can use ios-sim, we must invoke the npm installer for it, passing the -g flag for it to be globally installed.</p>

<p><code>sh Installing ios-sim
sudo npm install ios-sim -g
</code></p>

<p>Now let&rsquo;s configure the grunt shell tasks for xcode build and iphone simulation:</p>

<p>``` javascript Grunt shell configuration for xcode build and ios-sim
shell: {</p>

<pre><code>xcodebuild: {
    options: {
      stdout: true
    },
    command: [ 
        'cd ./ios', 
        'xcodebuild -project RaiseMore.xcodeproj -sdk iphonesimulator7.0 -scheme RaiseMore -configuration Debug install DSTROOT=/tmp/RaiseMore' ].join("&amp;&amp;")
},
iphonesimulator: {
    options: {
        stdout: true
    },
    command: [ 
        'ios-sim launch /tmp/RaiseMore/Applications/RaiseMore.app --sdk 5.0'
    ].join("&amp;&amp;")
}
</code></pre>

<p>}
```</p>

<p>That covers the configuration. Now we just need to have a grunt task that will handle all the preprocessing, start the servers, and then start the build process, and finally run the simulator with the newly built app.</p>

<p>The preprocessing steps were covered in my previous post <a href="/blog/2013/11/30/automating-phonegap-builds-with-grunt/">here</a> and I&rsquo;ll leave the preprocessing configuration in that post.</p>

<p>All that is left now is to define the grunt tasks, as such:</p>

<p>``` javascript Grunt task definition
//Main task for our designer
grunt.registerTask(&lsquo;emulator&rsquo;, [&lsquo;env:dev&rsquo;, &lsquo;preprocess:dev&rsquo;, &lsquo;bgShell:weinre&rsquo;, &lsquo;bgShell:rails&rsquo;, &lsquo;shell:xcodebuild&rsquo;, &lsquo;shell:iphonesimulator&rsquo;]);</p>

<p>//Main task I&rsquo;ll probably use, via &lsquo;grunt servers &mdash;weinre=true &mdash;host=192.168.1.100&rsquo;
grunt.registerTask(&lsquo;servers&rsquo;, [&lsquo;bgShell:weinre&rsquo;, &lsquo;bgShell:rails&rsquo;])
```</p>

<h3>Using the task</h3>

<p>To just boot up the servers, do this:</p>

<p><code>sh Invoking the grunt server task
grunt servers
</code></p>

<p>If you want the servers and the simulator, do this:</p>

<p><code>sh Invoking the grunt emulator task
grunt emulator
</code></p>

<p>I know these methods aren&rsquo;t perfect, as there are a few areas I&rsquo;d like to improve on. I&rsquo;d like to have bgShell track the processes to kill them if the task is stopped, or instead to have them ignored if they are already running.</p>

<p>I guess that work will have to be addressed later. Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Phonegap Builds with Grunt]]></title>
    <link href="http://jbavari.github.io/blog/2013/11/30/automating-phonegap-builds-with-grunt/"/>
    <updated>2013-11-30T21:36:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2013/11/30/automating-phonegap-builds-with-grunt</id>
    <content type="html"><![CDATA[<p>One big thorn in my side lately has been getting our Phonegap/Cordova builds out to our team in a timely manner or just getting our mobile app environment set up. Currently our process involves changing a few files up, running some command line prompts, and then hitting a few different IDE&rsquo;s to crank out builds to manually upload to Testflight (www.testflightapp.com).</p>

<h3>What usually happens</h3>

<p>&ldquo;Hey can we please get a new build out to test with?&rdquo; &ndash; DataChomp<br/>
&ldquo;Yea, give me a few minutes to get the build out.&rdquo; &ndash; DevDweeb<br/>
&ldquo;Ok, lemme know when&rdquo; &ndash; DataChomp<br/>
&mdash;30 minutes later&mdash;<br/>
&ldquo;Hows that build coming?&rdquo; &ndash; DataChomp<br/>
&ldquo;Oh man.. not sure.. something messed up along the way. It&rsquo;ll be a bit more&rdquo; &ndash; DevDweeb<br/>
&mdash;waits a bit more&mdash;-<br/>
&ldquo;Nevermind. I figured it out.&rdquo; &ndash; DataChomp<br/>
&ldquo;Ok whew, cuz it will be a bit more&rdquo; &ndash; DevDweeb</p>

<h3>What I wish would happen</h3>

<p>&ldquo;Hey can we please get a new build out to test with?&rdquo; &ndash; DataChomp<br/>
&ldquo;That was done an hour ago, sir&rdquo; &ndash; Jenkins</p>

<h3>What is the prob, bob</h3>

<p>It&rsquo;s the process. Here&rsquo;s what a human would typically go through for the project:</p>

<p>1) Point the build at the correct API end point (localhost/stage/production)<br/>
2) Ensure the HTML has the script for weinre remote debugging (may need to be commented out if not needed)<br/>
3) Open XCode &ndash; build the ios project<br/>
4) Take the build from the project &ndash; upload to Testflight<br/>
5) Open Eclipse &ndash; build the android project<br/>
6) Take the build from the android project &ndash; upload to Testflight</p>

<p>That is a predictable set of steps for a human, but as we all know, humans are prone to make errors. I know I do.</p>

<p>The answer, then, is I didn&rsquo;t know how bad ass Grunt was and has so many plugins to assist with automation as I do now.</p>

<p>Luckily for me, I found a great post from Jim at imgur, from his post here: <a href="http://imgur.com/blog/2013/07/16/tech-tuesday-using-grunt-to-simplify-deployment-processes/">http://imgur.com/blog/2013/07/16/tech-tuesday-using-grunt-to-simplify-deployment-processes/</a></p>

<p>I&rsquo;m going to dive in to some ways I&rsquo;ve put together some grunt tasks to accomplish the above tasks.</p>

<h2>Introducing Grunt Task Runner</h2>

<p>Grunt is a javascript task runner. Learn more at <a href="http://gruntjs.com/">http://gruntjs.com/</a></p>

<p>The reason I like using it &ndash; the config for grunt is in javascript, grunt is lightweight, grunt has very little requirements, and you can get started with a ton of plug-ins available.</p>

<p>I plan on looking at Jenkins to integrate some of these tasks on check-ins for auto or nightly builds. See this post for an idea: <a href="http://sideroad.secret.jp/articles/grunt-on-jenkins/">http://sideroad.secret.jp/articles/grunt-on-jenkins/</a></p>

<h3>A few plug-ins I&rsquo;m using so far:</h3>

<p>Grunt Shell &ndash; <a href="https://github.com/sindresorhus/grunt-shell">https://github.com/sindresorhus/grunt-shell</a>
This plugin gives you some shell commands to easily fire off shell commands such as xcodebuild, or even fire up a weinre server.</p>

<p>Grunt preprocess &ndash; <a href="https://github.com/jsoverson/grunt-preprocess">https://github.com/jsoverson/grunt-preprocess</a>
Great tool to combine template files with environment settings to preprocess HTML/Javascript files to drop in IPs or other settings you specify</p>

<p>Grunt env &ndash; <a href="https://github.com/jsoverson/grunt-env">https://github.com/jsoverson/grunt-env</a>
Grunt tasks to automate environment configuration for future tasks.</p>

<h2>Removing the human element for app settings</h2>

<p>The human must first place the proper host or ip address in place based on where the build may desire to be pointed at as well as whether or not they want Weinre remote debugging (Read about weinre here: <a href="http://people.apache.org/~pmuellr/weinre/docs/latest/">http://people.apache.org/~pmuellr/weinre/docs/latest/</a>).</p>

<p>The host/ip address is stored in the appsettings.js file and the weinre remote debugging IP is stored in the index.html page.</p>

<p>First I specified the files that would be preprocessed in the grunt config file. In this case, I specified both appsettings.js and index.html located in a template directory being processed to another location relative from the gruntfile.</p>

<p>``` javascript Grunt preprocess settings
preprocess: {
  dev: {</p>

<pre><code>files : {
  './appsettings.js': '../tmpl/appsettings.js',
  '../index.html': '../tmpl/index.html'
}
</code></pre>

<p>  },
  prod: {</p>

<pre><code>files: {
  './appsettings.js': '../tmpl/appsettings.js',
  '../index.html': '../tmpl/index.html'
}
</code></pre>

<p>  },
  stage: {</p>

<pre><code>files : {
  './appsettings.js': '../tmpl/appsettings.js',
  '../index.html': '../tmpl/index.html'
}
</code></pre>

<p>  }
}
```</p>

<p>Then I specified the ENV settings in the grunt config:</p>

<p>``` javascript Grunt env settings
env: {
  dev: {</p>

<pre><code>  NODE_ENV: 'DEVELOPMENT',
  IP_ADDRESS: ipAddress
</code></pre>

<p>  },
  prod : {</p>

<pre><code>  NODE_ENV: 'PRODUCTION'
</code></pre>

<p>  },
  stage: {</p>

<pre><code>NODE_ENV: 'STAGE'
</code></pre>

<p>  }
}
```</p>

<p>You&rsquo;ll notice above, I assigned an ENV variable IP_ADDRESS to a variable ipAddress, which I&rsquo;ve specified for Grunt as an option that is passed in via command line. That looked something like this snip:</p>

<p>``` javascript Grunt option for command line parameters
module.exports = function(grunt) {
  var ipAddress = grunt.option(&lsquo;host&rsquo;) || &lsquo;localhost&rsquo;;
  // Project configuration.
  grunt.initConfig({</p>

<pre><code>preprocess: {
  dev: {
    files : {
      './appsettings.js': '../tmpl/appsettings.js',
      '../index.html': '../tmpl/index.html'
    }
  }
},
env: {
  dev: {
    NODE_ENV: 'Development',
    IP_ADDRESS: ipAddress
  }
}
</code></pre>

<p>  });
};
```</p>

<p>Using the command line to specify the host, you&rsquo;d invoke the following grunt command to set up a local dev environment with the server at the specified IP Address:</p>

<p><code>bash Passing host/ip address to the grunt tasks
grunt preprocess:dev --host=192.168.1.100
</code></p>

<p>Now I need to specify some templates to make use of the ENV variables set up. The grunt preprocess plugin documentation is great, so head there for more info. Here is how I applied it to the two files, appsettings.js and index.html</p>

<p>``` javascript AppSettings.js
AppSettings = {</p>

<pre><code>// @if NODE_ENV == 'DEVELOPMENT'
basePath: "http:///* @echo IP_ADDRESS */:3000/",
uploadBasePath: "http:///* @echo IP_ADDRESS */:3000/",
uploadURI: "https://media.address.com",
debug: true
// @endif
// @if NODE_ENV == 'STAGE'
basePath: "http://stage.server.com/",
uploadBasePath: "http://stage.server.com/"
// @endif
// @if NODE_ENV == 'PRODUCTION'
basePath: "http://prod.server.com/",
uploadBasePath: "http://prod.server.com/"
// @endif   
</code></pre>

<p>}
```</p>

<p>And the template for index.html:</p>

<p>``` html index.html
&hellip;. snip &hellip;.</p>

<!-- @if NODE_ENV='DEVELOPMENT' || NODE_ENV='STAGE' -->


<script src="http://<!-- @echo IP_ADDRESS -->:8080/target/target-script-min.js"></script>


<p></p>

<!-- @endif -->


<p>&hellip;. snip &hellip;.
```</p>

<h2>Removing the human element from app uploads</h2>

<p>Another tool that changed the game up for me was the Nomad-cli &ndash; a set of tools to build and upload to testflight, amazon, or your FTP choice &ndash; found at <a href="http://nomad-cli.com/">http://nomad-cli.com/</a></p>

<p>This gives us a ruby gem we can use to fire off to handle all of our iOS tasks for building and pushing to test flight. The tool I mainly use is called Shenzhen.</p>

<p>A few things are needed. First, we had to create a Gemfile in a subdirectory that used the nomad cli gem:</p>

<p><code>ruby Gemfile for nomad
source 'https://rubygems.org'
gem 'nomad-cli'
</code></p>

<p>Using the grunt shell task, I needed to ensure whoever ran this task got the nomad-cli gem first, fired off the command to build and distribute to testflight via shenzhen. It looked like this</p>

<p>``` javascript Grunt shell command for xcode build
shell: {
  testflight: {</p>

<pre><code>options: {
  stdout: true
},
command: [ 
  'cd ../../', 
  'bundle install', 
  'cd ./ios',
  'ipa build -p RaiseMore.xcodeproj -c Debug -s RaiseMore', 
  'ipa distribute -a &lt;%= testflight_settings.raisemore.apiKey %&gt; -T &lt;%= testflight_settings.raisemore.teamToken -m "' + uploadMessage + '"'
  'cd ../android', 
  'ant debug', 
  'cd bin',
  "curl http://testflightapp.com/api/builds.json " +
  "-F file=@MainActivity-debug.apk " +
  "-F api_token='&lt;%= testflight_settings.raisemore.apiToken %&gt;' " +
  "-F team_token='&lt;%= testflight_settings.raisemore.teamToken %&gt;' " +
  "-F notes='Some notes for automated upload' " + 
  "-F notify=False " +
  "-F distribution_lists='Testers'"
].join("&amp;&amp;")
</code></pre>

<p>  }
}
```
As you can see, there are quite a bit of commands contained in that grunt shell task. Let&rsquo;s step through the steps, just to be clear.</p>

<ol>
<li>CD to the IOS folder</li>
<li>Call the nomad CLI tool to build iOS app</li>
<li>Call the nomad CLI tool to upload to test flight</li>
<li>CD to the Android folder</li>
<li>Call the ant script to build the app</li>
<li>Curl to upload the file to Test Flight</li>
</ol>


<p>Perhaps you&rsquo;re wondering how I got the testflight_settings, I specified those as follows:</p>

<p>``` javascript Grunt testflight_settings
grunt.initConfig({
  testflight_settings: {</p>

<pre><code>raisemore: {
  apiToken: 'some_api_token_here',
  teamToken: 'some_team_token_here'
}
</code></pre>

<p>  }
}
```</p>

<h2>Putting the pieces together</h2>

<p>Lets see that Grunt config file now&hellip;</p>

<p>``` javascript Grunt config
module.exports = function(grunt) {</p>

<p>  //Options and variables</p>

<p>  var ipAddress = grunt.option(&lsquo;host&rsquo;) || &lsquo;localhost&rsquo;;
  var preprocess_files = {</p>

<pre><code>'./appsettings.js': '../tmpl/appsettings.js',
'../index.html': '../tmpl/index.html'
</code></pre>

<p>  };</p>

<p>  // Grunt Plug in configuration.</p>

<p>  grunt.initConfig({</p>

<pre><code>testflight_settings: {
  raisemore: {
    apiToken: 'apitoken',
    teamToken: 'teamtoken'
  }
},
preprocess: {
  dev: {
    files: preprocess_files
  },
  stage: {
    files: preprocess_files
  },
  prod: {
    files: preprocess_files
  }
},
env: {
  dev: {
    NODE_ENV: 'Development',
    IP_ADDRESS: ipAddress
  },
  stage: {
    NODE_ENV: 'Staging',
    IP_ADDRESS: ipAddress
  },
  prod: {
    NODE_ENV: 'Production'
  }
},
shell: {
  testflight: {
    options: {
      stdout: true
    },
    command: [ 
      'cd ../../', 
      'bundle install', 
      'cd ./ios',
      'ipa build -p RaiseMore.xcodeproj -c Debug -s RaiseMore', 
      'ipa distribute -a &lt;%= testflight_settings.raisemore.apiKey %&gt; -T &lt;%= testflight_settings.raisemore.teamToken -m "' + uploadMessage + '"'
      'cd ../android', 
      'ant debug', 
      'cd bin',
      "curl http://testflightapp.com/api/builds.json " +
      "-F file=@MainActivity-debug.apk " +
      "-F api_token='&lt;%= testflight_settings.raisemore.apiToken %&gt;' " +
      "-F team_token='&lt;%= testflight_settings.raisemore.teamToken %&gt;' " +
      "-F notes='Some notes for automated upload' " + 
      "-F notify=False " +
      "-F distribution_lists='Testers'"
    ].join("&amp;&amp;")
  }
}
</code></pre>

<p>  });</p>

<p>  //Now grunt tasks
  grunt.registerTask(&lsquo;dev&rsquo;, [&lsquo;env:dev&rsquo;, &lsquo;preprocess:dev&rsquo;]);
  grunt.registerTask(&lsquo;stage&rsquo;, [&lsquo;env:stage&rsquo;, &lsquo;preprocess:stage&rsquo;]);
  grunt.registerTask(&lsquo;prod&rsquo;, [&lsquo;env:prod&rsquo;, &lsquo;preprocess:prod&rsquo;]);</p>

<p>  grunt.registerTask(&lsquo;testflight&rsquo;, [&lsquo;env:stage&rsquo;, &lsquo;preprocess:stage&rsquo;, &lsquo;shell:testflight&rsquo;]);
};
```</p>

<p>So say then, our designer wants to try his design changes out with data from stage. He doesn&rsquo;t know what files to go touch, and most likely it gets confusing for him. Now with automation, he just types &lsquo;grunt stage&rsquo;.</p>

<p>Or say, now someone needs to get a build out on test flight for some testers. Simply type &lsquo;grunt testflight&rsquo;. 1 step is easier and way more predictable than the handful of steps one must jump through.</p>

<p>Although I&rsquo;m sure there are better ways to do this, I&rsquo;d love to hear about them. After fighting through tasks such as the grunt testflight plugin, and some vague issues there, the rather clear shell commands provide enough value for myself and my team to automate builds and even have these tasks integrated with any CL like Jenkins.</p>

<p>I hope you can walk away with a few ideas and become more productive. Cheers!</p>
]]></content>
  </entry>
  
</feed>
