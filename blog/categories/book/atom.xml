<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2020-02-17T07:42:04-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mindset - book review]]></title>
    <link href="http://jbavari.github.io/blog/2020/02/01/mindset-book-review/"/>
    <updated>2020-02-01T11:32:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2020/02/01/mindset-book-review</id>
    <content type="html"><![CDATA[<p>I just finished reading Mindset: The psychology of success. I picked it up because it has been high on my list of books to read in the last year. The final driving point to read the book came after reading Switch: How to change things when change is hard.</p>

<p>I really enjoyed reading about the different mindsets we carry and how they affect our lives. The two main mindsets Dr. Dweck points out is the fixed and growth mindsets. What defines the fixed mindset is one of stasis. That stasis defines how the mind locks onto an idea and believes it is fixed in place. The growth mindset, however, is one that believes that growth came come with effort. An example here is intelligence. The fixed mindset believes one is born with a certain intelligence and it cannot change; the growth mindset believes with effort intelligence can blossom.</p>

<p>This book review will differ from my last, in that I&rsquo;m adopting a new format that I picked up from <a href="https://mtlynch.io/">Michael Lynch&rsquo;s blog</a> and his book reports section.</p>

<h2>What I liked</h2>

<ul>
<li>Overall, the stories being shared about the mindsets and how they infiltrate our every actions.</li>
<li>The mindset you choose is paramount to your ability to grow and learn. If you think you know everything, you cannot learn anything.</li>
<li>Effort is more important than ability. Ability can be gained from effort. No one is born a surgeon.</li>
<li>The journey one can take to be more in the growth mindset more. Personally, I find myself in the fixed mindset sometimes. I&rsquo;ve since <a href="/blog/2020/02/30/my-fixed-mindset-persona">labeled this fixed mindset persona, Bob</a>. Now that I&rsquo;m more aware, I can label Bob, I know when he comes out, and I can invite him to be more patient with me.</li>
<li>The many stories of John Wooden, Jack Welch, and other leaders who embodied the growth mindset and help pave a way for better leaders through the growth mindset.</li>
<li>Looking at others with compassion and knowing they may be facing their fixed-mindset persona in that moment.</li>
</ul>


<h2>What I didn&rsquo;t like</h2>

<ul>
<li>The book exposing the parts of myself that fall into the fixed mindset. I didn&rsquo;t like being labeled so clearly. It goes to show how important psychology is in our everyday life.</li>
</ul>


<h2>Key Takeaways</h2>

<h3>The Mindsets</h3>

<ul>
<li>A quote from the book: &ldquo;it is not some fixed prior ability, but purposeful engagement..it&rsquo;s not always the people who start out the smarteset who end up the smartest&rdquo;.</li>
<li>&ldquo;The hallmark of the growth mindset is the passion for stretching yourself and sticking to it, even (or especially) when it&rsquo;s not going well&rdquo;.</li>
</ul>


<h3>Inside the mindsets</h3>

<ul>
<li>&ldquo;Believing that success is about learning, students with the growth mindset seized the chance. But those with the fixed mindset didn&rsquo;t want to epose their deficiencies. Instead, to feel smart in the short run, they were willing to put their college careers at risk. This is how the fixed mindset makes people into nonlearners.&rdquo;.</li>
<li>There was a popular phrase in the 1960s: &lsquo;becoming is better than being&rsquo;. I could use more of this reminder in my day to day life.</li>
<li>People with the growth mindset know that it takes time for potential to flower.</li>
<li>There is nothing wrong with being &lsquo;special&rsquo;. The problem is when &lsquo;special&rsquo; begins to mean &lsquo;better than others&rsquo;. A more valuable human being. A superior person. An entitled person.</li>
<li>Lurking behind the self-esteem of the fixed mindset is a simple question: &ldquo;if you&rsquo;re somebody when you&rsquo;re successful, what are you when you&rsquo;re unsuccessful?&rdquo;</li>
<li>Even in the growth mindset, failure will still hurt. But it doesn&rsquo;t define you &ndash; it&rsquo;s a problem to be faced, dealth with, and learned from.</li>
<li>Even geniuses still have to work hard for their achievements. No matter what your ability is, effort is what ignites that ability and turns it into accomplishment.</li>
<li>&ldquo;Why is effort terrifying? Two reasons &ndash; one is that in the fixed mindset, great geniuses are not supposed to need it. So just needing it casts a shadow on your ability. The second is that, as Nadja suggests, it robs you of all your excuses. Without effort, you can always say, &lsquo;I could have been [fill in the blanks]&rsquo;&rdquo;.</li>
</ul>


<h3>The truth about ability and accomplishment</h3>

<ul>
<li>In the fixed mindset, things are fixed forever. This is not true. The world is comprised of change at every moment. In the fixed mindset, a loser is forever.</li>
<li>A story shared here captures the spirit of this book: &ldquo;All at once Jimmy &ndash; the most hard core turned-off low-effort kid in the group &ndash; looked up with tears in his eyes and said, &lsquo;You mean I don&rsquo;t have to be dumb?&rsquo; From that day on, he worked. He started staying up late to do his homework, which he never used to bother with at all.&rdquo; Just having the mindset of growth can push us to apply effort.</li>
<li>From the book: &ldquo;Is it ability or mindset? Was it Mozart&rsquo;s musical ability or the fact that he worked till his hands were deformed? Was it Darwin&rsquo;s scientific ability or the fact that he collected specimens nonstop from an early childhood?&rdquo;</li>
<li>&ldquo;Just because some people can do something with little or no training, it doesn&rsquo;t mean that others can&rsquo;t do it (and sometimes do it even better) with training&rdquo;</li>
<li>&ldquo;Telling children they are smart, in the end, made them feel dumber and act dumber, but claim they were smarter. We don&rsquo;t mean to rob others of their zest for challenge and recipe for success. But that&rsquo;s the danger&rdquo;</li>
<li>Labels can be dangerous. A story is shared that before tests, if students had to mark a checkbox of their label (say, african american) they were then set up with subconscious thoughts that harmed their achievements. Anything that could remind you of a stereotype could potentially rob you of your power. This doesn&rsquo;t happen to everyone, however, mainly those who are in the fixed mindset. When people are in the growth mindset, the stereotype doesn&rsquo;t disrupt their performance.</li>
<li>Try to find the tremendous effort tht went into others accomplishments &ndash; and admire them more for that.</li>
</ul>


<h3>Sports: The Mindset of a champion</h3>

<ul>
<li>A champion is someone who could raise their level of play when they needed to. When the match is on the line, they suddenly &ldquo;get around three times tougher&rdquo;.</li>
<li>Character is the ability to dig down and find the strength even when things are going against you.</li>
<li>An excerpt that hit me hard: &ldquo;All of these people had character. None of them thought they were special people, born with the right to win. They were people who worked hard, who learned how to keep their focus under pressure, and who stretched beyond their ordinary abilities when they had to.&rdquo;.</li>
<li>&ldquo;How good you are at sports will always improve if you work harder at it.&rdquo;</li>
<li>Mia Hamm tells us, &ldquo;after every game or practice, if you walk off the field knowing that you gave everything you had, you will always be a winner.&rdquo;</li>
<li>&ldquo;Those with the growth mindset found setbacks motivating. They&rsquo;re informative. They&rsquo;re a wake up call.&rdquo;</li>
<li>Be aware of the somebody-nobody syndrome. &ldquo;If I win, I&rsquo;ll be somebody; if I lose, I&rsquo;ll be nobody&rdquo;. Worrying about being a nobody is not the mindset that motivates and sustains champions. Somebodies are not determined by whether they won or lost. Somebodies are people who go for it with all they have. If you go for it with all you have, you will already be a somebody.</li>
</ul>


<h3>Business: Mindset and Leadership</h3>

<ul>
<li>&ldquo;The best leaders were ones not constantly trying to prove they&rsquo;re better than others. They don&rsquo;t highlight the pecking order with themselves at the top, they don&rsquo;t claim credit for other people&rsquo;s contributions, and they don&rsquo;t undermine others to feel powerful&rdquo;</li>
<li>Comparison leaders were typically concerned with their reputation for personal greatness, such so that they put companies up to fail after their regime ended. Collins put it: &ldquo;After all, what better testament to your own personal greatness than that the place falls apart after you leave.&rdquo;</li>
<li>The story here about Lee Iacocca, his time at Ford Motor Company, and his reign at the Chrystler corporation, where he rose and fall. His obsession with the fixed mindset and &lsquo;being the person in charge&rsquo; drove him to ultimately be pushed out.</li>
<li>Dr Dweck highlights an excerpt from the book &ldquo;Brutal Bosses&rdquo;, that represents the kind of abuse of power via the bosses' desire &ldquo;to enhance their own feelings of power, competence, and value at the subordinate&rsquo;s expense&rdquo;. &ldquo;These types of bosses have the power to make people worse off. And when they do, they feel better about themselves&rdquo;</li>
<li>Fixed mindset bosses are most threatened by competent people, because they are the ones who pose the greatest threat to the boss.</li>
<li>&ldquo;The minute a leader allows himself to become the primary reality people worry about, rather than reality being the primary reality, you have a recipe for mediocracy, or worse&rdquo;</li>
<li>Dr. Dweck outlines a story of Jack Welch, CEO of GE, who would frequent the front-line employees to get a better story of what his employees were facing. By doing this, he was more in touch with the company and garnered more respect from his employees. Dr. Dweck also shares the story of Jack Welch as a young engineer at GE, where he caused a chemical explosion. He immediately drove the hundred miles ot the company headquarters to face the music and explain himself to the boss. When he got there, the treatment he got was understanding and supportive. Jack Welch stated, &ldquo;Charlies reaction made a huge impression on me.. if we&rsquo;re managing good people who are clearly eating themselves up over an error, our job is to help them through it.&rdquo;. This type of leadership is the type of leadership I want to learn more of and act upon.</li>
<li>When leading a company, state that the company is about growth, not self-importance.</li>
<li>Companies should be in the business of &ldquo;not crowning a few princes, we need to work as a team. Genius is not enough; we need to get the job done.&rdquo;</li>
<li>Fixed mindset leaders are full of bitterness; growth mindset leaders are full of gratitude.</li>
<li>&ldquo;Managers with a growth mindset think it&rsquo;s nice to have talent, but that&rsquo;s just the starting point. These managers are more committed to their employees' development, and to their own.&rdquo;</li>
<li>Look for managers that embody the growth mindset, and they will grow others as well.</li>
</ul>


<h3>Relationships: Mindsets in love</h3>

<ul>
<li>A good french quote: &ldquo;Tout comprendre c'est tout pardoneer&rdquo; &ndash; &ldquo;To understand all is to forgive all&rdquo;.</li>
<li>There is no such thing as a &lsquo;no effort relationship&rsquo;. &ldquo;It takes great work to communicate accurately and it takes work to expose and resolve conflicting hopes and beliefs. It doesn&rsquo;t mean there is no &lsquo;they lived happily ever after&rsquo;, but it&rsquo;s more like, &lsquo;they worked happily ever after&rsquo;&rdquo;.</li>
<li>&ldquo;People with fixed mindsets see faults in their partners, become contemptuous of them and dissatisfied with the whole relationship. People with the growth mindset, on the other hand, can see their partners' imperfections and still think they have a fine relationship.&rdquo;</li>
<li>Couples that learned to respond to each other not with angry labels, but with helpful actions, were able to weather any storm.</li>
<li>Try to avoid thinking your partner is incapable of change. Once you do, nothing can improve the relationship.</li>
<li>Avoid people who make you feel bad about yourself.</li>
</ul>


<h3>Parents, teachers, and coaches</h3>

<ul>
<li>Try to plant the seed of the growth mindset in others; celebrate their efforts, downplay the ability.</li>
<li>Remember that when you compliment someone on their fixed &lsquo;ability&rsquo;, you may set them up for high expectations and trigger their fixed mindset thought patterns.</li>
<li>Stay away from praise that judges others intelligence or talent.</li>
<li>Drive home the idea that skills and achievement come through commitment and effort.</li>
<li>Help others <a href="http://www.paulgraham.com/lesson.html">see grades not as an end in themselves</a>, but as means to continue to grow.</li>
<li>Focusing on others fixed traits worries them and makes them complicated; they then focus on maintaining the fixed traits instead of applying effort to grow.</li>
<li>&ldquo;Compassion and consideration are the priorities of the highest order.&rdquo;</li>
<li>Lessons here from the basketball coaches: Wooden &ndash; where people become &ldquo;infected with success&rdquo;. Pat Riley calls it the &ldquo;disease of me&rdquo; &ndash; &ldquo;which is thinking one is the success and chucking the discipline and the work that got you there&rdquo;. &ldquo;Success lulls you. It makes the most ambitious of us complacent and sloppy.&rdquo;</li>
<li>Be aware of success &ndash; it can knock you into the fixed mindset. The idea of &ldquo;I won because I have talent. Therefore I will keep winning.&rdquo;</li>
</ul>


<h3>Changing mindsets</h3>

<ul>
<li>CH 8 &ndash; Dr. Dweck outlines a system to gaining more of the growth mindset. The first is knowing that everyone has a mix of the fixed and growth mindsets already; we must all acknowledge that fact, welcome to the human race.</li>
<li>The second step is becoming aware of what triggers the fixed mindset persona.</li>
<li>The third step is to give your fixed mindset persona a name. Maybe it was someone in your earlier life. Maybe it was from a book or a movie.</li>
<li>The fourth step is to accept it and invite it along on your journey to grow. Thank it for it&rsquo;s input, ask it to come along with you, allow it to subside. Accept that others have it and it may be a part of their struggles.</li>
<li>Look at others in a new light &ndash; maybe the times you think they are incompetent, stubborn, or defiant when they just don&rsquo;t know how to function in the current conditions. Perhaps they are battling their fixed mindset personas at that time. Offer to help. Learn and help learn.</li>
<li>Continue to ask yourself, &lsquo;what do I have to do to maintain and continue the growth?&rsquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Finishing - Book Review]]></title>
    <link href="http://jbavari.github.io/blog/2020/01/03/start-finishing-book-review/"/>
    <updated>2020-01-03T21:55:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2020/01/03/start-finishing-book-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently diving into a book recommended by Seth Godin &ndash; Start Finishing. This book is primarily aimed at supplying people with additional approachs to tackling &lsquo;important problems&rsquo;.</p>

<h1>Part 1 &ndash; Clearing the decks for your best work</h1>

<h2>Chapter 1 &ldquo;Someday&rdquo; can be today</h2>

<p>Charlie drives right to the point &ndash; you know what your best work is, and when you are not doing it. We thrive when we do our best work. Best work is defined as work that is important to you. Your best work also requires dropping the busy work and focusing on the work. The more important to you, the easier it is to get displaced by other things.</p>

<p>Best work projects generally take 3 to 5 years.</p>

<h3>No ideas, only projects</h3>

<p>Throughout the book, the author Charlie Gilkey describes that there are no ideas that we work on, we work on projects. The important part here being, deciding what we need to do to complete these projects. By figuring out what we say no to, we can say yes to the right things. This book starts by breaking down some systems one can take to figure out what the right things are, they &lsquo;burying&rsquo; the rest.</p>

<h2>Chapter 2 &ndash; Getting to your best work</h2>

<p>Charlie talks about the &lsquo;air sandwich&rsquo; &ndash; which is a gap between your vision, mission, purpose, and big goals being one side of the slice of bread. The other being your day-to-day reality. Between these slices lies the air sandwich.</p>

<p>These are created from:</p>

<ul>
<li>Competing priorities</li>
<li>Head trash</li>
<li>No realistic plan</li>
<li>Too few resources</li>
<li>Poor team alignment</li>
</ul>


<p>Head trash is pretty straight forward, it&rsquo;s the negative thoughts you tell yourself. Cut that crap out!</p>

<p>You can combat the 5 issues above with:</p>

<ul>
<li>Intention</li>
<li>Awareness</li>
<li>Boundaries</li>
<li>Courage</li>
<li>Discipline</li>
</ul>


<p>A good tip here that Charlie suggests is tryign to align competing priorities. He also suggests taking out the head trash by being aware of it, having the backbone to challenge it, and the discipline to adjust it.</p>

<h2>Chapter 3 &ndash; pick an idea that matters</h2>

<p>Charlie suggests doing some inner soul searching here to find what really matters to you. Some practices &ndash; trying out mind mapping, asking some questions to challenge our head trash and doubts as well as thrashing, and avoiding creative constipation.</p>

<p>Creative constipation is defined as having a ton of creative projects that keep piling up, but that we cannot finish. This leads to just like human nature, where it becomes uncomfortable. Charlie points out that there is a known tradition that links creativity and destruction: the same energy that fuels creation also fuels destruction. We must be aware of this and funnel that energy in the right direction.</p>

<p>Charlie also puts failure in a new light &ndash; its a learning mechanism.</p>

<h3>Displacement is your friend</h3>

<p>To make room for your best work projects, you must displace other lower level work. This means, saying no to projects. Saying no to other peoples projects that dont mean much to you or aren&rsquo;t backed by purpose. Pointing out here, to trade up, you have to let go. By holding on to one thing, you cannot take another.</p>

<p>Charlie gives some great exercises here to find out what means the most to you, some steps that you can take to identify what the best work project really is.</p>

<h1>Part 2 &ndash; Planning your project</h1>

<h2>Chapter 4 &ndash; Convert your idea into a project</h2>

<p>Charlie reminds us of SMART goals &ndash; which are simple, meaningful, actionable, realistic, and trackable. He gives some questions here on how to measure each of these. There are also some steps to help make the goals more SMARTy.</p>

<p>Charlie also asks us to mark each project with levels of success, being it small, medium, or large. By identifying it up front, we can avoid beating ourselves up when a goal doesn&rsquo;t meet our expectations. We are laying out the expectations up front so to not be tricked later.</p>

<p>No date = No finish</p>

<h3>Success pack</h3>

<p>Gather a group of people who will support you along your best work projects. Turn to them when you need help, guidance. These can be mentors, but not necessarily there with you. They can be like in the book &ldquo;Think and Grow Rich&rdquo;, where you could ask yourself what that person would do, even when they are not physically there or available for a call.</p>

<h2>Chapter 5 &ndash; Make space for your project</h2>

<p>Charlie stresses that there is no time unless you make it. If your project is important, you will find a way to block up times in your day to focus on it.</p>

<p>Some steps:</p>

<ul>
<li>Chunking</li>
<li>Linking</li>
<li>Sequencing</li>
</ul>


<p>By doing these steps, we can create a plan to make space for the project.</p>

<p>Finding the goal of this chapter is that it&rsquo;s a marathon, not a sprint. Plan the sprints to be only three focus blocks per week to maintain momentum, efficiency, and focus.</p>

<p>Think of the chunks of work over time as blocks. You can have so many blocks per week.</p>

<p>The project pyramid. Made of Yearly Goal at the top, quarters, months, then weeks.</p>

<p>There are blocks of time to schedule, based on some categories:</p>

<ul>
<li>Focus Blocks</li>
<li>Social Blocks</li>
<li>Admin Blocks</li>
<li>Recovery Blocks</li>
</ul>


<h3>The 5 projects rule</h3>

<p>Charlie states that the human mind can at best focus on 5 projects. Any more and we will thrash more, as it takes 16 minutes to refocus on a task from interruption or refocusing on a new task type.</p>

<p>Charlie also reminds us to make time for recovery, as we&rsquo;re in this for a marathon, not a sprint.</p>

<h3>3 focus blocks per week</h3>

<p>By only having three focus blocks per week per project, we avoid &lsquo;thrash crash&rsquo;, which is the price we pay for bouncing between projects and refocusing. Try to be aware of this and plan accordingly.</p>

<h2>Chapter 6 &ndash; Build your project road map</h2>

<h3>Finding your true flow &ndash; Gates</h3>

<p>Focus on your strengths, use them to your advantage. Use this gage to find your strengths:</p>

<ul>
<li>Genius &ndash; what seems to be an expression of an inner creative force</li>
<li>Affinities &ndash; what you&rsquo;re drawn to</li>
<li>Talents &ndash; what seems to be your native skills or capabilities</li>
<li>Expertise &ndash; What you&rsquo;ve learned through experience and practice</li>
<li>Strengths &ndash; What seems to come easy for you</li>
</ul>


<p>Charlie here calls our Jonathan Fields and his Sparketypes that can help guide along your strengths. Charlie also calls for a budget that you can use to support yourself along your best work projects. By spending some money on yourself, within budget, you can buy more time to work on your best work projects. The example he gives here is brilliant &ndash; paying for grocery delivery service if it takes time away from your project during your highly creative times.</p>

<h3>Shared mental models</h3>

<p>Charlie gives some symbological meanings to completing by giving some simple mental models. It&rsquo;s not really the ideas here that are original, but rather the ideas with their corresponding mental models that make this book shine.</p>

<h3>Head Trash</h3>

<p>For example, I catch myself sabotoging my own projects, ideas, or thoughts. The mental model i&rsquo;ve had before has been &lsquo;what I say when I talk to myself&rsquo;, Charlie calls this &lsquo;head trash&rsquo;. The symbology there is powerful &ndash; trash being something that is stinky and we don&rsquo;t need to keep around but we keep around in our heads.</p>

<p>Charlie then attacks the more important questions that revolve around momento mori &ndash; that you have only so many &lsquo;best work&rsquo; ideas left in your life. This number is found by taking 85, subtracting your age, and dividing by 5 and rounding down. This time for projects</p>

<h3>Creative constipation</h3>

<p>Another great mental model is one of &lsquo;creative constipation&rsquo;. In that, when we have a fun creative idea, we may not act on it. And all humans have experience with constipation, it&rsquo;s very uncomfortable. Charlie addresses this again by stating, by finishing one, we can move on to the next. However, if we start, and perhaps do not finish, it will build up to those uncomfortable levels.</p>

<h3>Success Pack</h3>

<p>This is the idea that with it takes a village to raise a kid. Like the kid, the project too needs champions that can help keep you on the path to success.</p>

<h2>Chapter 7 &ndash; Keep flying by accounting for drag points</h2>

<p>The mental model here is that engineers need to account for drag the more and more velocity they are moving at. The same thing works here for projects, be aware of it. The person most guilty of adding drag to your project is you.</p>

<p>There are some no-win stories you tell yourself.</p>

<h3>Myths</h3>

<p>We tell ourselves myths about success, like it will wreck or prevent a relationship, the success vs virtue myth, and the &lsquo;what if i cant do it again&rsquo; myth. These are all false. Many can go on to create success without any bad effects, as long as one plans the blocks appropriately.</p>

<h3>Mediocracy</h3>

<p>We often choose mediocrity in the short term, because we don&rsquo;t want to succeed due to the no-win myths above. But we also don&rsquo;t want to fail &ndash; mediocrity is the space between success and failure.</p>

<h3>OPP</h3>

<p>OPP = other peoples priorities. This can take you away from your best work. Learn how to get away from them. The longer your best work project goes on, the more OPP you&rsquo;ll have to contend with it. Plan ahead that you need to respond to them. If you aren&rsquo;t clear about your priorities, you&rsquo;ll continually be beset with OPP.</p>

<p>Look for opportunities that you can include OPP into your own work, somehow.</p>

<h3>Derailers and Naysayers</h3>

<p>There will always exist some that will take you off your project and into doubt. Derailers might now know that they are derailing you. Tell them or get curious to see why they do that.</p>

<p>Naysayers are just that, haters are going to hate. Avoid them. Or instead, turn to your success pack.</p>

<p>Charlie says:</p>

<blockquote><p>Every ounce of energy you use grappling with a naysayer is much better spent on working on your project and interacting with your success pack</p></blockquote>

<h3>Project post-mortems</h3>

<p>Take some time during a project to do a post-mortem. This isn&rsquo;t to say the project will die, but look for opportunities to improve. Of course, you can also benefit by attempting to think through these things from the start, of course. Attempt to do as much learning as you can.</p>

<h1>Part 3 &ndash; Working the Plan</h1>

<h2>Chapter 8 &ndash; weave your project into your schedule</h2>

<h3>Basic rules</h3>

<p>The weekly block schedule, the Five projects rule, and your project road map together create a plan that you can follow and space to do the work.</p>

<p>Momentum planning is Charlie&rsquo;s term for the continual process of making and adjusting plans across all time perspectives. This means, doing weekly reviews, morning planning, and triaging. This also means weaving in the time blocking, project pyramid, and the Five Projects rule.</p>

<h3>Make sure your environment is working for you</h3>

<p>The environment can define the working conditions. Charlie gives an example of how during his graduate school time, most of his best writing happened in 6 years over about 60 days. This was because he tackled writing at the library.</p>

<p>The environment you work in is very important &ndash; providing for your focus, momentum, and creativity.</p>

<h3>Stacking and Batching</h3>

<p>Charlie makes the good point that it takes 16 minutes to refocus after being pulled from focus. There are some tricks he suggested, calling them stacking and batching.</p>

<p>Stacking = doing multiple things at once, when concentration is not required. The example here, while doing laundry, listen to an audiobook. While it seems like it&rsquo;s multitasking, it&rsquo;s not. Due to the less needs of the cognitive side of the brain, this becomes easy to do, riding the muscle memory train. Other examples: doing a meeting over a hike, exercising in the park while with the kids.</p>

<p>The second is batching &ndash; the example being that you set up admin blocks (described before) to check email, do your paperwork, etc. Batch them up together to tackle in one go around.</p>

<h3>Reducing the dread-to-work ratio</h3>

<p>Referencing the famous Mark Twain comment of eating a frog in the morning. Do it as early as possible, so that the rest of the day does not sap your creative and cognitive functions, while also decreasing the dread-to-work ratio of your day.</p>

<p>Dread is a function of time, meaning that if a chunk of work takes 5 minutes, it still takes 5 minutes. However, the &lsquo;dread&rsquo; increases substantially with time. The longer it sits there, the more dread you&rsquo;ve invested into the task. It&rsquo;s the psychological size that haunts you more than the task at hand.</p>

<p>Charlie states that the time you dread the task itself, the distinction becomes blurred, to the point that the time you spend worrying or thinking about it could have spent doing other things. If possible, batch the frogs together.</p>

<p>However, not all frogs can be done early in the morning, as they may require focus blocks. There will always be frogs, it&rsquo;s best to address them for what they are and set up some time to get them done.</p>

<h3>5 / 10 / 15 split</h3>

<p>This little time split reminds you to keep 5 projects at max, with 10 minutes for momentum planning before you start your day, and 15 minutes at the end of your day. This keeps you focused on the daily level.</p>

<p>Try to not plan too far out ahead, the example being you do not plan every gas break, stop light, and every other part of your travel if you are taking a car trip.</p>

<h2>Chapter 9 &ndash; Build Daily Momentum</h2>

<p>Make sure you celebrate small wins. Lean more on your success pack to help you identify wins.</p>

<p>Remember that great is the enemy of done. The more you care about the project, the less &lsquo;done&rsquo; it can achieve.</p>

<p>Create a win journal and store small wins there. The more small wins you get, the more momentum it builds. The more small wins, the better the big win will become.</p>

<p>Create routines and habits that make it easier to build and maintain momentum.</p>

<p>Charlie also suggests leaving a &lsquo;bread crumb&rsquo; trail, which will help you pick back up on projects when you leave them for a bit.</p>

<p>Charlie also addresses some tips you can use to avoid distractions:</p>

<ul>
<li>Use dumb tech</li>
<li>Turn off notifications</li>
<li>Delete apps or remove capabilities</li>
<li>Lock yourself out &ndash; Mac has Cold Turkey blocker, for example</li>
<li>Create better defaults during transition periods to replace the distracting defaults you may have</li>
</ul>


<h3>Cascades, tarpits, and logjams</h3>

<p>This is a nice mental model he shares &ndash; cascades are when one project gets behind, it cascades down. Tarpits are when you leave a project for so long, that when you come back to it, it&rsquo;s stuck in a tar pit and hard to get out. Log jams are what happen when you have too many projects and they get jammed and stuck all at once. Avoid these by the 5 project rule, leaving bread crumbs, and planning appropriately.</p>

<h2>Chapter 10 &ndash; Finish Strong</h2>

<p>Know that by finsihing one project, you are not done. There is more work to be done. It never ends. However, when you finish one project, make sure you take a victory lap and celebrate the win. Lean into your success pack to help drive this.</p>

<h3>CAT work</h3>

<p>CAT = clean up, archive, trash</p>

<p>This is the process you take between projects to clean up any artifacts, archive all the things before, and trash what you no longer need. If you don&rsquo;t do this between projects, you may waste time in the middle of a project doing these. That becomes a distraction.</p>

<h3>After action reviews</h3>

<p>In agile land, these are basically retrospections. Take time to ask the questions to improve later.</p>

<ul>
<li>What went well?</li>
<li>What setbacks, challenges, or missteps did I experience?</li>
<li>What did I learn?</li>
<li>What habits, practices, or routines do I want to keep doing going forward?</li>
<li>Were there any especially important difference makers to the project?</li>
</ul>


<p>However, one thing is important here. Finishing a best-work project unlocks new realities. Embrace them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery - Book Review]]></title>
    <link href="http://jbavari.github.io/blog/2019/11/10/continuous-deilvery-book-review/"/>
    <updated>2019-11-10T11:16:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/11/10/continuous-deilvery-book-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;m still diving into the <a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_4?crid=3LLBV00FE8TG3&amp;keywords=continuous+delivery&amp;qid=1576211505&amp;sprefix=continuous+deliv%2Caps%2C192&amp;sr=8-4">Continuous Delivery book</a>. I wanted to sketch out some (very) sparse notes in an attempt to retain the material.</p>

<h1>Chapter 1</h1>

<h2>Common release Anti-patterns</h2>

<ul>
<li>Deploying software manually</li>
<li>Deploying to a production-like environment only after Development is complete</li>
<li>Manual configuration management of production environments</li>
</ul>


<h2>Stages of a deployment pipeline</h2>

<ul>
<li>The commit stage &ndash; compile, unit test, analysis, build installers</li>
<li>Automated acceptance testing</li>
<li>Automated capacity testing</li>
<li>Manual testing &ndash; showcases, exploratory, testing</li>
<li>Release</li>
</ul>


<h3>Deploying to a production-like environment only after Development is complete</h3>

<h4>Problems</h4>

<ul>
<li>Ensure teams are working towards production type releases on a regular cadence, not in extended periods of time.</li>
<li>Manual configurations cause issues &ndash; work towards trying to automate those portions.</li>
<li>Scripts to do the deployments are better than manual steps written up. Documentation goes out of date, requires extra effort to keep alignment.</li>
<li>Need tighter collaboration between development and deployment teams.</li>
<li>Deploying to staging faster (where environments are closer to production) helps uncover issues, bind the dev/ops teams, and drives fixes to deployments faster.</li>
<li>The bigger diff between deployment and production environments</li>
</ul>


<h4>Solutions</h4>

<ul>
<li>Rehearse deployments to a staging or production-like environment several times before actually going to production.</li>
<li>Make sure everyone who is doing the deployments are working together on the deployments from the start of the project.</li>
<li>Make the cornerstone of deployment a means of testing both software and deployments throughout the process.</li>
</ul>


<h3>Manual configuration management of production environments</h3>

<h4>Signs of this anti-pattern</h4>

<ul>
<li>Having deployed successfully to many times to staging, the deployment to production fails.</li>
<li>The operations teams take longer to prepare an environment for a release.</li>
<li>You cannot step back to a prior configuration of your system.</li>
<li>Servers in the operating environments, unintentionally, have different versions of operating systems, third-party infrastructure, libraries, or patch levels.</li>
<li>Configuration of the system is carried out by modifying the configuration directly on production systems.</li>
</ul>


<h4>Solutions</h4>

<ul>
<li>All aspects of testing, staging, and production specifically the configuration of any third-party elements of the system should be applied from version control through an automated process.</li>
<li>The only way to make changes to production should be done through an automated process.</li>
<li>Make it possible to see at a glance what the currently released version of every piece of software is.</li>
<li>Make releases boring &ndash; to the point where they are cheap, low-risk, frequent, rapid, and predictable.</li>
</ul>


<h2>How to achieve these solutions?</h2>

<ul>
<li>Automate &ndash; make it repeatable without failure.</li>
<li>Frequent &ndash; make deltas between releases smaller to reduce risk and get immediate feedback.</li>
</ul>


<p>Three criteria to make feedback to be useful:
* Any change, whatever kind, needs to trigger the feedback process.
* The feedback must be delivered as soon as possible.
* The delivery team must receive feedback and then act on it.</p>

<p>How to get this feedback?</p>

<p>Working software decomposed into 4 components:</p>

<ul>
<li>Executable code</li>
<li>Configuration</li>
<li>Host environment</li>
<li>Data</li>
</ul>


<p>You should aim to have the executable code to be reused everywhere it is needed and never rebuilt.</p>

<p>Any change to an applications configuration, in whichever environment, should be tested with a representative range of the example systems.</p>

<p>If the environments are to changed, the whole system should be tested with the changes to the environment.</p>

<p>Finally, if the structure of the data changes, the change must also be tested.</p>

<p>The authors mention a few simple feedback checks:</p>

<ul>
<li>The software should fulfill certain requirements such as test coverage and other technology-specific metrics.</li>
<li>The software&rsquo;s functional acceptance tests must pass. This is a test on the business acceptance criteria.</li>
<li>The software&rsquo;s nonfunctional tests must pass &ndash; in regards to capacity, availability, security, and so on to meet it&rsquo;s users needs.</li>
</ul>


<p>Another key point the authors bring up that implementing a deployment pipeline is resource-intensive, especially once you have a comprehensive automated test suite. One of the key objectives is to optimize for human resource usage: we want to free the people to do the interesting work and leave repetition to machines.</p>

<p>The authors suggest to aim for 75% or so of the codebase.</p>

<h3>Breaking down the steps of the pipeline</h3>

<p>If tests fail in the early stages of the pipeline, they should not advance. We should aim to build a high confidence in the software in the first set of tests.</p>

<hr />

<p>Random notes:</p>

<p>CH1 &ndash; author recommends to get cross-functional groups all along the process. Also aim to have retrospections with the entire crew of developers, infra/operations, and testing</p>

<p>Being able to react to feedback also means broadcasting information. Using big, visible dashboards and other notification mechanisms. Also aim to make one is present in each team room.</p>

<p>Feedback is no good unless it is acted on.</p>

<p>Authors make a point here that by giving more of the pull/self-service model, you can increase velocity:
* Testers can select older versions of software to test with
* Support staff can deploy a released version into an environment to reproduce a defect.
* Operations staff can select a known good build to deploy into production as part of disaster recovery
* Releases can happen at a push of a button.</p>

<p>Note here applying to work:
* In each PR, it should address:
* Change in code
* Change in configuration (if any)
* Change in host environment (if any)
* Change in structures of data</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Architecture - Book Review]]></title>
    <link href="http://jbavari.github.io/blog/2019/10/08/clean-architecture-book-review/"/>
    <updated>2019-10-08T21:48:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2019/10/08/clean-architecture-book-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently read and held a nerd book club at work regarding Clean Architecture. Overall, I found this read easy to grok and entertain a few new ideas about software development. Uncle Bob also had a few things <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">on his blog post</a> about this topic.</p>

<p>If I could wrap up one picture that encompases the book:</p>

<p><img src="https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg" alt="This image" /></p>

<p>I&rsquo;ve also recently read parts of Domain Driven Design that introduce this same concept. I think Uncle Bob does a great job of sharing some great examples of the book of how architecture is an art, one that can morph with the needs of the project at hand, and is subject to trade-offs through the entire lifecycle of software. I love that the book starts off expressing the idea that thinking of delivery early on is a wise decision to incorporate into the architecture design.</p>

<p>Some other great points I found worthy of mention:</p>

<ul>
<li>How to think of the division of software with regards to firmware and hardware abstraction layers.</li>
<li>Most things are details &ndash; the framework, the database, the GUI, firmware &ndash; keep it separated from the internal domain layers of your business logic however possible.</li>
<li>SOLID Principles are important &ndash; also integrate into architecture design.</li>
<li>Architecture design with traditional monolith, service oriented, and micro-service anti-pattern warnings.</li>
<li>The idea that there is no silver bullet &ndash; <a href="https://twitter.com/codepitbull/status/784691906005635072">A good developer is like a werewolf: afraid of silver bullets</a></li>
</ul>


<p>This book club also gave the team some time to reflect and dive into the design of our current projects. Overall, this was a great book for a team to cover and come up with some action items to drive better software going forward.</p>
]]></content>
  </entry>
  
</feed>
