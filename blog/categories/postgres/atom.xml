<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: postgres | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/postgres/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2019-12-12T21:16:47-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding PostgreSQL geometric type support to Elixir]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/07/adding-postgresql-geometric-type-support-to-elixir/"/>
    <updated>2015-12-07T18:04:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/07/adding-postgresql-geometric-type-support-to-elixir</id>
    <content type="html"><![CDATA[<p>In the last week or so, I&rsquo;ve had a blast playing around with basic Postgres <a href="http://www.postgresql.org/docs/9.4/static/datatype-geometric.html">geometric types</a> to do basic earth distance queries.</p>

<p>From my favorite blog, <a href="http://datachomp.com/archives/radius-queries-in-postgres/">Datachomp shows how to use radius queries in postgres</a> to find the closest place to get a burrito fix. Since I&rsquo;ve been on an <a href="http://elixir-lang.org/">Elixir</a> kick lately, I figured it was time to contribute back to the open source world by adding first class burrito, err, geometric type support.</p>

<h2>Initial reaction</h2>

<p>I immediately made an Ecto model trying to use the point type in my model:</p>

<p>``` elixir
defmodule MyApp.LocationPoint do
  use MyApp.Web, :model</p>

<p>  schema &ldquo;location_point&rdquo; do</p>

<pre><code>field :name, :string
field :date, Ecto.DateTime
field :location, :point
timestamps
</code></pre>

<p>  end</p>

<p>  @required_fields ~w(name date)
  @optional_fields ~w(location)</p>

<p>  @doc &ldquo;&rdquo;&ldquo;
  Creates a changeset based on the <code>model</code> and <code>params</code>.</p>

<p>  If no params are provided, an invalid changeset is returned
  with no validation performed.
  &ldquo;&rdquo;&ldquo;
  def changeset(model, params \ :empty) do</p>

<pre><code>model
|&gt; cast(params, @required_fields, @optional_fields)
</code></pre>

<p>  end
end
```</p>

<p>Right away, when I ran the commands to retrieve this location from <code>iex</code>, it gave me some errors:</p>

<p><code>
$ iex -S mix
$ alias MyApp.Repo
$ alias MyApp.LocationPoint
$ Repo.all(LocationPoint)
$ ** (ArgumentError) no extension found for oid `600`
</code></p>

<p>Right away, I knew this mission was up to me to get point support into Postgrex.</p>

<p>In this post, I&rsquo;ll outline how to add type support to Postgres via the Elixir package, <a href="https://github.com/ericmj/postgrex">postgrex</a>. We will walk through adding the <code>Point</code> data type in Postgres.</p>

<p>This post will cover:</p>

<ul>
<li>How to see how postgres stores its types (built in and composite)</li>
<li>How postgrex does its type lookups</li>
<li>Finding the source type &ndash; adding it to postgres senders</li>
<li>Looking up postgres source code for data mapping</li>
<li>Adding new type <code>Point</code> type</li>
<li>Adding built in <code>Type</code> structs</li>
<li>Adding encode method</li>
<li>Adding decode method</li>
</ul>


<h1>How Postgres stores its types</h1>

<p>Postgres stores its types in a special system table called <code>pg_type</code> (<a href="http://www.postgresql.org/docs/9.4/static/catalog-pg-type.html">docs</a>). It defines a few things about the type:</p>

<ul>
<li>Its <code>typelem</code> &ndash; how the type is stored &ndash; array, or otherwise</li>
<li>Its <code>typsend</code> &ndash; Output conversion function (binary format), or 0 if none</li>
<li>Its <code>typarray</code> &ndash; an oid to another array type that has its send method</li>
</ul>


<h1>How Postgrex does type lookups</h1>

<p>Postgrex at it&rsquo;s core is a simple data adapter into PostgreSQL from Elixir. It&rsquo;s an awesome library, and if you&rsquo;re using <a href="https://github.com/elixir-lang/ecto">Ecto</a>, you&rsquo;re already using it!</p>

<p>First, let&rsquo;s look at how they are loading most types, by looking them up in the <code>pg_type</code> table in postgres:</p>

<p>```
  ### BOOTSTRAP TYPES AND EXTENSIONS ###</p>

<p>  @doc false
  def bootstrap_query(m, version) do</p>

<pre><code>{rngsubtype, join_range} =
  if version &gt;= {9, 2, 0} do
    {"coalesce(r.rngsubtype, 0)",
     "LEFT JOIN pg_range AS r ON r.rngtypid = t.oid"}
  else
    {"0", ""}
  end

"""
SELECT t.oid, t.typname, t.typsend, t.typreceive, t.typoutput, t.typinput,
       t.typelem, #{rngsubtype}, ARRAY (
  SELECT a.atttypid
  FROM pg_attribute AS a
  WHERE a.attrelid = t.typrelid AND a.attnum &gt; 0 AND NOT a.attisdropped
  ORDER BY a.attnum
)
FROM pg_type AS t
#{join_range}
WHERE
  t.typname::text = ANY ((#{sql_array(m.type)})::text[]) OR
  t.typsend::text = ANY ((#{sql_array(m.send)})::text[]) OR
  t.typreceive::text = ANY ((#{sql_array(m.receive)})::text[]) OR
  t.typoutput::text = ANY ((#{sql_array(m.output)})::text[]) OR
  t.typinput::text = ANY ((#{sql_array(m.input)})::text[])
"""
</code></pre>

<p>  end
```</p>

<p>You can see that under the hood, we&rsquo;re querying Postgres and asking it for it&rsquo;s types, so we can do OID lookups and call the appropriate encoder/decoder methods. From here, we can match up our newly added types encoding/decoding methods.</p>

<h1>Finding the source type &ndash; adding it to postgres senders</h1>

<p>Find information about the geometrics category:</p>

<p><code>SELECT * from pg_type where typcategory = 'G';</code></p>

<p>We will see the point type has an oid of 600, which is using a send specification of <code>point_send</code>. Other notable send types for geometries: <code>point_send lseg_send path_send box_send poly_send line_send circle_send</code>.</p>

<p>Thus, we&rsquo;ll update the send types in postgrex, located in the <code>binary.ex</code> file:</p>

<p>``` elixir
@senders ~w(boolsend bpcharsend textsend varcharsend byteasend</p>

<pre><code>        int2send int4send int8send float4send float8send numeric_send
        uuid_send date_send time_send timetz_send timestamp_send
        timestamptz_send interval_send enum_send tidsend unknownsend
        inet_send cidr_send macaddr_send point_send
        ) ++ @oid_senders
</code></pre>

<p>```</p>

<p>Boom, that gets us the oid to encode/decode off of!</p>

<h1>Looking up postgres source code for data mapping</h1>

<p>I hopped into the Postgres source code and looked up the struct type for point, <a href="https://github.com/postgres/postgres/blob/master/src/include/utils/geo_decls.h#L58-L62">found here</a>.</p>

<p>``` c++
typedef struct
{
  double    x,</p>

<pre><code>    y;
</code></pre>

<p>} Point;
```</p>

<p>Great, its just two floats, no big deal.</p>

<h1>Adding the point struct</h1>

<p>Let&rsquo;s craft our Postgrex stuct type in <code>builtins.ex</code> then!</p>

<p>```
defmodule Postgrex.Point do
  @moduledoc &ldquo;&rdquo;&ldquo;
  Struct for Postgres point.</p>

<p>  ## Fields</p>

<pre><code>* `x`
* `y`
</code></pre>

<p>  &ldquo;&rdquo;&ldquo;
  require Decimal
  @type t :: %<strong>MODULE</strong>{x: float, y: float}</p>

<p>  defstruct [</p>

<pre><code>x: nil,
y: nil]
</code></pre>

<p>end
```</p>

<h1>Adding the encode method</h1>

<p>Now since we are sending PostgreSQL binary data, we need to take our data and map it to it&rsquo;s binary form, via an <code>encode</code> method.</p>

<p>However, postgrex is going to do a type look up, based on the types that we used in that query above.</p>

<p>We&rsquo;ll add the methods to encode, that does some pattern matching to decipher we are getting the correct sender value.</p>

<p><code>
def encode(%TypeInfo{type: "point", send: "point_send"}, %Postgrex.Point{} = point, _, _),
  do: encode_point(point)
</code></p>

<p>As you can see, we are encoding, when a <code>TypeInfo</code> tuple is passed with type <code>point</code> and <code>send</code> <code>point_send</code>! Great, we just pass that to this method to parse out the two floats passed in the binary object:</p>

<p><code>
defp encode_point(%Postgrex.Point{x: x, y: y}),
  do: &lt;&lt;x::float64, y::float64&gt;&gt;
</code></p>

<p>It just takes those two values, and serializes them down to their binary counterparts.</p>

<p>That now handles the test we&rsquo;ve got to keep us honest:</p>

<p><code>
test "encode point", context do
  assert [[%Postgrex.Point{x: -97, y: 100}]] == query("SELECT $1::point", [%Postgrex.Point{x: -97, y: 100}])
end
</code></p>

<p>This test as promised, takes a <code>Postgrex.Point</code> type, and encodes it to the binary form, and sends it off to Postgres. How beautiful.</p>

<h1>Adding the decode method</h1>

<p>Now, when we get binary values from Postgres, we need to map that to our <code>Point</code> type we&rsquo;ve created.</p>

<p>Adding the functions to <code>decode</code> in <code>binary.ex</code>:</p>

<p>```
def decode(%TypeInfo{type: &ldquo;point&rdquo;}, binary, <em>, </em>),
  do: decode_point(binary)</p>

<h1>..snip..</h1>

<p>defp decode_point(&lt;&lt;x::float64, y::float64>>) do
  %Postgrex.Point{x: x, y: y}
end
<code>``
The real meat and potatoes is, receiving our binary parameter, mapping its individual segmets as two floats, sized 8 bytes, and then with the pattern matching mapping those to our</code>Postgrex.Point` struct. QED.</p>

<p>And the test:</p>

<p><code>
test "decode point", context do
  assert [[%Postgrex.Point{x: -97, y: 100}]] == query("SELECT point(-97, 100)::point", [])
  assert [[%Postgrex.Point{x: -97.5, y: 100.1}]] == query("SELECT point(-97.5, 100.1)::point", [])
end
</code></p>

<h1>Conclusion</h1>

<p>Once I finally figured out what pieces were what, I was able to run and create the point type, its mappings, and its senders it required, easily mapping to the struct in Elixir.</p>

<p>I plan to keep working on postgrex, to add first class support for Postgres geometric types.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In depth dive with Postgres Hstore and Rails 4]]></title>
    <link href="http://jbavari.github.io/blog/2014/04/26/in-depth-dive-with-postgres-hstore-and-rails-4/"/>
    <updated>2014-04-26T12:08:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/04/26/in-depth-dive-with-postgres-hstore-and-rails-4</id>
    <content type="html"><![CDATA[<p>I had a unique little situation pop up that needed a little more flexibility when it came to storing data in the db. We use Postgres at RaiseMore because we respect ourselves, so naturally, I wanted to take a swing using some Hstore options for our ever changing data schema.</p>

<p>My intention is not to cover the basics of getting started with Rails 4 and <a href="http://www.postgresql.org/docs/9.3/static/hstore.html">Postgres HStore</a>, so <a href="http://tastehoneyco.com/blog/postgresql-array-and-hstore-column-reference/?utm_source=rubyweekly&amp;utm_medium=email/">read at Honey Co</a> or <a href="http://inopinatus.org/2013/07/12/using-arrays-of-hstore-with-rails-4/">here at inopinatus</a> to get started.</p>

<h2>What I needed</h2>

<p>Simple, to store a few bits of data about a communication &ndash; primarily the subject, message, date/time, and what networks it was sent out on. It may or may not have some of these fields, and the networks may or may not change in the future. This sounds perfect for HStore.</p>

<p>First I started with a simple schema:</p>

<p>```
CREATE TABLE comm_logs (</p>

<pre><code>id serial NOT NULL,
user_id integer,
history hstore
</code></pre>

<p>)
```</p>

<p>At first, I just wanted to store when a message was sent and on what networks. I figured I&rsquo;d just have an AR model with one hstore column and everything would fit into that. It looked like this:</p>

<p>```
class CommunicationLogging &lt; ActiveRecord::Base</p>

<pre><code>def self.log(user_id, network, message, subject = nil)
    comm = CommunicationLogging.where('user_id = ?', user_id).first
    if comm.nil?
        comm = CommunicationLogging.new
        comm.user_id = user_id
        # Storing network as an array incase they decide to send to another network after this.
        comm.history = { 'message' =&gt; message, 'subject' =&gt; subject, 'network' =&gt; [network], 'time' =&gt; DateTime.now }}
    else 
        # Add history to array stored in network
        comm.history['network'].push(network)
    end
    comm.history_will_change!
    comm.save!
end
</code></pre>

<p>end
```</p>

<p>Pretty easy right? I ran into some difficulties REAL fast. The first was from JSON serialization. When I did this:</p>

<p>```</p>

<h1>In Rails Console</h1>

<p>CommunicationLogging.find(4).history[&lsquo;network&rsquo;]
=> &ldquo;[\"facebook\&rdquo;, \&ldquo;twitter\&rdquo;]&ldquo;
```</p>

<p>It gave me a nice FAT serialized version of a Hash array. What good does a string do me? I want my object! BLEH!</p>

<p>We still have to get this thing working, so lets proceed anyway and just do some manual converions with PostgreSQL&rsquo;s awesome <code>to_json</code> functionality.</p>

<p>Our result:</p>

<p><code>
"{"c": "networks", "networks": "[\"facebook\", \"twitter\"]"}"
</code></p>

<p>Cool, so its gonna be nasty still. Ok, how about just using Rails to_json method:</p>

<p><code>
"{\"id\":11,\"event_user_id\":null,\"history\":null,\"networks\":{\"c\":\"networks\",\"networks\":\"[\\\"facebook\\\", \\\"twitter\\\"]\"}}"
</code></p>

<p>Thanks, but no thanks. I&rsquo;m pretty set on having an array of values instead of some manual labor on converting those values.</p>

<p>I was learning real fast that storing arrays in hstore was going to be a challenge. The next stab I wanted to take was to simplify the storage and retrieval as well as using natural arrays.</p>

<p>NOTE: I changed the way I attacked the problem here partly because I was doing it wrong. Hopefully you can learn from my mistakes? :&ndash;)</p>

<p>This was my next stab, altering the table structure just a bit:</p>

<p>```
CREATE TABLE communication_logs (</p>

<pre><code>id serial NOT NULL,
user_id integer,
history hstore[]
networks hstore
</code></pre>

<p>)
```</p>

<p>What I did here was harness the awesome power of PostgreSQL&rsquo;s arrays and hstore. Taking this thing to the limit. I did this for two reasons:</p>

<ul>
<li>Constraints changed, we could send multiple communications out on multiple networks at any given time</li>
<li>I wanted a log of history with whatever pieces of data may or may not be there</li>
<li>Be able to quickly get the networks sent out per user</li>
</ul>


<p>Now my AR model is decorated with <a href="http://api.rubyonrails.org/classes/ActiveRecord/Store.html">store_accessor</a> to give me model attributes for the networks. It also stores the log of messages in an array naturally through the model, and accessed as a real HSTORE with array values (instead of json, yay).</p>

<p>```
class CommunicationLogging &lt; ActiveRecord::Base</p>

<pre><code>store_accessor :networks, :facebook, :twitter, :email, :sms, :push

def set_network(network)
    # for brevity only one listed
    case network.downcase
    when 'twitter'
        self.twitter = true
    end
end

def self.log(user_id, network, message, subject = nil)
    comm = CommunicationLogging.where('user_id = ?', user_id).first
    if comm.nil?
        comm = CommunicationLogging.new
        comm.user_id = user_id
    end

    comm.set_network(network)

    history_log = { 'message' =&gt; message, 'subject' =&gt; subject, 'network' =&gt; network, 'time' =&gt; DateTime.now }
    comm.history.push(history_log)


    comm.networks_will_change!
    comm.history_will_change!
    comm.save!
end
</code></pre>

<p>end
```</p>

<p>So what happens when I to_json my fields now in PostgreSQL?</p>

<p>```
// Networks
&ldquo;{"twitter&rdquo;: &ldquo;true&rdquo;}"</p>

<p>// History
&ldquo;[{"time&rdquo;: &ldquo;2014-04-27T10:15:50-05:00&rdquo;, &ldquo;message&rdquo;: &ldquo;asf&rdquo;, &ldquo;network&rdquo;: &ldquo;twitter&rdquo;, &ldquo;subject&rdquo;: &ldquo;asd&rdquo;}]&ldquo;
```</p>

<p>And rails?</p>

<p>```</p>

<h1>Networks</h1>

<p>&ldquo;{"twitter&rdquo;:\&ldquo;true&rdquo;}"</p>

<h1>History</h1>

<p>&ldquo;[{"time&rdquo;:&ldquo;2014-04-27T10:15:50-05:00&rdquo;,&ldquo;message&rdquo;:&ldquo;asf&rdquo;,&ldquo;network&rdquo;:&ldquo;twitter&rdquo;,&ldquo;subject&rdquo;:&ldquo;asd&rdquo;}]&ldquo;
```</p>

<p>Beautiful.</p>

<p>I had a lot of fun using PostgreSQL and Rails 4. I didn&rsquo;t find a lot of in-depth knowledge on it so I wanted to shed some light on the topic and hope this would push someone else who might be considering to try it out to give it a go.</p>

<p>I&rsquo;d like to follow up this post with another article on how to search these bad boys.</p>

<p>In closing:</p>

<ul>
<li>I will definitely use hstore more in the future. I like the freedom to just store whatever I want</li>
<li>I need to reach out to the Rails team and see what I can do about improving the array support in Active Record</li>
<li>I hope you try it out as well</li>
</ul>


<h3>Additional Resources</h3>

<ul>
<li><a href="http://postgresguide.com/sexy/hstore.html">Postgres Guide on HStore</a></li>
<li><a href="http://mikecoutermarsh.com/using-hstore-with-rails-4/">Mike Countermash&rsquo;s guide to Hstore with Rails 4</a></li>
<li><a href="http://platformonrails.wordpress.com/2013/03/17/enabling-postgresql-hstore-with-rails-4/">Platform on Rails &ndash; Enabling PostgreSQL Hstore in Rails 4</a></li>
<li><a href="http://blog.remarkablelabs.com/2012/12/a-love-affair-with-postgresql-rails-4-countdown-to-2013">RemarkableLabs &ndash; A love affair with PostgreSQL [Rails 4 Countdown to 2013]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Rails and Postgres Arrays Play Nice]]></title>
    <link href="http://jbavari.github.io/blog/2014/01/14/making-rails-and-postgres-arrays-play-nice/"/>
    <updated>2014-01-14T12:01:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2014/01/14/making-rails-and-postgres-arrays-play-nice</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve had a small need to store an array of string values in a Postgres array instead of making foreign tables and dealing with the fun ActiveRecord fancies there are to play with.</p>

<p>Digging into the topic, I was looking for some pre-existing knowledge on the topic. Turns out the people at <a href="http://blog.relatabase.com/rails-postgres-arrays">Relatabase</a> and <a href="https://coderwall.com/p/sud9ja">Stuart Liston at CoderWall</a> had some great knowledge to share on this.</p>

<p>Being the simpleton that I am, I found a ton of knowledge on how to query them, how to add them to your models, but still lacked some basic knowledge of how to USE them. Maybe you&rsquo;re like me, and this will help.</p>

<p>Adding to Stuart&rsquo;s code, lets assume we&rsquo;ve added the postgres column:</p>

<p>``` ruby
class AddTechToCompanies &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_column :companies, :technology_used, :string, array: true, default: '{}'
</code></pre>

<p>  end
end
```</p>

<p>Using <a href="http://guides.rubyonrails.org/active_record_querying.html#scopes">Ruby Scopes</a> and the proper Postgres querying syntax:</p>

<p>``` ruby
class Company &lt; ActiveRecord::Base</p>

<pre><code>scope :any_tech, -&gt; (tech){where('? = ANY(technology_used)', tech)}
scope :all_tech, -&gt; (tech){where('? = ALL(technology_used)', tech)}
</code></pre>

<p>end
```</p>

<p>Simple enough and easy to read. Lets tackle the simple task of adding a company with a few properties: Name, website, and technology_used.</p>

<p>``` ruby</p>

<h1>..snip..</h1>

<p>company = Company.new
company.name = &ldquo;RaiseMore&rdquo;
company.website_url = &ldquo;<a href="http://www.raisemore.com">http://www.raisemore.com</a>&rdquo;
company.technology_used = [&lsquo;Ruby&rsquo;, &lsquo;Rails&rsquo;, &lsquo;Sinatra&rsquo;, &lsquo;JavaScript&rsquo;, &lsquo;Redis&rsquo;, &lsquo;PhoneGap&rsquo;, &lsquo;Sidekiq&rsquo;]</p>

<p>company.save!
```</p>

<p>This will add our basic info, as well as get us our data back by doing this:</p>

<p>``` ruby Interactive Console Output
rails_company = Company.any_tech(&lsquo;Rails&rsquo;)</p>

<p>Company Load (2.6ms)  SELECT &ldquo;companies&rdquo;.* FROM &ldquo;companies&rdquo; WHERE (&lsquo;Rails&rsquo; = ANY(technology_used))
 => #&lt;ActiveRecord::Relation [#<Company id: 1, name: "RaiseMore", founded: "2011", website_url: "http://www.raisemore.com", logo_url: "http://res.cloudinary.com/hfjjoialf/image/upload/v1...", description: "We are an event fundraising platform focused on hel...", company_type: "Start up", market: "Charity Fundraising", technology_used: ["Rails", "Postgres", "Sinatra", "PhoneGap", "JavaScript", "HTML5", "Redis"], interns_needed: true, twitter_id: "@raise_more", created_at: "2014-01-13 21:49:39", updated_at: "2014-01-13 21:49:39">]></p>

<p>rails_company.technology_used</p>

<p>=> [&ldquo;Rails&rdquo;, &ldquo;Postgres&rdquo;, &ldquo;Sinatra&rdquo;, &ldquo;PhoneGap&rdquo;, &ldquo;JavaScript&rdquo;, &ldquo;HTML5&rdquo;, &ldquo;Redis&rdquo;]</p>

<p>```</p>

<p>Cool, so saving the array data is easy. What about updating? As <a href="http://blog.relatabase.com/rails-postgres-arrays">the relatabase post points out</a>,</p>

<p><code>One huge caveat of this approach is that rails doesn’t clone the array when saving the original for dirty checking, so any in-place modification to the array won’t register that it’s changed.</code></p>

<p>This leaves us with these options:</p>

<ul>
<li>set the dirty flag ourselves: <code>rails_company.technology_used_will_change!</code></li>
<li>update using update_attributes: <code>rails_company.update_attributes(:technology_used =&gt; ['Rails', 'Redis', 'Go', 'Erlang'] )</code></li>
</ul>


<h2>Overall results</h2>

<p>The way Rails handles arrays is not as complete as a like, but hey, we are skipping a step by getting around foreign key tables. It&rsquo;s not like you should expect much. I&rsquo;d say they are allowed for small use projects, but if you really need to do some searching or have referential integrity, stick with foreign key tables.</p>

<p>Also, check out the following resources:</p>

<p><a href="http://adamsanderson.github.io/railsconf_2013/?full#1">Postgres &ndash; The Best Tool You&rsquo;re Already Using</a></p>

<p><a href="http://reefpoints.dockyard.com/ruby/2012/09/18/rails-4-sneak-peek-postgresql-array-support.html">Rails 4.0 Sneak Peek: PostgreSQL array support</a></p>
]]></content>
  </entry>
  
</feed>
