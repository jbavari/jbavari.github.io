<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2020-02-17T07:42:04-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Scoreboard Project]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/04/the-scoreboard-project/"/>
    <updated>2015-12-04T17:22:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/04/the-scoreboard-project</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been wanting to dig more into some technologies I&rsquo;ve been wanting to explore and gain more experience. Not only this, but I wanted to make sure my dev workflow was still improving, my tools were getting sharpened, and I was re-establishing the best practices as much as I could.</p>

<p>Those specific technologies I wanted to dig into was:</p>

<ul>
<li>Building a CLI in Ruby, using <a href="https://github.com/erikhuda/thor">Thor</a></li>
<li>A <a href="http://sinatrarb.com">Sinatra</a> Modular API</li>
<li>Solifying <a href="https://github.com/jeremyevans/sequel">Sequel</a> Model usage and JSON serialization</li>
<li>Building a dashboard using <a href="https://github.com/Shopify/dashing">Dashing</a></li>
<li>Diving more into <a href="https://github.com/bbatsov/rubocop">Rubocop</a> for Ruby static code analysis</li>
<li>Automated Code Review using <a href="http://codeclimate.com">CodeClimate</a></li>
</ul>


<p>I found a way to connect all the dots in what I&rsquo;m calling the scoreboard project. I chose these technologies because it would let me shine up my ruby/sql skills without a framework carrying me the way. (Although they mostly did anyway!)</p>

<p>This blog post will go over the idea of making an API around scoreboards. There will be a simple CLI tool to gather scores on &lsquo;games&rsquo;. Those scores will be sent to the API, to store in Postgres. The dashboard project will then pull these values from postgres and display them in an easy to view manner.</p>

<h2>This post</h2>

<p>With this post, i&rsquo;ll go over the individual pieces of the project, the interesting tidbits of each one, and finally go over a short retrospective over the entire project.</p>

<p>In entire time, the project took about a day and a half. It was fun, and I really enjoyed the experience over all.</p>

<h2>The pieces</h2>

<ul>
<li><a href="https://github.com/jbavari/scoreboard-cli">Scoreboard CLI</a></li>
<li><a href="https://github.com/jbavari/scoreboard-api">Scoreboard API</a></li>
<li><a href="https://github.com/jbavari/scoreboard-dashboard">Scoreboard Dashboard</a></li>
<li>Scoreboard Mobile App (coming soon)</li>
</ul>


<p>All of the projects are listed on my github profile. I&rsquo;ve been trying to keep most issues in the github repo&rsquo;s issue page for each respective project.</p>

<p>All of the projects are checked by CodeClimate, and I&rsquo;ve been trying to keep up with rubocop&rsquo;s rules on these as I go.</p>

<h2>Scoreboard CLI</h2>

<p>The idea for the CLI was to prompt the user for a home team and visitor team, then collect data about getting a touch down for the home team, for example: <code>h:td</code>.</p>

<p>It would keep prompting for more scoring plays until the user gives a SIGTERM or hits CTRL+D.</p>

<p>First I started by reading up on Thor, which was an absolute pleasure to work with. You can download it via <code>gem install scoreboard</code>.</p>

<p>To make it available via command line, I added this:</p>

<p><code>ruby
  spec.bindir        = "bin"
  spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }
</code></p>

<p>Then in <code>bin/scoreboard</code> <a href="https://github.com/jbavari/scoreboard-cli/blob/master/bin/scoreboard">link</a>, we just require in our CLI and run it with the arguments:</p>

<p>``` ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>require_relative &ldquo;../lib/scoreboard/cli&rdquo;</p>

<p>begin
  cli = Scoreboard::Cli.new
  cli.start(ARGV)
rescue => e
  raise e if $DEBUG
  STDERR.puts e.message
  STDERR.puts e.backtrace.join(&ldquo;\n&rdquo;)
  exit 1
end
```</p>

<h3>A note on the SIGTERM exception handling</h3>

<p>If you see in my <code>STDIN.each_line</code> loop where I read in scoring entries, <a href="https://github.com/jbavari/scoreboard-cli/blob/master/lib/scoreboard/cli.rb#L47">you will see</a> I rescue all Exception. This could be improved to find the exact SIGTERM exception is being thrown, but for simplicity, I left it catching the general exception.</p>

<h2>Scoreboard API</h2>

<p>The API has a few paths, based on the <code>/api/v1</code> namespace for requests.</p>

<p>You can access its teams or the entire scoreboard, via <code>GET /api/v1/teams</code> or <code>GET /api/v1/scores</code>. You can see the core <a href="https://github.com/jbavari/scoreboard-api/blob/master/application.rb">Sinatra Application</a> on github.</p>

<p>It was absolutely easy to set up the <a href="https://github.com/jbavari/scoreboard-api/tree/master/migrations">Sequel migrations</a> to define the team table and the scoreboard table in postgres.</p>

<p>The main tying point was getting the Sequel models to serialize, which was solved in another blog post.</p>

<h2>Scoreboard Dashboard</h2>

<p>Dashing was really easy to get started, a project set up, and out the gate.</p>

<p>First I had to include Sequel to get me my data, which I included an <code>Api</code> model to ease the SQL bridge for me.</p>

<p>The main point here was the <code>scoreboard.rb</code> file which was scheduled to run every 5 seconds, gather data from some crafty queries, and send that data to the dashboard. Other than the HTML markup, this was the chunky part of it:</p>

<p>``` ruby
require &lsquo;sequel&rsquo;</p>

<p>DB = Sequel.connect(&lsquo;postgres://localhost/scoreboard&rsquo;)
scoreboard = DB[:scoreboard]
team = DB[:team]</p>

<p>send_event(&lsquo;games-played&rsquo;, { value: scoreboard.count })</p>

<p>def teams_played
  DB[&lt;&lt;-eos</p>

<pre><code>  select
    sum(value)::int as value,
    label
  from (
    select count(home_id) as value, name as label from team inner join scoreboard on team.id = scoreboard.home_id group by scoreboard.home_id, team.name

    UNION ALL

    select count(visitor_id) as value, name as label from team inner join scoreboard on team.id = scoreboard.visitor_id group by scoreboard.visitor_id, team.name
  ) sub
  group by value, label
  order by value desc
eos
</code></pre>

<p>  ]</p>

<p>end</p>

<p>def team_scoreboard
  DB[&lt;&lt;-eos</p>

<pre><code>  select 
    s.id,
    t.name as home_team, 
    t2.name as visitor_team, 
    home_score, 
    visitor_score 
  from team t 
  inner join scoreboard s on s.home_id = t.id 
  inner join team t2 on t2.id = s.visitor_id
  limit 10;
eos
</code></pre>

<p>  ]
end</p>

<p>SCHEDULER.every &lsquo;5s&rsquo; do
  teams = teams_played.map do |item|</p>

<pre><code>{:label =&gt; item[:label], :value =&gt; item[:value]}
</code></pre>

<p>  end
  send_event(&lsquo;games-played&rsquo;, { value: scoreboard.count })
  send_event(&lsquo;teams&rsquo;, { items: teams })
  puts &ldquo;Scoreboard: #{team_scoreboard.to_a}&rdquo;</p>

<p>  send_event(&lsquo;scoreboard&rsquo;, { items: team_scoreboard.to_a })
end
```</p>

<h1>Retrospective</h1>

<ul>
<li>What went right</li>
<li>What went wrong</li>
<li>What could be improved</li>
</ul>


<h2>What went right</h2>

<ul>
<li>The CLI came together smoothly. Thor was easy to get running.</li>
<li>Getting data to post to the API was a breeze</li>
<li>Sinatra and Sequel were easy to hoist up a simple API to take POST data and serve GET requests as JSON</li>
<li>Getting data into the dashboard was SUPER easy with Sequel, no need to do the ORM dance</li>
<li>Dashing was easy to create my own scoreboard component, using the <code>data-</code> type DOM attributes</li>
</ul>


<h2>What went wrong</h2>

<ul>
<li>Had some issues handling SIGTERM in CLI</li>
<li>CLI still doesnt validate input</li>
<li>API for Sinatra was a little difficult to get JSON serialization off the bat</li>
<li>Dashing is very &lsquo;opinionated&rsquo; and doesnt give you more room to fit into an existing app</li>
<li>No tests were made</li>
<li>Nothing is deployed to servers yet</li>
</ul>


<h2>What could be improved</h2>

<ul>
<li>Minitest suite for CLI, API, and the Dashboard</li>
<li>Dashboard process tasks could be broken out to be more DRY</li>
<li>CLI needs to check and validate input</li>
<li>API needs to add in rollbar, new relic, or other metrics to help find errors</li>
<li>Deploy all the things!</li>
</ul>


<h1>Future plans</h1>

<p>The plan is to keep working on this project and continue improving tooling and getting other best practices in place. Finally, ship it to digital ocean and enjoy the conveniences they provide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using JSON serializers in Sinatra]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/04/using-json-serializers-in-sinatra/"/>
    <updated>2015-12-04T11:17:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/04/using-json-serializers-in-sinatra</id>
    <content type="html"><![CDATA[<p>I ran into a quick little issue with serializing some of my <a href="https://github.com/jeremyevans/sequel">Sequel</a> models.</p>

<p>The <a href="http://sequel.jeremyevans.net/rdoc-plugins/classes/Sequel/Plugins/JsonSerializer.html">official JSON serializer docs</a> are great, I just wanted to shine more light on the issue.</p>

<p>If you&rsquo;re using Sequel models, just throw in the quick line of <code>plugin :json_serializer</code>.</p>

<p>``` ruby</p>

<h1>Get our database connection</h1>

<p>require_relative &ldquo;./db&rdquo;
module ScoreboardApi
  class Team &lt; Sequel::Model(:team)</p>

<pre><code>plugin :json_serializer
serialize_attributes :json, :name
</code></pre>

<p>  end
end
```</p>

<p>Then, you just use the Sinatra contrib gem to have it json serializer attach:</p>

<p>```</p>

<h1>Web framework</h1>

<p>gem &ldquo;sinatra&rdquo;, &ldquo;1.4.6&rdquo;, require: &ldquo;sinatra/base&rdquo;</p>

<h1>Sinatra addons &ndash; JSON, Namespace</h1>

<p>gem &ldquo;sinatra-contrib&rdquo;, &ldquo;1.4.6&rdquo;
```</p>

<p>Set up your API routes and spit out JSON:</p>

<p>```
require &ldquo;bundler&rdquo;
require &ldquo;sinatra/base&rdquo;
require &ldquo;sinatra/json&rdquo;
require &ldquo;sinatra/namespace&rdquo;</p>

<p>require &ldquo;./models/scoreboard&rdquo;
require &ldquo;./models/team&rdquo;</p>

<p>Bundler.require</p>

<p>module ScoreboardApi
  class App &lt; Sinatra::Application</p>

<pre><code>register Sinatra::Namespace
configure do
  disable :method_override
  disable :static

  set :sessions,
      :httponly     =&gt; true,
      :secure       =&gt; production?,
      :expire_after =&gt; 31557600, # 1 year
      :secret       =&gt; ENV["SESSION_SECRET"]
end

use Rack::Deflater

namespace "/api/v1" do
  get "/scores" do
    json :scoreboard =&gt; Scoreboard.all
  end

  get "/teams" do
    json :teams =&gt; Team.all
  end
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>That"s all folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Safari 9 Force Touch API]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/03/playing-with-safari-9-force-touch-api/"/>
    <updated>2015-12-03T10:46:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/03/playing-with-safari-9-force-touch-api</id>
    <content type="html"><![CDATA[<p>I just got the new Macbook Pro not too long ago and noticed they had this intimately named featured called Force Touch.</p>

<p>Force touch, as it sounds, lets you touch things more <em>intimately</em>. The gist is this &ndash; there are sensors on the new touch pad that let you determine how hard the touch pad is touched, and has some API into that.</p>

<p>I admit, the API is kinda just for fun since only Safari 9 and new Macbooks have the feature. Still, I wanted to play more with ES6 and create a little API wrapper to make it easier and let this feature name to be a little less creepy.</p>

<p>After a little googling, I found an awesome <a href="http://www.joshuakehn.com/2015/10/22/using-new-force-touch-apis-in-javascript.html">blog post by Joshua Kehn</a> that detailed more about using Force touch. I wanted to make a quick wrapper around it to do some fun effects and animations.</p>

<p>The idea is &ndash; we&rsquo;ll have an API called <code>TheForce</code> that we can attach handlers to for fun visual effects.</p>

<p>Joshua&rsquo;s demo had a box that when tapped and applying pressure, padding would be increased. I took <a href="https://gist.github.com/joshkehn/3ed6b535408162fe94ae">his gist</a> and turned it into an ES6 module. (See the <a href="http://www.joshuakehn.com/2015/10/22/using-new-force-touch-apis-in-javascript.html#demo">demo</a>)</p>

<h2>The API</h2>

<p>I wrote it up last night in a quick hurry. The gist is this:</p>

<ul>
<li>Attach to a DOM element</li>
<li>Apply a glow to the element based applied pressure to touchpad</li>
</ul>


<p>Code to attach a button named <code>you</code>, and trigger it automatically:</p>

<p>``` js
var luke = TheForce.beWith(&lsquo;you&rsquo;).alter({&lsquo;boxShadow&rsquo;);</p>

<!-- luke.alter('boxShadow'); -->


<p>```</p>
]]></content>
  </entry>
  
</feed>
