<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: review | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/review/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2020-01-10T07:58:30-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Start Finishing - Book Review]]></title>
    <link href="http://jbavari.github.io/blog/2020/01/03/start-finishing-book-review/"/>
    <updated>2020-01-03T21:55:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2020/01/03/start-finishing-book-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently diving into a book recommended by Seth Godin &ndash; Start Finishing. This book is primarily aimed at supplying people with additional approachs to tackling &lsquo;important problems&rsquo;.</p>

<h1>Part 1 &ndash; Clearing the decks for your best work</h1>

<h2>Chapter 1 &ldquo;Someday&rdquo; can be today</h2>

<p>Charlie drives right to the point &ndash; you know what your best work is, and when you are not doing it. We thrive when we do our best work. Best work is defined as work that is important to you. Your best work also requires dropping the busy work and focusing on the work. The more important to you, the easier it is to get displaced by other things.</p>

<p>Best work projects generally take 3 to 5 years.</p>

<h3>No ideas, only projects</h3>

<p>Throughout the book, the author Charlie Gilkey describes that there are no ideas that we work on, we work on projects. The important part here being, deciding what we need to do to complete these projects. By figuring out what we say no to, we can say yes to the right things. This book starts by breaking down some systems one can take to figure out what the right things are, they &lsquo;burying&rsquo; the rest.</p>

<h2>Chapter 2 &ndash; Getting to your best work</h2>

<p>Charlie talks about the &lsquo;air sandwich&rsquo; &ndash; which is a gap between your vision, mission, purpose, and big goals being one side of the slice of bread. The other being your day-to-day reality. Between these slices lies the air sandwich.</p>

<p>These are created from:</p>

<ul>
<li>Competing priorities</li>
<li>Head trash</li>
<li>No realistic plan</li>
<li>Too few resources</li>
<li>Poor team alignment</li>
</ul>


<p>Head trash is pretty straight forward, it&rsquo;s the negative thoughts you tell yourself. Cut that crap out!</p>

<p>You can combat the 5 issues above with:</p>

<ul>
<li>Intention</li>
<li>Awareness</li>
<li>Boundaries</li>
<li>Courage</li>
<li>Discipline</li>
</ul>


<p>A good tip here that Charlie suggests is tryign to align competing priorities. He also suggests taking out the head trash by being aware of it, having the backbone to challenge it, and the discipline to adjust it.</p>

<h2>Chapter 3 &ndash; pick an idea that matters</h2>

<p>Charlie suggests doing some inner soul searching here to find what really matters to you. Some practices &ndash; trying out mind mapping, asking some questions to challenge our head trash and doubts as well as thrashing, and avoiding creative constipation.</p>

<p>Creative constipation is defined as having a ton of creative projects that keep piling up, but that we cannot finish. This leads to just like human nature, where it becomes uncomfortable. Charlie points out that there is a known tradition that links creativity and destruction: the same energy that fuels creation also fuels destruction. We must be aware of this and funnel that energy in the right direction.</p>

<p>Charlie also puts failure in a new light &ndash; its a learning mechanism.</p>

<h3>Displacement is your friend</h3>

<p>To make room for your best work projects, you must displace other lower level work. This means, saying no to projects. Saying no to other peoples projects that dont mean much to you or aren&rsquo;t backed by purpose. Pointing out here, to trade up, you have to let go. By holding on to one thing, you cannot take another.</p>

<p>Charlie gives some great exercises here to find out what means the most to you, some steps that you can take to identify what the best work project really is.</p>

<h1>Part 2 &ndash; Planning your project</h1>

<h2>Chapter 4 &ndash; Convert your idea into a project</h2>

<p>Charlie reminds us of SMART goals &ndash; which are simple, meaningful, actionable, realistic, and trackable. He gives some questions here on how to measure each of these. There are also some steps to help make the goals more SMARTy.</p>

<p>Charlie also asks us to mark each project with levels of success, being it small, medium, or large. By identifying it up front, we can avoid beating ourselves up when a goal doesn&rsquo;t meet our expectations. We are laying out the expectations up front so to not be tricked later.</p>

<p>No date = No finish</p>

<h3>Success pack</h3>

<p>Gather a group of people who will support you along your best work projects. Turn to them when you need help, guidance. These can be mentors, but not necessarily there with you. They can be like in the book &ldquo;Think and Grow Rich&rdquo;, where you could ask yourself what that person would do, even when they are not physically there or available for a call.</p>

<h2>Chapter 5 &ndash; Make space for your project</h2>

<p>Charlie stresses that there is no time unless you make it. If your project is important, you will find a way to block up times in your day to focus on it.</p>

<p>Some steps:</p>

<ul>
<li>Chunking</li>
<li>Linking</li>
<li>Sequencing</li>
</ul>


<p>By doing these steps, we can create a plan to make space for the project.</p>

<p>Finding the goal of this chapter is that it&rsquo;s a marathon, not a sprint. Plan the sprints to be only three focus blocks per week to maintain momentum, efficiency, and focus.</p>

<p>Think of the chunks of work over time as blocks. You can have so many blocks per week.</p>

<p>The project pyramid. Made of Yearly Goal at the top, quarters, months, then weeks.</p>

<p>There are blocks of time to schedule, based on some categories:</p>

<ul>
<li>Focus Blocks</li>
<li>Social Blocks</li>
<li>Admin Blocks</li>
<li>Recovery Blocks</li>
</ul>


<h3>The 5 projects rule</h3>

<p>Charlie states that the human mind can at best focus on 5 projects. Any more and we will thrash more, as it takes 16 minutes to refocus on a task from interruption or refocusing on a new task type.</p>

<p>Charlie also reminds us to make time for recovery, as we&rsquo;re in this for a marathon, not a sprint.</p>

<h3>3 focus blocks per week</h3>

<p>By only having three focus blocks per week per project, we avoid &lsquo;thrash crash&rsquo;, which is the price we pay for bouncing between projects and refocusing. Try to be aware of this and plan accordingly.</p>

<h2>Chapter 6 &ndash; Build your project road map</h2>

<h3>Finding your true flow &ndash; Gates</h3>

<p>Focus on your strengths, use them to your advantage. Use this gage to find your strengths:</p>

<ul>
<li>Genius &ndash; what seems to be an expression of an inner creative force</li>
<li>Affinities &ndash; what you&rsquo;re drawn to</li>
<li>Talents &ndash; what seems to be your native skills or capabilities</li>
<li>Expertise &ndash; What you&rsquo;ve learned through experience and practice</li>
<li>Strengths &ndash; What seems to come easy for you</li>
</ul>


<p>Charlie here calls our Jonathan Fields and his Sparketypes that can help guide along your strengths. Charlie also calls for a budget that you can use to support yourself along your best work projects. By spending some money on yourself, within budget, you can buy more time to work on your best work projects. The example he gives here is brilliant &ndash; paying for grocery delivery service if it takes time away from your project during your highly creative times.</p>

<h3>Shared mental models</h3>

<p>Charlie gives some symbological meanings to completing by giving some simple mental models. It&rsquo;s not really the ideas here that are original, but rather the ideas with their corresponding mental models that make this book shine.</p>

<h3>Head Trash</h3>

<p>For example, I catch myself sabotoging my own projects, ideas, or thoughts. The mental model i&rsquo;ve had before has been &lsquo;what I say when I talk to myself&rsquo;, Charlie calls this &lsquo;head trash&rsquo;. The symbology there is powerful &ndash; trash being something that is stinky and we don&rsquo;t need to keep around but we keep around in our heads.</p>

<p>Charlie then attacks the more important questions that revolve around momento mori &ndash; that you have only so many &lsquo;best work&rsquo; ideas left in your life. This number is found by taking 85, subtracting your age, and dividing by 5 and rounding down. This time for projects</p>

<h3>Creative constipation</h3>

<p>Another great mental model is one of &lsquo;creative constipation&rsquo;. In that, when we have a fun creative idea, we may not act on it. And all humans have experience with constipation, it&rsquo;s very uncomfortable. Charlie addresses this again by stating, by finishing one, we can move on to the next. However, if we start, and perhaps do not finish, it will build up to those uncomfortable levels.</p>

<h3>Success Pack</h3>

<p>This is the idea that with it takes a village to raise a kid. Like the kid, the project too needs champions that can help keep you on the path to success.</p>

<h2>Chapter 7 &ndash; Keep flying by accounting for drag points</h2>

<p>The mental model here is that engineers need to account for drag the more and more velocity they are moving at. The same thing works here for projects, be aware of it. The person most guilty of adding drag to your project is you.</p>

<p>There are some no-win stories you tell yourself.</p>

<h3>Myths</h3>

<p>We tell ourselves myths about success, like it will wreck or prevent a relationship, the success vs virtue myth, and the &lsquo;what if i cant do it again&rsquo; myth. These are all false. Many can go on to create success without any bad effects, as long as one plans the blocks appropriately.</p>

<h3>Mediocracy</h3>

<p>We often choose mediocrity in the short term, because we don&rsquo;t want to succeed due to the no-win myths above. But we also don&rsquo;t want to fail &ndash; mediocrity is the space between success and failure.</p>

<h3>OPP</h3>

<p>OPP = other peoples priorities. This can take you away from your best work. Learn how to get away from them. The longer your best work project goes on, the more OPP you&rsquo;ll have to contend with it. Plan ahead that you need to respond to them. If you aren&rsquo;t clear about your priorities, you&rsquo;ll continually be beset with OPP.</p>

<p>Look for opportunities that you can include OPP into your own work, somehow.</p>

<h3>Derailers and Naysayers</h3>

<p>There will always exist some that will take you off your project and into doubt. Derailers might now know that they are derailing you. Tell them or get curious to see why they do that.</p>

<p>Naysayers are just that, haters are going to hate. Avoid them. Or instead, turn to your success pack.</p>

<p>Charlie says:</p>

<blockquote><p>Every ounce of energy you use grappling with a naysayer is much better spent on working on your project and interacting with your success pack</p></blockquote>

<h3>Project post-mortems</h3>

<p>Take some time during a project to do a post-mortem. This isn&rsquo;t to say the project will die, but look for opportunities to improve. Of course, you can also benefit by attempting to think through these things from the start, of course. Attempt to do as much learning as you can.</p>

<h1>Part 3 &ndash; Working the Plan</h1>

<h2>Chapter 8 &ndash; weave your project into your schedule</h2>

<h3>Basic rules</h3>

<p>The weekly block schedule, the Five projects rule, and your project road map together create a plan that you can follow and space to do the work.</p>

<p>Momentum planning is Charlie&rsquo;s term for the continual process of making and adjusting plans across all time perspectives. This means, doing weekly reviews, morning planning, and triaging. This also means weaving in the time blocking, project pyramid, and the Five Projects rule.</p>

<h3>Make sure your environment is working for you</h3>

<p>The environment can define the working conditions. Charlie gives an example of how during his graduate school time, most of his best writing happened in 6 years over about 60 days. This was because he tackled writing at the library.</p>

<p>The environment you work in is very important &ndash; providing for your focus, momentum, and creativity.</p>

<h3>Stacking and Batching</h3>

<p>Charlie makes the good point that it takes 16 minutes to refocus after being pulled from focus. There are some tricks he suggested, calling them stacking and batching.</p>

<p>Stacking = doing multiple things at once, when concentration is not required. The example here, while doing laundry, listen to an audiobook. While it seems like it&rsquo;s multitasking, it&rsquo;s not. Due to the less needs of the cognitive side of the brain, this becomes easy to do, riding the muscle memory train. Other examples: doing a meeting over a hike, exercising in the park while with the kids.</p>

<p>The second is batching &ndash; the example being that you set up admin blocks (described before) to check email, do your paperwork, etc. Batch them up together to tackle in one go around.</p>

<h3>Reducing the dread-to-work ratio</h3>

<p>Referencing the famous Mark Twain comment of eating a frog in the morning. Do it as early as possible, so that the rest of the day does not sap your creative and cognitive functions, while also decreasing the dread-to-work ratio of your day.</p>

<p>Dread is a function of time, meaning that if a chunk of work takes 5 minutes, it still takes 5 minutes. However, the &lsquo;dread&rsquo; increases substantially with time. The longer it sits there, the more dread you&rsquo;ve invested into the task. It&rsquo;s the psychological size that haunts you more than the task at hand.</p>

<p>Charlie states that the time you dread the task itself, the distinction becomes blurred, to the point that the time you spend worrying or thinking about it could have spent doing other things. If possible, batch the frogs together.</p>

<p>However, not all frogs can be done early in the morning, as they may require focus blocks. There will always be frogs, it&rsquo;s best to address them for what they are and set up some time to get them done.</p>

<h3>5 / 10 / 15 split</h3>

<p>This little time split reminds you to keep 5 projects at max, with 10 minutes for momentum planning before you start your day, and 15 minutes at the end of your day. This keeps you focused on the daily level.</p>

<p>Try to not plan too far out ahead, the example being you do not plan every gas break, stop light, and every other part of your travel if you are taking a car trip.</p>

<h2>Chapter 9 &ndash; Build Daily Momentum</h2>

<p>Make sure you celebrate small wins. Lean more on your success pack to help you identify wins.</p>

<p>Remember that great is the enemy of done. The more you care about the project, the less &lsquo;done&rsquo; it can achieve.</p>

<p>Create a win journal and store small wins there. The more small wins you get, the more momentum it builds. The more small wins, the better the big win will become.</p>

<p>Create routines and habits that make it easier to build and maintain momentum.</p>

<p>Charlie also suggests leaving a &lsquo;bread crumb&rsquo; trail, which will help you pick back up on projects when you leave them for a bit.</p>

<p>Charlie also addresses some tips you can use to avoid distractions:</p>

<ul>
<li>Use dumb tech</li>
<li>Turn off notifications</li>
<li>Delete apps or remove capabilities</li>
<li>Lock yourself out &ndash; Mac has Cold Turkey blocker, for example</li>
<li>Create better defaults during transition periods to replace the distracting defaults you may have</li>
</ul>


<h3>Cascades, tarpits, and logjams</h3>

<p>This is a nice mental model he shares &ndash; cascades are when one project gets behind, it cascades down. Tarpits are when you leave a project for so long, that when you come back to it, it&rsquo;s stuck in a tar pit and hard to get out. Log jams are what happen when you have too many projects and they get jammed and stuck all at once. Avoid these by the 5 project rule, leaving bread crumbs, and planning appropriately.</p>

<h2>Chapter 10 &ndash; Finish Strong</h2>

<p>Know that by finsihing one project, you are not done. There is more work to be done. It never ends. However, when you finish one project, make sure you take a victory lap and celebrate the win. Lean into your success pack to help drive this.</p>

<h3>CAT work</h3>

<p>CAT = clean up, archive, trash</p>

<p>This is the process you take between projects to clean up any artifacts, archive all the things before, and trash what you no longer need. If you don&rsquo;t do this between projects, you may waste time in the middle of a project doing these. That becomes a distraction.</p>

<h3>After action reviews</h3>

<p>In agile land, these are basically retrospections. Take time to ask the questions to improve later.</p>

<ul>
<li>What went well?</li>
<li>What setbacks, challenges, or missteps did I experience?</li>
<li>What did I learn?</li>
<li>What habits, practices, or routines do I want to keep doing going forward?</li>
<li>Were there any especially important difference makers to the project?</li>
</ul>


<p>However, one thing is important here. Finishing a best-work project unlocks new realities. Embrace them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery - Book Review]]></title>
    <link href="http://jbavari.github.io/blog/2019/11/10/continuous-deilvery-book-review/"/>
    <updated>2019-11-10T11:16:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2019/11/10/continuous-deilvery-book-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;m still diving into the <a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_4?crid=3LLBV00FE8TG3&amp;keywords=continuous+delivery&amp;qid=1576211505&amp;sprefix=continuous+deliv%2Caps%2C192&amp;sr=8-4">Continuous Delivery book</a>. I wanted to sketch out some (very) sparse notes in an attempt to retain the material.</p>

<h1>Chapter 1</h1>

<h2>Common release Anti-patterns</h2>

<ul>
<li>Deploying software manually</li>
<li>Deploying to a production-like environment only after Development is complete</li>
<li>Manual configuration management of production environments</li>
</ul>


<h2>Stages of a deployment pipeline</h2>

<ul>
<li>The commit stage &ndash; compile, unit test, analysis, build installers</li>
<li>Automated acceptance testing</li>
<li>Automated capacity testing</li>
<li>Manual testing &ndash; showcases, exploratory, testing</li>
<li>Release</li>
</ul>


<h3>Deploying to a production-like environment only after Development is complete</h3>

<h4>Problems</h4>

<ul>
<li>Ensure teams are working towards production type releases on a regular cadence, not in extended periods of time.</li>
<li>Manual configurations cause issues &ndash; work towards trying to automate those portions.</li>
<li>Scripts to do the deployments are better than manual steps written up. Documentation goes out of date, requires extra effort to keep alignment.</li>
<li>Need tighter collaboration between development and deployment teams.</li>
<li>Deploying to staging faster (where environments are closer to production) helps uncover issues, bind the dev/ops teams, and drives fixes to deployments faster.</li>
<li>The bigger diff between deployment and production environments</li>
</ul>


<h4>Solutions</h4>

<ul>
<li>Rehearse deployments to a staging or production-like environment several times before actually going to production.</li>
<li>Make sure everyone who is doing the deployments are working together on the deployments from the start of the project.</li>
<li>Make the cornerstone of deployment a means of testing both software and deployments throughout the process.</li>
</ul>


<h3>Manual configuration management of production environments</h3>

<h4>Signs of this anti-pattern</h4>

<ul>
<li>Having deployed successfully to many times to staging, the deployment to production fails.</li>
<li>The operations teams take longer to prepare an environment for a release.</li>
<li>You cannot step back to a prior configuration of your system.</li>
<li>Servers in the operating environments, unintentionally, have different versions of operating systems, third-party infrastructure, libraries, or patch levels.</li>
<li>Configuration of the system is carried out by modifying the configuration directly on production systems.</li>
</ul>


<h4>Solutions</h4>

<ul>
<li>All aspects of testing, staging, and production specifically the configuration of any third-party elements of the system should be applied from version control through an automated process.</li>
<li>The only way to make changes to production should be done through an automated process.</li>
<li>Make it possible to see at a glance what the currently released version of every piece of software is.</li>
<li>Make releases boring &ndash; to the point where they are cheap, low-risk, frequent, rapid, and predictable.</li>
</ul>


<h2>How to achieve these solutions?</h2>

<ul>
<li>Automate &ndash; make it repeatable without failure.</li>
<li>Frequent &ndash; make deltas between releases smaller to reduce risk and get immediate feedback.</li>
</ul>


<p>Three criteria to make feedback to be useful:
* Any change, whatever kind, needs to trigger the feedback process.
* The feedback must be delivered as soon as possible.
* The delivery team must receive feedback and then act on it.</p>

<p>How to get this feedback?</p>

<p>Working software decomposed into 4 components:</p>

<ul>
<li>Executable code</li>
<li>Configuration</li>
<li>Host environment</li>
<li>Data</li>
</ul>


<p>You should aim to have the executable code to be reused everywhere it is needed and never rebuilt.</p>

<p>Any change to an applications configuration, in whichever environment, should be tested with a representative range of the example systems.</p>

<p>If the environments are to changed, the whole system should be tested with the changes to the environment.</p>

<p>Finally, if the structure of the data changes, the change must also be tested.</p>

<p>The authors mention a few simple feedback checks:</p>

<ul>
<li>The software should fulfill certain requirements such as test coverage and other technology-specific metrics.</li>
<li>The software&rsquo;s functional acceptance tests must pass. This is a test on the business acceptance criteria.</li>
<li>The software&rsquo;s nonfunctional tests must pass &ndash; in regards to capacity, availability, security, and so on to meet it&rsquo;s users needs.</li>
</ul>


<p>Another key point the authors bring up that implementing a deployment pipeline is resource-intensive, especially once you have a comprehensive automated test suite. One of the key objectives is to optimize for human resource usage: we want to free the people to do the interesting work and leave repetition to machines.</p>

<p>The authors suggest to aim for 75% or so of the codebase.</p>

<h3>Breaking down the steps of the pipeline</h3>

<p>If tests fail in the early stages of the pipeline, they should not advance. We should aim to build a high confidence in the software in the first set of tests.</p>

<hr />

<p>Random notes:</p>

<p>CH1 &ndash; author recommends to get cross-functional groups all along the process. Also aim to have retrospections with the entire crew of developers, infra/operations, and testing</p>

<p>Being able to react to feedback also means broadcasting information. Using big, visible dashboards and other notification mechanisms. Also aim to make one is present in each team room.</p>

<p>Feedback is no good unless it is acted on.</p>

<p>Authors make a point here that by giving more of the pull/self-service model, you can increase velocity:
* Testers can select older versions of software to test with
* Support staff can deploy a released version into an environment to reproduce a defect.
* Operations staff can select a known good build to deploy into production as part of disaster recovery
* Releases can happen at a push of a button.</p>

<p>Note here applying to work:
* In each PR, it should address:
* Change in code
* Change in configuration (if any)
* Change in host environment (if any)
* Change in structures of data</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Architecture - Book Review]]></title>
    <link href="http://jbavari.github.io/blog/2019/10/08/clean-architecture-book-review/"/>
    <updated>2019-10-08T21:48:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2019/10/08/clean-architecture-book-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently read and held a nerd book club at work regarding Clean Architecture. Overall, I found this read easy to grok and entertain a few new ideas about software development. Uncle Bob also had a few things <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">on his blog post</a> about this topic.</p>

<p>If I could wrap up one picture that encompases the book:</p>

<p><img src="https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg" alt="This image" /></p>

<p>I&rsquo;ve also recently read parts of Domain Driven Design that introduce this same concept. I think Uncle Bob does a great job of sharing some great examples of the book of how architecture is an art, one that can morph with the needs of the project at hand, and is subject to trade-offs through the entire lifecycle of software. I love that the book starts off expressing the idea that thinking of delivery early on is a wise decision to incorporate into the architecture design.</p>

<p>Some other great points I found worthy of mention:</p>

<ul>
<li>How to think of the division of software with regards to firmware and hardware abstraction layers.</li>
<li>Most things are details &ndash; the framework, the database, the GUI, firmware &ndash; keep it separated from the internal domain layers of your business logic however possible.</li>
<li>SOLID Principles are important &ndash; also integrate into architecture design.</li>
<li>Architecture design with traditional monolith, service oriented, and micro-service anti-pattern warnings.</li>
<li>The idea that there is no silver bullet &ndash; <a href="https://twitter.com/codepitbull/status/784691906005635072">A good developer is like a werewolf: afraid of silver bullets</a></li>
</ul>


<p>This book club also gave the team some time to reflect and dive into the design of our current projects. Overall, this was a great book for a team to cover and come up with some action items to drive better software going forward.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 in review]]></title>
    <link href="http://jbavari.github.io/blog/2014/12/31/2014-in-review/"/>
    <updated>2014-12-31T14:37:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2014/12/31/2014-in-review</id>
    <content type="html"><![CDATA[<p>2014 has been an interesting year and I&rsquo;d like to spend a minute to review it for myself as a reminder.</p>

<p>January started out, I was working for my start up, <a href="http://raisemore.com">RaiseMore</a>. I wanted to make 2014 I wanted to share knowledge I had been gathering from our projects at RaiseMore. I made this my purpose for the year is to help others as much as I can, as I truly believe we are all in this together. &ldquo;Iron sharpens iron&rdquo;.</p>

<p>I had been using Cordova, and set some goals up for the year to get more active and contribute to the project. It&rsquo;s really easy, hit <a href="http://wiki.apache.org/cordova/ContributorWorkflow">this link</a> for more information about how to contribute. I started by grabbing some Jira tasks to improve the <a href="http://plugins.cordova.io">Cordova plugin registry</a>. At the time, I thought the registry needed a face lift to help out the community.</p>

<p>As a start up in OKC, we had been using tech that at the time hadnt been popular in OKC. As a team, we all be focused heavily on a platform built of an iOS/Android app, API server, database, and a few other back end services. All of the technologies we used were done in Ruby, Rails, Sinatra, Postgres, Cordova, JavaScript, some Grunt/Gulp build systems.</p>

<p>The biggest challenge we had as a small team of 4 devs was how to manage the systems. Since they were all broken up into multiple projects, we all had to care a lot about one portion as well as have general knowledge on the other parts. Reflecting on this now &ndash; this worked really well for our team.</p>

<p>By March, I had spoke few times at the Ruby group, a few at the JavaScript group, and after some convincing and encouragement from a great friend, Rob Sullivan, I worked up the courage to submit some talks to the Kansas City Developer conference in May.</p>

<p>I saw a post by the Apache foundation, proposing a tweet-off to get a free ticket to ApacheCon 2014 in Denver. This would let me meet some of the great devs I had been collaborating/talking with through the Cordova IRC/Mailing list/google hangouts. I won the ticket, and with some help from friends, <a href="http://jbavari.github.io/blog/2014/04/14/apachecon-2014/">made it to Denver and met all the Cordova devs</a>. Just like Rob always tells me &ndash; if you don&rsquo;t ask, then it will always be a &lsquo;no&rsquo;. Glad I was pro-active and tweeted for the ticket!</p>

<p>May hits and I find myself infront of 100+ devs that have come to see my <a href="http://jbavari.github.io/blog/2014/05/16/kcdc-javascript-build-system-showdown/">talk at Kansas City Dev Conf</a> &ndash; I had to admit and say I was very nervous. After my talk, I had a ton of great questions, feedback, and general appreciation for my sharing of knowledge. I then gave a second talk a few hours later over <a href="http://jbavari.github.io/blog/2014/05/17/moving-forward-with-phonegap-slash-cordova-plugins/">Moving forward with Cordova plugins</a> that talked about how to understand/create plugins for Cordova projects, including pushing them to the registry.</p>

<p>After my second talk is where I met a now good friend, <a href="https://twitter.com/MountainDoofus">Ross Martin</a>, and we still talk and collaborate about an awesome Ionic app that he is making. Two big things in 2014 &ndash; sharing freely and talking through twitter. Its gold, folks.</p>

<p>Come July, I&rsquo;ve decided it&rsquo;s time for me to face my biggest fear yet &ndash; moving out of Oklahoma and living alone. I had begun interviewing and networking with others around the country involved in tech. I highly recommend this &ndash; as I met some great connections now of people to talk to, to help, to bounce ideas off, and just generally respect. I had decided to move to Boulder, Colorado, as I had fallen in love with the mountains.</p>

<p>Come October, I had been selected to speak at <a href="http://thunderplainsconf.com/">Thunder Plains</a>, which was a great reason to head back to my home town of Oklahoma, present, and catch up with all the great technologists in Oklahoma. That town is packed full of amazing people that are working together as <a href="http://techlahoma.org/">techlahoma</a> &ndash; Rob Sullivan, Jesse and Amanda Harlin, Vance Lucas, Jeremy Green, Jeff French, and way too many more to mention!</p>

<p>I got a job at Mondo Robot, where I worked for a few months with them on a handful of interesting projects from August until November. Through my interaction with the Cordova community, I came to find a job working for Drifty, which you may know by the awesome <a href="http://ionicframework.com">Ionic Framework</a>.</p>

<p>I can honestly say working for Drifty has been amazing. All day long I get to work on something I really believe in, find meaning in, and most importantly, aligns with my goals of helping others. All day long I get to work on a hobby with others who are just as excited and driven to win as I am. I couldn&rsquo;t ask for a better place to end up.</p>

<p>The year I turned 30, 2014, has come to an end. Looking back, I can say I&rsquo;m happy of my progress, and striving to continue processes that keep me helping others to the best of my ability and keep giving back.</p>

<p>Here&rsquo;s to an awesome 2015 for us all, lets make it awesome.</p>
]]></content>
  </entry>
  
</feed>
