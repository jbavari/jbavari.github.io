<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: npm | Josh Bavari's Thoughts]]></title>
  <link href="http://jbavari.github.io/blog/categories/npm/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2019-12-12T21:32:46-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[npm Production Checklist]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/17/npm-production-checklist/"/>
    <updated>2015-10-17T18:33:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/17/npm-production-checklist</id>
    <content type="html"><![CDATA[<p>I recently read this post by RisingStack over the <a href="https://blog.risingstack.com/node-js-production-checklist">Node.js Production Checklist</a>.</p>

<p>Since this was aimed at releasing node.js applications for the most part, I wanted to touch base on a &lsquo;production checklist&rsquo; on releasing a npm module.</p>

<p>The <a href="https://docs.npmjs.com/misc/developers">npm-developers guide</a> does a <em>great</em> job of explaining much you need to know about publishing your npm module.</p>

<p>This post will mainly serve as a work in progress document to supplement the developers guide, as well as serving as a way to help me continue to keep learning best practices all the time.</p>

<p>Some of the methods I use in my npm release schedule are as follows:</p>

<ol>
<li>Keeping files out of your package</li>
<li>Locking versions</li>
<li>Continuous integration (tests, install, etc)</li>
<li>Alpha/beta pushes (user testing)</li>
<li><a href="https://github.com/tjunnone/npm-check-updates">npm-check-updates</a></li>
</ol>


<h2>Keeping files out of your package</h2>

<p>We want our users to only have to download what they need to use your module. This may mean removing any files that are not beneficial for the user. Much like <code>.gitignore</code> for files being checked into git, npm has <code>.npmignore</code>.</p>

<p>Straight from <a href="https://docs.npmjs.com/misc/developers#keeping-files-out-of-your-package">npm docs</a>:</p>

<blockquote><p>Use a .npmignore file to keep stuff out of your package. If there&rsquo;s no .npmignore file, but there is a .gitignore file, then npm will ignore the stuff matched by the .gitignore file. If you want to include something that is excluded by your .gitignore file, you can create an empty .npmignore file to override it. Like git, npm looks for .npmignore and .gitignore files in all subdirectories of your package, not only the root directory.</p></blockquote>

<p>We can also use a command in the npm CLI called <code>prune</code>.</p>

<p>Again, straight from the <a href="https://docs.npmjs.com/cli/prune">npm documentation</a>:</p>

<blockquote><p>This command removes &ldquo;extraneous&rdquo; packages. If a package name is provided, then only packages matching one of the supplied names are removed.
Extraneous packages are packages that are not listed on the parent package&rsquo;s dependencies list.
If the &mdash;production flag is specified or the NODE_ENV environment variable is set to production, this command will remove the packages specified in your devDependencies. Setting &mdash;production=false will negate NODE_ENV being set to production.</p></blockquote>

<p>This is a great way to ensure you dont have any extra packages you might have installed via <code>npm install</code> and either forgot to pass the <code>--save</code> flag or were just testing functionality.</p>

<p>You can also use this command inline with the <code>--production</code> flag when installing node modules to avoid having the extra cruft of the <code>devDependencies</code>, which are mainly used for developing the modules (think testing, etc).</p>

<h2>Locking versions</h2>

<p>Theres a few methods to use with npm to lock down your versions. You can use the <code>npm shrinkwrap</code> command or specify node modules to bundle in your module with <code>bundleDependencies</code>.</p>

<p>The strategy is, you can either pack those in with your tarball as they are in your <code>node_modules</code> folder, or you can lock down those exact versions by storing the exact tarball to download when the user <code>npm install</code>s your module.</p>

<p>Edit: I&rsquo;ve just learned on a new method to package bundle up node modules by using the <code>bundledDependencies</code> attribute in your projects <code>package.json</code> file.</p>

<h2>Bundling</h2>

<p>By specifying <code>bundleDependencies</code> in your package.json, you are telling npm on its publishing process to include those modules listed in the tarball it creates and pushes up to the npm registry. For example, if you go to any npm repo and download the tarball in the url there, unzip it and open it, you&rsquo;ll see those exact node modules in them as you&rsquo;ve got in your own <code>node_modules</code> folder.</p>

<p>This effectively locks down your modules versions, at the cost of a larger tarball size the user will download intially. Any modules that are not bundled, will then be downloaded and installed after the tarball is downloaded.</p>

<h2>Shrinkwrapping</h2>

<p>If you&rsquo;ve ever done any Rails, you&rsquo;ve probably seen the gemfile.lock. The equivalent in Node land is the <code>npm-shrinkwrap.json</code> file.</p>

<p>What the <code>npm shrinkwrap</code> command does is looks at your <code>node_modules</code> folder and looks at the packages installed there and compares those to what is in your <code>package.json</code> file.</p>

<p>Straight from <a href="https://docs.npmjs.com/cli/shrinkwrap">npm documentation</a>:</p>

<blockquote><p>The shrinkwrap command has locked down the dependencies based on what&rsquo;s currently installed in node_modules. The installation behavior is changed to:</p>

<p>The module tree described by the shrinkwrap is reproduced. This means reproducing the structure described in the file, using the specific files referenced in &ldquo;resolved&rdquo; if available, falling back to normal package resolution using &ldquo;version&rdquo; if one isn&rsquo;t.</p>

<p>The tree is walked and any missing dependencies are installed in the usual fasion.</p></blockquote>

<p>A huge misconception is that shrinkwrap locks down what versions are in your <code>package.json</code> file. This is incorrect. Just to reiterate, it will look in your <code>node_modules</code> and use that compared to your <code>package.json</code> file.</p>

<p>Edit: Another thing to note, if you take a look in your npm-shrinkwrap.json, you&rsquo;ll see the exact URL for that versions tarball to download, which npm cli will use to grab without taking a peep at anything else. This may cause issues for some users, as stated by <a href="https://github.com/driftyco/ionic-cli/issues/636">Forrest on this Ionic CLI issue</a>:</p>

<blockquote><p>Due to how shrinkwrap works, it ends up bypassing the npm cache and redownloading every package mentioned in the shrinkwrap each time npm install is run. If users have any issues with their network, or something gets sticky with npm&rsquo;s CDN, the whole install can fail, forcing them to start over again.</p></blockquote>

<p>Heed this warning, friends.</p>

<h2>Testing</h2>

<p>Try to avoid the old addage, &lsquo;it worked on my machine&rsquo;, by having a CI server pull your package, run some tests, and even sometimes install the module to make sure it works on other machines besides your own.</p>

<p>I really enjoy using <a href="https://circleci.com/">CircleCI</a>, as it is free for open source projects! You can normally specify a config file that says what version of node/npm to use and the rest is automated.</p>

<h2>Alpha/beta pushes</h2>

<p>I covered this in a <a href="http://jbavari.github.io/blog/2015/10/16/using-npm-tags">previous article about using npm tags</a>.</p>

<p>The idea is, before publishing your version to npm, try doing a alpha/beta push first (to save the version in npm you&rsquo;re about to publish, since there can only be <em>one</em> version) to let users <code>npm install</code> the module to run some tests before commiting that to the <code>latest</code> tag for everyone to install.</p>

<h2>npm Check Updates</h2>

<p>There&rsquo;s a nice module that looks at your <code>package.json</code> file and looks to see the latest tags on the modules you specify in your dependencies.</p>

<p>It will give you some heads up if there are latest packages, so you can update if you have too many out of date packages.</p>

<p>Hope this helps!</p>

<p>References:</p>

<ul>
<li><a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">Using npm as a build tool</a></li>
<li><a href="http://jbavari.github.io/blog/2015/10/16/using-npm-tags">Using npm tags</a></li>
<li><a href="https://docs.npmjs.com/cli/shrinkwrap">npm documentation</a></li>
<li><a href="https://docs.npmjs.com/misc/developers">npm-developers guide</a></li>
<li><a href="https://www.npmjs.com/package/module-best-practices#naming-conventions">npm &ndash; Module best practices</a></li>
<li><a href="https://blog.risingstack.com/node-js-production-checklist">Node.js Production Checklist</a></li>
<li><a href="http://blog.nchaulet.fr/publish-package-on-npm-best-practice/">Publish packages on npm &ndash; best practice</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using npm tags]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/16/using-npm-tags/"/>
    <updated>2015-10-16T15:16:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/16/using-npm-tags</id>
    <content type="html"><![CDATA[<p>If you do any kind of deployments to npm, you&rsquo;ll probably find learning more about npm tags very helpful.</p>

<p>Just as git tags mark commits in your repository history, npm tags mark a specific version in the npm registry of your published versions.</p>

<p>If you didn&rsquo;t know, npm manages a tag &lsquo;latest&rsquo; that points to the last version you put out with <code>npm publish</code>.</p>

<p>The syntax to publish a new version and tag that version with the name beta, use: <code>npm publish --tag beta</code>.</p>

<h2>Installing from tags</h2>

<p>To have your users install your node module, they just type <code>npm install</code>. What that does is looks at npm&rsquo;s latest tag for your repository, and installs that version.</p>

<p>They can also specify a version by passing it after the <code>@</code> character after the module name: <code>npm install module@1.7.3</code>.</p>

<p>Lets say you have some beta users and always want them to grab the beta, without having to remember the latest version you&rsquo;ve pushed.</p>

<p>You just run <code>npm publish --tag beta</code>, then have them run <code>npm install module@beta</code>.</p>

<p>At any time, they can still specify the beta version <code>npm install module@1.7.3-beta.1</code> if they want to hop down or up a version, for example.</p>

<h2>Looking up npm tags</h2>

<p>Using the npm CLI, you can easily see the versions by running <code>npm view ionic dist-tags</code>. Just replace <code>ionic</code> with whatever module you&rsquo;d want to see.</p>

<p>You can also look up the entire list of versions npm maintains at the url, <a href="http://registry.npmjs.org/ionic">registry.npmjs.org/ionic</a>.</p>

<p>As a fun fact, npm uses tags on its own tool, npm, to mark the <code>latest</code>, <code>latest-2</code>, <code>next</code>, <code>next-2</code>, as well as their next versions in their current major/minor versions, for example:</p>

<p><code>latest =&gt; 3.3.8 next =&gt; 3.3.9 latest-2 =&gt; 2.14.7 next-2 =&gt; 2.14.8 v3.x-latest =&gt; 3.3.8 3.x-latest =&gt; 3.3.8 3.x-next =&gt; 3.3.9 v3.x-next =&gt; 3.3.9</code></p>

<p>Also, I made a <a href="http://jbavari.github.io/registry">quick tool</a> to look up tags for you npm version.</p>

<h2>Assigning a tag</h2>

<p>Let&rsquo;s say you have a blessed version you now want to promote. It&rsquo;s super simple to set up that tag to the previous version.</p>

<p>Just run <code>npm dist-tags add ionic-app-lib@0.6.5 latest</code> and you&rsquo;ll have the <code>latest</code> tag point at <code>0.6.5</code>.</p>

<h3>Whoops, I accidently published without a tag!</h3>

<p>This has happened to me thousands of times. I&rsquo;ve run <code>npm publish</code> without specifying a tag, and now, my <code>latest</code> points at an alpha version. How embarassing.</p>

<p>The scenario is this &ndash; my module <code>ionic-app-lib</code> currently has its latest tag at <code>0.6.4</code>, i&rsquo;m working on <code>2.0.0-alpha.18</code>, and I type in <code>npm publish</code>. I wanted to tag this as <code>alpha</code>, but because of my haste, now all my users will grab this version blindly without wanting it.</p>

<p>Thankfully, this is easily fixed &ndash; we just have to point <code>latest</code> tag back to its version.</p>

<p>First, just put latest back to 0.6.4, like so: <code>npm dist-tags add ionic-app-lib@0.6.4 latest</code>.</p>

<p>Now we put alpha to what we wanted originally, like so: <code>npm dist-tags add ionic-app-lib@2.0.0-alpha.18 alpha</code>.</p>

<p>Bam! Now everything is back to how we want it!</p>

<h2>Removing tags</h2>

<p>This is super simple: <code>npm dist-tags rm alpha</code> &ndash; this wipes it out.</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Built Node Modules]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/15/understanding-built-node-modules/"/>
    <updated>2015-10-15T08:32:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/15/understanding-built-node-modules</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve recently change node versions and begun running into issues with some of your modules, you might get a little help from understanding how native node modules work.</p>

<p>TL;DR: If you upgraded node, run <code>npm rebuild</code> or <code>rm -rf node_modules &amp;&amp; npm install</code>.</p>

<p>Why: This has to do with some of your modules you may be using having native bindings to your current system runtime.</p>

<p>This then put me on a quest to understand more how native node modules are used. What I&rsquo;m referring to, is using <a href="https://nodejs.org/api/addons.html">Node addons</a>:</p>

<blockquote><p>Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries. The API (at the moment) is rather complex, involving knowledge of several libraries</p>

<p>Node.js statically compiles all its dependencies into the executable. When compiling your module, you don&rsquo;t need to worry about linking to any of these libraries.</p></blockquote>

<p>Since I maintain the <a href="https://github.com/driftyco/ionic-cli">Ionic CLI</a>, we have a few depedencies to a native node module, node-sass.</p>

<p>Node-sass relies on some native C/C++ bindings to compile SASS down to CSS.</p>

<p>If you have a version of Node 0.12 for example, and install the ionic-cli, then install Node 4.2.1, you may have issues running the CLI.</p>

<p>This is due to the module building itself with that version of node and using those bindings, then when you install a new version of Node, you can&rsquo;t use those same bindings.</p>

<p>When you change versions of node, make sure you do a quick <code>rm -rf node_modules</code> if on mac, or deleting the node_modules folder on windows and doing a fresh <code>npm install</code>.</p>

<p>If you want to read a little more, background information is shared by <a href="http://twitter.com/voodootikigod">Chris Williams</a> about his struggles maintaining the node-serialport module on <a href="http://www.voodootikigod.com/on-maintaining-a-native-node-module/">this post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy loading your node modules]]></title>
    <link href="http://jbavari.github.io/blog/2015/08/25/lazy-loading-your-node-modules/"/>
    <updated>2015-08-25T15:29:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/08/25/lazy-loading-your-node-modules</id>
    <content type="html"><![CDATA[<p>While working at <a href="http://ionicframework.com">Ionic</a> I&rsquo;ve been focused on the <a href="http://npmjs.org/package/ionic">Ionic CLI</a>.</p>

<p>My first big refactor of the CLI was pulling out most of the 21 commands it offers into an external library (<a href="http://github.com/driftyco/ionic-app-lib">ionic-app-lib</a>) that could be consumed by both the Ionic CLI and our GUI &ndash; <a href="http://lab.ionic.io">Ionic Lab</a>.</p>

<p>The refactor went rather smoothly.</p>

<p>However, one thing happened that was not expected &ndash; now that the ionic-app-lib bundled all the commands together, whenever you required the app-lib module, it was rather slower than expected.</p>

<p>For example, whenever you ran: <code>var IonicAppLib = require('ionic-app-lib');</code> &ndash; it would take a wee bit longer.</p>

<p>Here&rsquo;s the code for the included moduled <code>ionic-app-lib</code>:</p>

<p>``` js</p>

<p>var browser = require(&lsquo;./lib/browser&rsquo;),</p>

<pre><code>configXml = require('./lib/config-xml'),
cordova = require('./lib/cordova'),
events = require('./lib/events'),
hooks = require('./lib/hooks'),
info = require('./lib/info'),
ioConfig = require('./lib/io-config'),
login = require('./lib/login'),
logging = require('./lib/logging'),
multibar = require('./lib/multibar'),
opbeat = require('./lib/opbeat'),
project = require('./lib/project'),
share = require('./lib/share'),
semver = require('semver'),
serve = require('./lib/serve'),
settings = require('./lib/settings'),
setup = require('./lib/setup'),
start = require('./lib/start'),
state = require('./lib/state'),
upload = require('./lib/upload'),
utils = require('./lib/utils');
</code></pre>

<p>module.exports = {
  browser: browser,
  configXml: configXml,
  cordova: cordova,
  events: events,
  hooks: hooks,
  info: info,
  ioConfig: ioConfig,
  login: login,
  logging: logging,
  multibar: multibar,
  opbeat: opbeat,
  project: project,
  share: share,
  semver: semver,
  serve: serve,
  settings: settings,
  setup: setup,
  start: start,
  state: state,
  upload: upload,
  utils: utils
}</p>

<p>```</p>

<p>As you can see, whenever this module is <code>require</code>&rsquo;d in, it <code>require</code>&rsquo;s even more modules. This means, more file read requests and fulfilling those just to get this module working.</p>

<p>Also to note &ndash; anytime a new command was added in, it must be exported by adding in another annoying <code>require</code> statement.</p>

<h2>Lazy loading via JavaScript getters</h2>

<p>While looking through other open source projects, I came across the idea of lazy loading your modules on demand.</p>

<p>One way to do this is with JavaScript getters being defined. We wont <code>require</code> the module until it is requested.</p>

<p>For example, the code snippet:</p>

<p>``` js</p>

<p>var IonicAppLib = require(&lsquo;ionic-app-lib&rsquo;);
var options = { port: 8100, liveReloadPort: 35729 };</p>

<p>//Do not load the serve command until it is requested as below:
IonicAppLib.serve.start(options);</p>

<p>```</p>

<p>What&rsquo;s happening above &ndash; <code>require('ionic-app-lib')</code> is called, which sets up the <code>getters</code> for start, serve, run, etc. Then, when the command is called, the <code>require</code> for the module then happens, thereby getting the module loaded, and returning it to the caller.</p>

<p>Here&rsquo;s that code to enforce the lazy loading of modules:</p>

<p>``` js</p>

<p>var fs = require(&lsquo;fs&rsquo;),</p>

<pre><code>IonicAppLib = module.exports,
path = require('path');
</code></pre>

<p>var camelCase = function camelCase(input) {</p>

<pre><code>return input.toLowerCase().replace(/-(.)/g, function(match, group1) {
    return group1.toUpperCase();
});
</code></pre>

<p>};</p>

<p>//
// Setup all modules as lazy-loaded getters.
//
fs.readdirSync(path.join(__dirname, &lsquo;lib&rsquo;)).forEach(function (file) {
  file = file.replace(&lsquo;.js&rsquo;, &lsquo;&rsquo;);
  var command;</p>

<p>  if (file.indexOf(&lsquo;&ndash;&rsquo;) > 0) {</p>

<pre><code>// console.log('file', file);
command = camelCase(file);
</code></pre>

<p>  } else {</p>

<pre><code>command = file;
</code></pre>

<p>  }</p>

<p>  IonicAppLib.<strong>defineGetter</strong>(command, function () {</p>

<pre><code>return require('./lib/' + file);
</code></pre>

<p>  });
});</p>

<p>IonicAppLib.<strong>defineGetter</strong>(&lsquo;semver&rsquo;, function () {
  return require(&lsquo;semver&rsquo;);
});</p>

<p>```</p>

<h3>Testing</h3>

<p>I threw together a quick test to ensure that all of the modules were still correctly being accessible:</p>

<p>``` js</p>

<p>var index = require(&lsquo;../index&rsquo;);</p>

<p>describe(&lsquo;index&rsquo;, function() {</p>

<p>  it(&lsquo;should have index defined&rsquo;, function() {</p>

<pre><code>expect(index).toBeDefined();
</code></pre>

<p>  });</p>

<p>  function testForProperty(input) {</p>

<pre><code>it('should have ' + input + ' available', function() {
  expect(index[input]).toBeDefined();
});
</code></pre>

<p>  }</p>

<p>  var objs = [&lsquo;browser&rsquo;, &lsquo;configXml&rsquo;, &lsquo;cordova&rsquo;, &lsquo;events&rsquo;, &lsquo;hooks&rsquo;, &lsquo;info&rsquo;,</p>

<pre><code>          'ioConfig', 'login', 'logging', 'multibar', 'opbeat', 'project', 
          'share', 'semver', 'serve', 'settings', 'setup', 'start', 'state', 
          'stats', 'upload', 'utils'];
</code></pre>

<p>  // Doing it this way to give better failure messages.
  // Ensures all commands are available currently from
  objs.forEach(function(obj) {</p>

<pre><code>// expect(index[obj], obj).toBeDefined();
testForProperty(obj);
</code></pre>

<p>  });</p>

<p>});
```</p>

<h2>Gotchas</h2>

<p>For one &ndash; you&rsquo;ll need to ensure your files adhere to some naming conventions. For our commands, we had some with hyphens (<code>-</code>) that we had to account for, as you can see above <code>if (file.indexOf('-') &gt; 0)</code>.</p>

<p>Also &ndash; if you want to export other modules you can set up other getters, as I did with <code>semver</code> above.</p>

<p>If you want to short circuit lazy loading, go ahead and just export them as normal.</p>

<h2>Performance</h2>

<p>We say about a 8x performance increase by lazy loading the modules.</p>

<p>CLI run times:
<code>
Not lazy loading modules:   830ms
Lazy loading modules:       200ms
</code></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using npm scripts for Cordova]]></title>
    <link href="http://jbavari.github.io/blog/2014/06/19/using-npm-scripts-for-cordova/"/>
    <updated>2014-06-19T00:25:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/06/19/using-npm-scripts-for-cordova</id>
    <content type="html"><![CDATA[<p>For those of you that don&rsquo;t know, Cordova has <a href="https://github.com/apache/cordova-lib/blob/master/cordova-lib/templates/hooks-README.md">hooks</a> that can run on each of the specific build tasks that Cordova goes through. For example the task that happens after all the platform specific code is set up, the <code>after_prepare</code> hook is fired.</p>

<p>Tonight I had the pleasure of collaborating with my friend <a href="https://twitter.com/MountainDoofus">Ross Martin</a> over a project he put together. The project is called <a href="https://github.com/rossmartin/cordova-uglify">cordova-uglify</a> and it focuses on uglifying/minifying JavaScript before building your Cordova app. See his comment in response to <a href="http://www.mooreds.com/wordpress/archives/1425">Dan Moore&rsquo;s Accessing more build information from your Cordova CLI hooks</a> blog for more information on why.</p>

<p>The project was having an <code>after_prepare</code> hook in Cordova to uglify the application&rsquo;s JavaScript once the code is put in place for iOS/Android.</p>

<p>This project Ross put together was interesting. There have been some blogs on <a href="http://www.mooreds.com/wordpress/archives/1197">using hooks in Cordova</a> as well as <a href="http://devgirl.org/2013/11/12/three-hooks-your-cordovaphonegap-project-needs/#comments">three hooks every cordova / phonegap project needs</a>. Moving forward, it&rsquo;d be nice to make some of these hooks and share them out much like we share packages on npm.</p>

<p>The only problem with using them as packages, is we need to place code somewhere outside of the <code>node_modules</code> folder (where the package will be installed from <code>npm install</code>).</p>

<p>This is what we&rsquo;d get if we just used npm install cordova-uglify (notice uglify.js is only in <code>node_modules</code> directory):</p>

<p>```
// ./CordovaProjectDirectory
//      /hooks
//      /node_modules
//          /cordova-uglify
//              /after_prepare
//                  /uglify.js
//              /scripts
//                  install.js
//                  uninstall.js
//      /www</p>

<p>```</p>

<p>What we actually want has our uglify.js in our <code>hooks/after_prepare</code> directory:</p>

<p><code>
// ./CordovaProjectDirectory
//      /hooks
//          /after_prepare
//              uglify.js
//      /node_modules
//          /cordova-uglify
//              /after_prepare
//                  uglify.js
</code></p>

<p>Then it hit me, we can use npm scripts!</p>

<h2>The idea</h2>

<p>Let&rsquo;s package up Cordova tools, publish on npm, and then use <a href="https://www.npmjs.org/doc/misc/npm-scripts.html">npm scripts</a> to install/uninstall them as necessary.</p>

<p>npm gives its package owners the ability to run scripts on various events in the npm life cycle. The interesting ones we care about are those being <code>postinstall</code> and <code>postuninstall</code>.</p>

<p>The idea is this:</p>

<ul>
<li>You run <code>npm install cordova-uglify</code></li>
<li>After installing, npm runs the <code>postinstall</code> script to copy files into proper location</li>
<li>Profit $$$</li>
</ul>


<p>Ross put me up to the challenge, so I took it up. Here&rsquo;s what I put our package.json to be:</p>

<p>``` js
{
  &ldquo;name&rdquo;: &ldquo;cordova-uglify&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.5&rdquo;,
  &ldquo;description&rdquo;: &ldquo;Cordova hook that allows you to uglify or minify your apps JavaScript and CSS.&rdquo;,
  &ldquo;homepage&rdquo;: &ldquo;<a href="https://github.com/rossmartin/cordova-uglify">https://github.com/rossmartin/cordova-uglify</a>&rdquo;,
  &ldquo;keywords&rdquo;: [</p>

<pre><code>"cordova",
"uglify",
"minify",
"hook",
"hooks"
</code></pre>

<p>  ],
  &ldquo;peerDependencies&rdquo; : {</p>

<pre><code>"yuicompressor" : "2.4.8"
</code></pre>

<p>  },
  &ldquo;author&rdquo;: &ldquo;Ross Martin&rdquo;,
  &ldquo;license&rdquo;: &ldquo;MIT&rdquo;,
  &ldquo;bugs&rdquo;: {</p>

<pre><code>"url": "https://github.com/rossmartin/cordova-uglify/issues"
</code></pre>

<p>  },
  &ldquo;readmeFilename&rdquo;: &ldquo;README.md&rdquo;,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"postinstall": "node scripts/install.js",
"postuninstall": "node scripts/uninstall.js"
</code></pre>

<p>  }
}
```</p>

<p>To which I then created a quick script to do the file copying &ndash; <code>scripts/install.js</code></p>

<p>``` js</p>

<h1>!/usr/bin/env node</h1>

<p>var fs = require(&lsquo;fs&rsquo;)
var path = require(&lsquo;path&rsquo;)
var cwd = process.cwd() //proj directory
var scriptPath = __dirname //node_modules/cordova-uglify/scripts</p>

<p>var paths = [ path.join(cwd, &lsquo;../../hooks&rsquo;), path.join(cwd, &lsquo;../../hooks/after_prepare&rsquo;) ];</p>

<p>for(var pathIndex in paths) {</p>

<pre><code>if(!fs.existsSync(paths[pathIndex])) {
    console.log('Creating directory: ', paths[pathIndex])
    fs.mkdirSync(paths[pathIndex]);
}   
</code></pre>

<p>}</p>

<p>var uglifyScriptPath = path.join(cwd, &lsquo;after_prepare&rsquo;, &lsquo;uglify.js&rsquo;);</p>

<p>var uglifyFile = fs.readFileSync(uglifyScriptPath);
console.log(&lsquo;uglifyFile: &rsquo;, uglifyFile)
var uglifyAfterPreparePath = path.join(paths[1], &lsquo;uglify.js&rsquo;)</p>

<p>console.log(&lsquo;Creating uglify hook: &rsquo;, uglifyAfterPreparePath)
fs.writeFileSync(uglifyAfterPreparePath, uglifyFile);</p>

<p>```</p>

<p>As well as uninstalling it &ndash; <code>scripts/uninstall.js</code>:</p>

<p>``` js</p>

<h1>!/usr/bin/env node</h1>

<p>//After uninstall script to remove the uglify.js script from the users hooks/after_prepare directory</p>

<p>var fs = require(&lsquo;fs&rsquo;)
var path = require(&lsquo;path&rsquo;)
var cwd = process.cwd()</p>

<p>var uglifyJsPath = path.join(cwd, &lsquo;../../&rsquo;, &lsquo;hooks&rsquo;, &lsquo;after_prepare&rsquo;, &lsquo;uglify.js&rsquo;)</p>

<p>fs.unlink(uglifyJsPath)
console.log(&lsquo;Removed: &rsquo;, uglifyJsPath)
```</p>

<p>Simple and sweet.</p>

<p>Now, is it an anti-pattern? I&rsquo;m not sure.</p>

<p>Does it make it easier for other developers to get started and using it? Yes.</p>

<p>That&rsquo;s exactly what I was going for.</p>

<p>Thanks Ross for planting the idea in my head, and more importantly, for the challenge to learn.</p>
]]></content>
  </entry>
  
</feed>
